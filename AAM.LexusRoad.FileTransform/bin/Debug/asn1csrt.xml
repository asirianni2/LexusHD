<?xml version="1.0"?>
<doc>
    <assembly>
        <name>asn1csrt</name>
    </assembly>
    <members>
        <member name="T:Oss.Asn1.EncodingRules">
            <summary>
            Defines the supported ASN.1 encoding rules.
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Ber">
            <summary>
            BER (Basic Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.PerAligned">
            <summary>
            Aligned PER (Packed Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.PerUnaligned">
            <summary>
            Unaligned PER (Packed Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Oer">
            <summary>
            OER (Octet Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Der">
            <summary>
            DER (Distinguished Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Json">
            <summary>
            JSON (JavaScript Object Notation Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Xer">
            <summary>
            XER (XML Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Coer">
            <summary>
            Canonical OER (Octet Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Exer">
            <summary>
            EXER (Extended XML Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.Cxer">
            <summary>
            Canonical XER (XML Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.CperAligned">
            <summary>
            Aligned Canonical PER (Packed Encoding Rules)
            </summary>
        </member>
        <member name="F:Oss.Asn1.EncodingRules.CperUnaligned">
            <summary>
            Unaligned Canonical PER (Packed Encoding Rules)
            </summary>
        </member>
        <member name="T:Oss.Asn1.BaseCodec">
            <summary>
            This is the base class for all codec classes. 
            It offers functionality for encoding and decoding PDUs using streams.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseCodec.#ctor(Oss.Asn1.Internal.SchemaMetadata)">
            <summary>
            Constructs a BaseCodec object.
            </summary>
            <param name="metadata">The schema metadata.</param>
        </member>
        <member name="P:Oss.Asn1.BaseCodec.EncoderOptions">
            <summary>
            Returns an object which can be used to modify the encoding options common to all codecs.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseCodec.DecoderOptions">
            <summary>
            Returns an object which can be used to modify the decoding options common to all codecs.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseCodec.EncodingRules">
            <summary>
            Returns the encoding rules implemented by this codec instance.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseCodec.Encode(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes a PDU object to a Stream.
            </summary>
            <param name="pdu">The PDU object to be encoded.</param>
            <param name="stream">The output stream in which the encoded data is written.</param>
            <returns>The size of the encoded data written to the stream, in bytes.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.BaseCodec.Decode(System.IO.Stream,Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU object from a Stream.
            </summary>
            <param name="stream">The input stream from which the encoded data is read.</param>
            <param name="pdu">The PDU object in which the decoded data is stored.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.BaseCodec.Decode``1(Oss.Asn1.OctetStringWithContentsConstraint{``0})">
            <summary>
            Decodes a PDU from an OctetStringWithContentsConstraint object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="value">The OctetStringWithContentsConstraint object from which the PDU is decoded.</param>
            <returns>The decoded PDU.</returns>
        </member>
        <member name="M:Oss.Asn1.BaseCodec.Decode``1(Oss.Asn1.BitStringWithContentsConstraint{``0})">
            <summary>
            Decodes a PDU from a BitStringWithContentsConstraint object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="value">The BitStringWithContentsConstraint object from which the PDU is decoded.</param>
            <returns>The decoded PDU.</returns>
        </member>
        <member name="M:Oss.Asn1.BaseCodec.Decode(Oss.Asn1.OpenType,Oss.Asn1.Asn1Type)">
            <summary>
            Decodes a PDU from an OpenType object.
            </summary>
            <param name="ot">The OpenType object from which the PDU is decoded.</param>
            <param name="containedAsn1Type">The type of the contained PDU.</param>
            <returns>The decoded PDU.</returns>
        </member>
        <member name="M:Oss.Asn1.BaseCodec.Decode``1(Oss.Asn1.OpenType)">
            <summary>
            Decodes a PDU from an OpenType object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="ot">The OpenType object from which the PDU is decoded.</param>
            <returns>The decoded PDU.</returns>
        </member>
        <member name="T:Oss.Asn1.BinaryCodec">
            <summary>
            Base class for all codecs implementing binary encoding rules (BER, OER, PER)
            </summary>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.#ctor(Oss.Asn1.Internal.SchemaMetadata)">
            <summary>
            Constructs a BinaryCodec object.
            </summary>
            <param name="metadata">The schema metadata.</param>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Encode(Oss.Asn1.BasePdu,System.Byte[])">
            <summary>
            Encodes a PDU object into a buffer.
            </summary>
            <param name="pdu">The PDU object to be encoded.</param>
            <param name="buffer">The buffer in which the encoded data is written.</param>
            <returns>The size of the encoded data written to the buffer, in bytes.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
            <exception cref="T:Oss.Asn1.Asn1OutputFullException">Thrown if buffer is too small.</exception>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Encode(Oss.Asn1.BasePdu,System.Byte[],System.Int32)">
            <summary>
            Encodes a PDU object into a buffer, at the specified starting position.
            </summary>
            <param name="pdu">The PDU object to be encoded.</param>
            <param name="buffer">The buffer in which the encoding is written.</param>
            <param name="index">The buffer position at which to begin writing the encoded data.</param>
            <returns>The size of the encoded data written to the buffer, in bytes.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
            <exception cref="T:Oss.Asn1.Asn1OutputFullException">Thrown if buffer is too small.</exception>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Encode(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU object into a new buffer.
            </summary>
            <param name="pdu">The PDU object to be encoded.</param>
            <returns>The new buffer containing the encoded data.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Decode(System.Byte[],Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU object from a buffer.
            </summary>
            <param name="buffer">The input buffer containing the encoded data.</param>
            <param name="pdu">The PDU object in which the decoded data is stored.</param>
            <returns>The number of bytes read from the buffer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Decode(System.Byte[],System.Int32,Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU object from a buffer.
            </summary>
            <param name="buffer">The input buffer containing the encoded data.</param>
            <param name="index">The buffer position at which to begin reading the encoded data.</param>
            <param name="pdu">The PDU object in which the decoded data is stored.</param>
            <returns>The number of bytes decoded from the buffer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Decode``1(Oss.Asn1.OctetStringWithContentsConstraint{``0})">
            <summary>
            Decodes a PDU from an OctetStringWithContentsConstraint object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="value">The OctetStringWithContentsConstraint object from which the PDU is decoded.</param>
            <returns>If value.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Decode``1(Oss.Asn1.BitStringWithContentsConstraint{``0})">
            <summary>
            Decodes a PDU from a BitStringWithContentsConstraint object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="value">The BitStringWithContentsConstraint object from which the PDU is decoded.</param>
            <returns>If value.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Decode(Oss.Asn1.OpenType,Oss.Asn1.Asn1Type)">
            <summary>
            Decodes a PDU from an OpenType object.
            </summary>
            <param name="ot">The OpenType object from which the PDU is decoded.</param>
            <param name="containedAsn1Type">The type of the contained PDU.</param>
            <returns>If ot.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.BinaryCodec.Decode``1(Oss.Asn1.OpenType)">
            <summary>
            Decodes a PDU from an OpenType object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="ot">The OpenType object from which the PDU is decoded.</param>
            <returns>If ot.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="T:Oss.Asn1.TextCodec">
            <summary>
            Base class for all codecs implementing text encoding rules (XER, E-XER, JSON)
            </summary>
        </member>
        <member name="M:Oss.Asn1.TextCodec.#ctor(Oss.Asn1.Internal.SchemaMetadata)">
            <summary>
            Constructs a TextCodec object.
            </summary>
            <param name="metadata">The schema metadata.</param>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Encode(Oss.Asn1.BasePdu,System.IO.TextWriter)">
            <summary>
            Encodes a PDU object, writing the encoded data using the provided TextWriter object.
            </summary>
            <param name="pdu">The PDU object to be encoded.</param>
            <param name="textWriter">The TextWriter object used to write encoded data.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Encode(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU object into a String object.
            </summary>
            <param name="pdu">The PDU object to be encoded.</param>
            <returns>The encoded data as a String object.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Decode(System.IO.TextReader,Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU object, reading the encoded data using the provided TextReader object.
            </summary>
            <param name="textReader">The TextReader object used to read the encoded data.</param>
            <param name="pdu">The PDU object in which the decoded data is stored.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Decode(System.String,Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU object from a String.
            </summary>
            <param name="encoded">The String containing the encoded data.</param>
            <param name="pdu">The PDU object in which the decoded data is stored.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Decode``1(Oss.Asn1.OctetStringWithContentsConstraint{``0})">
            <summary>
            Decodes a PDU from an OctetStringWithContentsConstraint object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="value">The OctetStringWithContentsConstraint object from which the PDU is decoded.</param>
            <returns>If value.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Decode``1(Oss.Asn1.BitStringWithContentsConstraint{``0})">
            <summary>
            Decodes a PDU from a BitStringWithContentsConstraint object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="value">The BitStringWithContentsConstraint object from which the PDU is decoded.</param>
            <returns>If value.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Decode(Oss.Asn1.OpenType,Oss.Asn1.Asn1Type)">
            <summary>
            Decodes a PDU from an OpenType object.
            </summary>
            <param name="ot">The OpenType object from which the PDU is decoded.</param>
            <param name="containedAsn1Type">The type of the contained PDU.</param>
            <returns>If ot.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.TextCodec.Decode``1(Oss.Asn1.OpenType)">
            <summary>
            Decodes a PDU from an OpenType object.
            </summary>
            <typeparam name="T">The type of the contained PDU.</typeparam>
            <param name="ot">The OpenType object from which the PDU is decoded.</param>
            <returns>If ot.Decoded is not null, then it is retuned directly, otherwise the input is decoded and the resulted PDU is returned.</returns>
        </member>
        <member name="T:Oss.Asn1.XmlCodec">
            <summary>
            Base class for all codecs implementing XML encoding rules (XER, E-XER)
            </summary>
        </member>
        <member name="M:Oss.Asn1.XmlCodec.#ctor(Oss.Asn1.Internal.SchemaMetadata)">
            <summary>
            Constructs a XmlCodec object.
            </summary>
            <param name="metadata">The schema metadata.</param>
        </member>
        <member name="M:Oss.Asn1.XmlCodec.Encode(Oss.Asn1.BasePdu,System.Xml.XmlWriter)">
            <summary>
            Encodes a PDU object, writing the encoded data using the provided XmlWriter object.
            </summary>
            <param name="pdu">The PDU object to be encoded.</param>
            <param name="xmlWriter">The XmlWriter object used to write encoded data.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        </member>
        <member name="M:Oss.Asn1.XmlCodec.Decode(System.Xml.XmlReader,Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU object, reading the encoded data using the provided XmlReader object.
            </summary>
            <param name="xmlReader">The XmlReader object used to read the encoded data.</param>
            <param name="pdu">The PDU object in which the decoded data is stored.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        </member>
        <member name="T:Oss.Asn1.CperDecoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the decoding operation for Cper codecs.
            </summary>
        </member>
        <member name="M:Oss.Asn1.CperDecoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            AutoDecode = true
            Conformance = ConformanceLevel.Strict
            Validate = false
            this.RecursionLimit = 16
            </summary>
        </member>
        <member name="M:Oss.Asn1.CperDecoderOptions.Set(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">Options to be set</param>
        </member>
        <member name="M:Oss.Asn1.CperDecoderOptions.Convert(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            Converts any BaseDecoderOptions object reference to a
            CperDecoderOptions object reference.
            </summary>
            <param name="other">A BaseDecoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of CperDecoderOptions class or 
            the reference to a new CperDecoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.CperEncoder">
            <summary>
            Internal base class for Cper encoders.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.CperEncoder.Options">
            <summary>
            gets or sets the options used for encoding
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.#ctor(System.Boolean,Oss.Asn1.CperEncoderOptions)">
            <summary>
            Initializes new instance of aligned or unaligned CANONICAL PER encoder. 
            </summary>
            <param name="aligned">True for aligned encoder.</param>
            <param name="options">options objects with flags used for encoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodePdu(Oss.Asn1.BasePdu,Oss.Asn1.BitString)">
            <summary>
            Encodes PDU into a bit string
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="bstr">Output bit string</param>
            <returns>Encoded length in bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes PDU into a stream
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="stream">Output stream</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Byte[],System.Int32)">
            <summary>
            Encodes PDU into a buffer
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="buffer">Output buffer</param>
            <param name="index">Buffer position</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes PDU into a new buffer
            </summary>
            <param name="pdu">Input PDU</param>
            <returns>New buffer containing the encoded data</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes an open type
            </summary>
            <param name="ot">Open type object</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodeType(Oss.Asn1.BaseType)">
            <summary>
            Encodes a BaseType object
            </summary>
            <param name="type">Data object</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodeBSCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING into the BitString object.
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.RaiseNotImplementedError">
            <summary>
            Throws the _not_implemented exception
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes Generalized Time as VisibleString
            according to the  clauses 11.7 of X.690 and 10.6.5 of X.691:2008.
            </summary>
            <param name="value">GeneralizedTime value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CperEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes UTC Time as VisibleString
            according to clauses 11.8 of X.690 and 10.6.5 of X.691:2008.
            </summary>
            <param name="value">UTCTime value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.BerArrayDecoder">
            <summary>
            Internal base class for BER decoders that operate on memory buffer.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayDecoder.Buffer">
            <summary>
            Buffer to decode from.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BerArrayDecoder._codingContained">
            <summary>
            Indicates that the decoder was invoked to decode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayDecoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated after the decoding
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.#ctor(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            initializes the decoder object
            </summary>
            <param name="options">contains the flags used for decoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodePdu(System.Byte[],System.Int32,Oss.Asn1.BasePdu)">
            <summary>
            Decode a PDU
            </summary>
            <param name="buffer">Input buffer</param>
            <param name="index">Buffer position</param>
            <param name="pdu">Output PDU</param>
            <returns>Bytes decoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeTagLength">
            <summary>
            Decodes tag and length parts of encoding according to X.690-200811 clause 8.1.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.ConsumeEoc">
            <summary>
            Verifies and skips End-Of-Content bytes.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeInt">
            <summary>
            Decodes INTEGER value represented by <c>int</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded integer number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeLong">
            <summary>
            Decodes INTEGER value represented by <c>long</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded long number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeULong">
            <summary>
            Decodes INTEGER value represented by <c>ulong</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded unsigned long number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeBigInt">
            <summary>
            Decodes INTEGER value represented by the <c>BigInteger</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Byte array representing the value of the BigInteger in the little-endian format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeConstructedBitString(System.Int32@)">
            <summary>
            Decodes BIT STRING from its constructed encoding.
            </summary>
            <param name="unusedBits">The number of unused bits in the decoded value (output parameter).</param>
            <returns>A MemoryStream object containing the decoded BIT STRING value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeBitString">
            <summary>
            Decodes BIT STRING according to X.690-200811, clause 8.6.
            </summary>
            <returns>Decoded BitString instance.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeBitStringWithNamedBits">
            <summary>
            Decodes BIT STRING with named bits according to X.690-200811 clause 8.6.
            </summary>
            <returns>Decoded BitStringWithNamedBits instance.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeBitStringWithNamedBits(System.Int32[])">
            <summary>
            Decodes size constrained BIT STRING with named bits according to X.690-200811
            clause 11.2.2 Note 1.
            </summary>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded BitStringWithNamedBits instance.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeDouble">
            <summary>
            Decodes REAL value encoded using binary form according to X.690-200811 clause 8.5.7.
            </summary>
            <returns>Decoded double value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeDecimal">
            <summary>
            Decodes REAL value encoded using decimal form according to X.690-200811 clause 8.5.8.
            </summary>
            <returns>Decoded decimal value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeBool">
            <summary>
            Decodes a BOOLEAN value according to X.690-200811 clause 8.2.
            </summary>
            <returns>Decoded boolean.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeOctetString">
            <summary>
            Decodes an OCTET STRING according to X.690-200811 clause 8.23.4.
            </summary>
            <returns>Decoded octet string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeUtf8String">
            <summary>
            Decodes an UTF8String according to X.690-200811 clause 8.23.10.
            </summary>
            <returns>Decoded UTF8 string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeString">
            <summary>
            Decodes a single-byte string according to X.690-200811 clause 8.23.
            </summary>
            <returns>Decoded single-byte string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeContentChars">
            <summary>
            Decodes content chars of time types.
            </summary>
            <returns>The content chars decoded</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeUTCTime">
            <summary>
            Decodes UTCTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded UTCTime object</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeGeneralizedTime">
            <summary>
            Decodes GeneralizedTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded GeneralizedTime object</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.Decode2ByteChar">
            <summary>
            Decodes BMPString according to X.690-200811 clause 8.23.8.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.Decode4ByteChar">
            <summary>
            Decodes UniversalString according to X.690-200811 clause 8.23.7.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.Decode4ByteUtf8String">
            <summary>
            Decodes UTF8String into an int array according to X.690-200811 clause 8.23.7.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeTime">
            <summary>
            Decodes a TIME value according to X.690-200811 clause 8.26.1.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeDate">
            <summary>
            Decodes a DATE value according to X.690-200811 clause 8.26.2.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeTimeOfDay">
            <summary>
            Decodes a TIME-OF-DAY value according to X.690-200811 clause 8.26.3.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeDateTime">
            <summary>
            Decodes a DATE-TIME value according to X.690-200811 clause 8.26.4.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeDuration">
            <summary>
            Decodes a DURATION value according to X.690-200811 clause 8.26.5.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeOIDContent">
            <summary>
            Decodes content octets of the OBJECT IDENTIFIER or RELATIVE-OID.
            </summary>
            <returns>Content octets decoded.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes ObjectIdentifier according to X.690-200811 clause 8.19.
            </summary>
            <returns>Decoded ObjectIdentifier object.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeRelativeOid">
            <summary>
            Decodes Relative-OID according to X.690-200811 clause 8.20.
            </summary>
            <returns>Decoded RelativeOid object.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.Skip(System.Int32)">
            <summary>
            Skips the specified number of bytes in the input.
            </summary>
            <param name="nbytes">The number of bytes to skip.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.SkipIndefiniteValueEncoding">
            <summary>
            Skips an indefinite value encoding.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.CopyEncoded">
            <summary>
            Copies a BER element into a new array.
            </summary>
            <returns>The newly allocated array with copied BER element.</returns>
            <inheritdoc/>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.CopyEncoded(System.UInt32)">
            <summary>
            Replaces tag of a BER element and copies it into a new array.
            </summary>
            <param name="replacementTag">The replacement tag encoded value.</param>
            <returns>The newly allocated array with copied BER element.</returns>
            <inheritdoc/>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.ReadOctet">
            <summary>
            Reads and advances buffer for one byte
            </summary>
            <returns>Byte read</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeBSCCPdu``1(Oss.Asn1.BitString)">
            <summary>
            Decodes the PDU contained in the BIT STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayDecoder.DecodeOSCCPdu``1(System.Byte[])">
            <summary>
            Decodes the PDU contained in the OCTET STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.BerArrayEncoder">
            <summary>
            Internal base class for BER encoders that operate on memory buffer.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.BerArrayEncoder.SavedBuffer">
            <summary>
            Auxiliary class used for organization of temporary storage for already encoded
            message parts.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.SavedBuffer.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initialize SavedBuffer object with given <c>buffer</c>, <c>start</c> and
            <c>finish</c> values.
            </summary>
            <param name="buffer">Buffer to be stored into <c>Buffer</c> property of
            SavedBuffer object.</param>
            <param name="begin">Value for <c>Begin</c> property.</param>
            <param name="end">Value for <c>End</c> property.</param>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.SavedBuffer.Next">
            <summary>
            SavedBuffer object with next part of encoded message. Null if this SavedBuffer
            object stores the last encoding part.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.SavedBuffer.Buffer">
            <summary>
            Buffer with stored part of the encoding.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.SavedBuffer.Begin">
            <summary>
            Index in the <c>Buffer</c> were encoded part begins.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.SavedBuffer.End">
            <summary>
            First index in the <c>Buffer</c> after last byte of
            encoded part.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BerArrayEncoder.BufferChunkSize">
            <summary>
            Base size of each new <c>Buffer</c> when encoding to
            automatically allocated memory used. Default value is 4096 bytes.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.Buffer">
            <summary>
            Current memory buffer used by encoding functions to store encoded message.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.Index">
            <summary>
            Current position in the <c>Buffer</c>.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.Begin">
            <summary>
            First position in the <c>Buffer</c> that can be used by encoder to store it's data.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.End">
            <summary>
            End position of the <c>Buffer</c>.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.Preallocated">
            <summary>
            True if encoding in preallocated buffer used.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.Head">
            <summary>
            Stored encoded parts of message. 
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.Options">
            <summary>
            contains the flags used for encoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BerArrayEncoder._utf8Encoding">
            <summary>
            Convenience object to convert strings to UTF8 representaion.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BerArrayEncoder._codingContained">
            <summary>
            Indicates that the encoder was invoked to encode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerArrayEncoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated before the encoding
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.#ctor(Oss.Asn1.BerEncoderOptions)">
            <summary>
            Constructor creates BerByteArrayEncoder object
            </summary>
            <param name="options">options object which contains flags used for encoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="stream">Output stream</param>
            <returns>Length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Byte[],System.Int32)">
            <summary>
            Encodes PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="buffer">Output buffer</param>
            <param name="index">Buffer position</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <returns>Output buffer</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeType(Oss.Asn1.BaseType,System.Boolean)">
            <summary>
            Encodes any BaseType representation that implements EncodeBer() method 
            </summary>
            <param name="pdu">BaseType object</param>
            <param name="encodeContentOnly">Whether or not the encoding include tag/length or just raw data</param>
            <returns>Length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes an OpenType object
            </summary>
            <param name="ot">Input data</param>
            <returns>Length in bytes</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.CopyDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Copies an encoded deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="dc">The deferred component value to be encoded.</param>
            <returns>Length in bytes</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.CopyDeferredComponent``1(Oss.Asn1.DeferredComponent{``0},System.UInt32)">
            <summary>
            Copies an encoded deferred component and replaces its tag.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="dc">The deferred component value to be encoded.</param>
            <param name="replacementTag">The replacement tag encoded value.</param>
            <returns>Length in bytes</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.AllocBuffer">
            <summary>
            Allocates memory for the encoding buffer
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.ChangeBuffer">
            <summary>
            Switches the encoder to new memory buffer.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1OutputFullException">Thrown when ChangeBuffer() is called for pre-allocated buffer</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.ChangeBuffer(System.Int32)">
            <summary>
            Switches the encoder to new memory buffer, providing additional memory.
            </summary>
            <param name="length">The size of additional memory in bytes.</param>
            <exception cref="T:Oss.Asn1.Asn1OutputFullException">Thrown when ChangeBuffer() is called for pre-allocated buffer</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.InsertBuffer(System.Byte[],System.Int32)">
            <summary>
            Inserts a byte array in the encoding (e,g, for OCTET STRINGs).
            </summary>
            <param name="value">The array to be inserted.</param>
            <param name="offset">The zero-based byte offset into value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.Consolidate(System.Int32)">
            <summary>
            Consolidate all memory chunks into one.
            </summary>
            <param name="length">The size of new memory buffer in bytes.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeLengthTag(System.Int32,System.UInt32)">
            <summary>
            Encodes tag and length parts according to X.690-200811 clause 8.1.
            </summary>
            <param name="length">Encoding length.</param>
            <param name="tag">Encoded tag value.</param>
            <returns>Length of the whole encoding in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeLengthTag2(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Encodes 2 tags and length of the encoding according to X.690-200811 clause 8.1.
            </summary>
            <param name="length">Encoding length.</param>
            <param name="inner">Inner encoded tag value.</param>
            <param name="outer">Outer encoded tag value.</param>
            <returns>Length of the whole encoding in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeBool(System.Boolean)">
            <summary>
            Encodes BOOLEAN value according to X.690-200811 clause 8.2.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeInt(System.Int32)">
            <summary>
            Encodes INTEGER value represented by <c>int</c> type according to X.690-200811 clause 8.3.
            </summary>
            <param name="value">Number to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeLong(System.Int64)">
            <summary>
            Encodes INTEGER value represented by <c>long</c> type according to X.690-200811 clause 8.3.
            </summary>
            <param name="value">Number to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeULong(System.UInt64)">
            <summary>
            Encodes INTEGER value represented by <c>ulong</c> type according to X.690-200811 clause 8.3.
            </summary>
            <param name="value">Number to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeBigInt(System.Byte[])">
            <summary>
            Encodes INTEGER value represented by <c>BigInteger</c> type according to X.690-200811 clause 8.3.
            </summary>
            <param name="value">Octets representing the value of the BigInteger in the little-endian format.</param>
            <returns>Encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeDouble(System.Double)">
            <summary>
            Encodes binary REAL value according to X.690-200811 clause 8.5.
            </summary>
            <param name="value">Number to encode.</param>
            <returns>Encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeDecimal(System.Decimal)">
            <summary>
            Encodes decimal REAL value in NR3 form according to X.690-200811 clause 8.5.8.
            </summary>
            <param name="value">Number to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeBitString(Oss.Asn1.BitString)">
            <summary>
            Encodes BIT STRING value according to X.690-200811 clause 8.6.
            </summary>
            <param name="value">BitString to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeString(System.String)">
            <summary>
            Encodes string as IA5String according to X.690-200811 clause 8.23.
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeUtf8String(System.String)">
            <summary>
            Encodes UTF8String according to X.690-200811 clause 8.23.10
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeOctetString(System.Byte[])">
            <summary>
            Encodes OCTET STRING according to X.690-200811 clause 8.7.
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeOctetString(System.Byte[],System.Int32)">
            <summary>
            Encodes OCTET STRING starting from an offset.
            </summary>
            <param name="value">String to encode.</param>
            <param name="offset">The zero-based byte offset into value.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.Encode2ByteChar(System.String)">
            <summary>
            Encodes BMPString according to X.690-200811 clause 8.23.8.
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.Encode4ByteChar(System.Int32[])">
            <summary>
            Encodes UniversalString according to X.690-200811 clause 8.23.7.
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.Encode4ByteUtf8String(System.Int32[])">
            <summary>
            Encodes UTF8String from an int array according to X.690-200811 clause 8.23.7.
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes UTCTime according to X.690-200811 clause 8.25.
            </summary>
            <param name="value">UTCTime to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes GeneralizedTime according to X.690-200811 clause 8.25.
            </summary>
            <param name="value">GeneralizedTime to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Encodes object identifier according to X.690-200811 clause 8.19.
            </summary>
            <param name="value">Identifier to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Encodes relative object identifier according to X.690-200811 clause 8.20.
            </summary>
            <param name="value">Identifier to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeTime(System.String)">
            <summary>
            Encodes TIME value according to X.690-200811 clause 8.26.1.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeDate(System.String)">
            <summary>
            Encodes DATE value according to X.690-200811 clause 8.26.2.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeTimeOfDay(System.String)">
            <summary>
            Encodes TIME-OF-DAY value according to X.690-200811 clause 8.26.3.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeDateTime(System.String)">
            <summary>
            Encodes DATE-TIME value according to X.690-200811 clause 8.26.4.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeDuration(System.String)">
            <summary>
            Encodes DURATION value according to X.690-200811 clause 8.26.5.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerArrayEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.BerStreamDecoder">
            <summary>
            Internal base class for BER decoders that operate on streams.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerStreamDecoder.Stream">
            <summary>
            Stream to decode from.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.#ctor(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            initializes the decoder object
            </summary>
            <param name="options">contains the flags used for decoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodePdu(System.IO.Stream,Oss.Asn1.BasePdu)">
            <summary>
            Decode a PDU
            </summary>
            <param name="stream">Input stream</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.GetOctet">
            <summary>
            Auxiliary function that retrieves the next octet from the input stream.
            Throws Exception if end of stream reached. 
            </summary>
            <returns>Octet value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.GetOctets(System.Int32)">
            <summary>
            Retrieves the <c>count</c> octets from input stream.
            </summary>
            <param name="count">Number of octets to retrieve.</param>
            <returns>Octets retrieved.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeTagLength">
            <summary>
            Decodes tag and length parts of encoding according to X.690-200811 clause 8.1.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.ConsumeEoc">
            <summary>
            Verifies and skips End-Of-Content bytes.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeInt">
            <summary>
            Decodes INTEGER value represented by <c>int</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded integer number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeLong">
            <summary>
            Decodes INTEGER value represented by <c>long</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded long number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeULong">
            <summary>
            Decodes INTEGER value represented by <c>ulong</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded unsigned long number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeBigInt">
            <summary>
            Decodes INTEGER value represented by the <c>BigInteger</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Byte array representing the value of the BigInteger in the little-endian format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeConstructedBitString(System.Int32@)">
            <summary>
            Decodes BIT STRING from its constructed encoding.
            </summary>
            <param name="unusedBits">The number of unused bits in the decoded value (output parameter).</param>
            <returns>A MemoryStream object containing the decoded BIT STRING value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeBitString">
            <summary>
            Decodes BIT STRING according to X.690-200811 clause 8.6.
            </summary>
            <returns>Decoded BitString instance.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeBitStringWithNamedBits">
            <summary>
            Decodes BIT STRING with named bits according to X.690-200811 clause 8.6.
            </summary>
            <returns>Decoded BitStringWithNamedBits instance.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeBitStringWithNamedBits(System.Int32[])">
            <summary>
            Decodes size constrained BIT STRING with named bits according to X.690-200811
            clause 11.2.2 Note 1.
            </summary>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded BitStringWithNamedBits instance.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeDouble">
            <summary>
            Decodes REAL value encoded using binary form according to X.690-200811 clause 8.5.7.
            </summary>
            <returns>Decoded double value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeDecimal">
            <summary>
            Decodes REAL value encoded using decimal form according to X.690-200811 clause 8.5.8.
            </summary>
            <returns>Decoded decimal value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeBool">
            <summary>
            Decodes a BOOLEAN value according to X.690-200811 clause 8.2.
            </summary>
            <returns>Decoded boolean.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeOctetString">
            <summary>
            Decodes an OCTET STRING according to X.690-200811 clause 8.23.4.
            </summary>
            <returns>Decoded octet string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeUtf8String">
            <summary>
            Decodes an UTF8String according to X.690-200811 clause 8.23.10.
            </summary>
            <returns>Decoded UTF8 string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeString">
            <summary>
            Decodes a single-byte string according to X.690-200811 8.23.
            </summary>
            <returns>Decoded single-byte string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeContentChars">
            <summary>
            Decodes content chars of time types.
            </summary>
            <returns>The content chars decoded</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeUTCTime">
            <summary>
            Decodes UTCTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded UTCTime object</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeGeneralizedTime">
            <summary>
            Decodes GeneralizedTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded GeneralizedTime object</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.Decode2ByteChar">
            <summary>
            Decodes BMPString according to X.690-200811 clause 8.23.8.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.Decode4ByteChar">
            <summary>
            Decodes UniversalString according to X.690-200811 clause 8.23.7.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.Decode4ByteUtf8String">
            <summary>
            Decodes UTF8String into an int array according to X.690-200811 clause 8.23.7.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeTime">
            <summary>
            Decodes a TIME value according to X.690-200811 clause 8.26.1.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeDate">
            <summary>
            Decodes a DATE value according to X.690-200811 clause 8.26.2.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeTimeOfDay">
            <summary>
            Decodes a TIME-OF-DAY value according to X.690-200811 clause 8.26.3.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeDateTime">
            <summary>
            Decodes a DATE-TIME value according to X.690-200811 clause 8.26.4.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeDuration">
            <summary>
            Decodes a DURATION value according to X.690-200811 clause 8.26.5.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeOIDContent">
            <summary>
            Decodes content octets of the OBJECT IDENTIFIER or RELATIVE-OID.
            </summary>
            <returns>Content octets decoded.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes ObjectIdentifier according to X.690-200811 clause 8.19.
            </summary>
            <returns>Decoded ObjectIdentifier object.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.DecodeRelativeOid">
            <summary>
            Decodes Relative-OID according to X.690-200811 class 8.20.
            </summary>
            <returns>Decoded RelativeOid object.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.Skip(System.Int32)">
            <summary>
            Skips the specified number of bytes in the input.
            </summary>
            <param name="nbytes">The number of bytes to skip.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.CopyEncoded">
            <summary>
            Copies a BER element into a new array.
            </summary>
            <returns>The newly allocated array with copied BER element.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.CopyEncoded(System.UInt32)">
            <summary>
            Replaces tag of a BER element and copies it into a new array.
            </summary>
            <param name="replacementTag">The replacement tag encoded value.</param>
            <returns>The newly allocated array with copied BER element.</returns>
            <inheritdoc/>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerStreamDecoder.ReadOctet">
            <summary>
            Reads and advances stream for one byte
            </summary>
            <returns>Byte read</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.BerDecoder">
            <summary>
            BER format decoder
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerDecoder.Index">
            <summary>
            Current position in the Buffer.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerDecoder.Finish">
            <summary>
            First position after end of currently decoding element.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerDecoder.Tag">
            <summary>
            Tag of current element. 
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerDecoder.Length">
            <summary>
            Length of currently decoding element. If current element encoded using indefinite length form, then Length = -1.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerDecoder.FirstTagByte">
            <summary>
            First byte of current <c>Tag</c> value. Used for checks if encoding is primitive or constructed.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerDecoder.Options">
            <summary>
            contains the flags used for decoding
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.#ctor(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            initializes the decoder object
            </summary>
            <param name="options">contains the flags used for decoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeType(Oss.Asn1.BaseType,System.Boolean)">
            <summary>
            Decodes specified type 
            </summary>
            <param name="type">output data object</param>
            <param name="decodeContentOnly">Whether or not the encoding include tag/length or just raw data</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeOpenType(Oss.Asn1.BasePdu)">
            <summary>
            Decode into open type
            </summary>
            <param name="pdu">data to decode</param>
            <returns>Open type object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeTagLength">
            <summary>
            Decodes tag and length parts of encoding according to X.690-200811 clause 8.1.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.ConsumeEoc">
            <summary>
            Verifies and skips End-Of-Content bytes.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeInt">
            <summary>
            Decodes INTEGER value represented by <c>int</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded integer number.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeLong">
            <summary>
            Decodes INTEGER value represented by <c>long</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded long number.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeULong">
            <summary>
            Decodes INTEGER value represented by <c>ulong</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Decoded unsigned long number.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeBigInt">
            <summary>
            Decodes INTEGER value represented by the <c>BigInteger</c> type according to X.690-200811 clause 8.3.
            </summary>
            <returns>Byte array representing the value of the BigInteger in the little-endian format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeBitString">
            <summary>
            Decodes BIT STRING according to X.690-200811 clause 8.6.
            </summary>
            <returns>Decoded BitString instance.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeBitStringWithNamedBits">
            <summary>
            Decodes BIT STRING with named bits according to X.690-200811 clause 8.6.
            </summary>
            <returns>Decoded BitStringWithNamedBits instance.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeBitStringWithNamedBits(System.Int32[])">
            <summary>
            Decodes size constrained BIT STRING with named bits according to X.690-200811
            clause 11.2.2 Note 1.
            </summary>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded BitStringWithNamedBits instance.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeDouble">
            <summary>
            Decodes REAL value encoded using binary form according to X.690-200811 clause 8.5.7.
            </summary>
            <returns>Decoded double value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.normalizeNRx(System.Char[])">
            <summary>
            Scans NRx decimal REAL and replaces comma by full stop.
            </summary>
            <param name="nrx">The NR1, NR2 or NR3 REAL</param>
            <returns>The position where comma occurred or -1 if there is no match</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeDouble(System.Int32,Oss.Asn1.Internal.BinaryParser.ByteIterator)">
            <summary>
            Decodes REAL value encoded using binary form according to X.690-200811 clause 8.5.7.
            </summary>
            <param name="firstOctet">The first octet of the encoding</param>
            <param name="nextByte">The function to retrieve bytes of the encoding</param>
            <returns>Decoded double value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeDecimal">
            <summary>
            Decodes REAL value encoded using decimal form according to X.690-200811 clause 8.5.8.
            </summary>
            <returns>Decoded decimal value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeDecimal(System.Int32,Oss.Asn1.Internal.BinaryParser.ByteIterator)">
            <summary>
            Decodes REAL value encoded using binary form according to X.690-200811 clause 8.5.7.
            </summary>
            <param name="firstOctet">The first octet of the encoding</param>
            <param name="nextByte">The function to retrieve bytes of the encoding</param>
            <returns>Decoded double value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeBool">
            <summary>
            Decodes a BOOLEAN value according to X.690-200811 clause 8.2.
            </summary>
            <returns>Decoded boolean.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeOctetString">
            <summary>
            Decodes an OCTET STRING according to X.690-200811 clause 8.23.4.
            </summary>
            <returns>Decoded octet string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeUtf8String">
            <summary>
            Decodes an UTF8String according to X.690-200811 clause 8.23.10.
            </summary>
            <returns>Decoded UTF8 string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeString">
            <summary>
            Decodes a single-byte string according to X.690-200811 clause 8.23.
            </summary>
            <returns>Decoded single-byte string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeUTCTime">
            <summary>
            Decodes UTCTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded UTCTime object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeGeneralizedTime">
            <summary>
            Decodes GeneralizedTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded GeneralizedTime object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.Decode2ByteChar">
            <summary>
            Decodes BMPString according to X.690-200811 clause 8.23.8.
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.Decode4ByteChar">
            <summary>
            Decodes UniversalString according to X.690-200811 clause 8.23.7.
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.Decode4ByteUtf8String">
            <summary>
            Decodes UTF8String into an int array according to X.690-200811 clause 8.23.7.
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeTime">
            <summary>
            Decodes a TIME value according to X.690-200811 clause 8.26.1.
            </summary>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeDate">
            <summary>
            Decodes a DATE value according to X.690-200811 clause 8.26.2.
            </summary>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeTimeOfDay">
            <summary>
            Decodes a TIME-OF-DAY value according to X.690-200811 clause 8.26.3.
            </summary>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeDateTime">
            <summary>
            Decodes a DATE-TIME value according to X.690-200811 clause 8.26.4.
            </summary>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeDuration">
            <summary>
            Decodes a DURATION value according to X.690-200811 clause 8.26.5.
            </summary>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.ParseTime(System.Char[])">
            <summary>
            Converts TIME value from BER format to ISO 8601.
            </summary>
            <param name="value">BER content octets.</param>
            <returns>The value in ISO 8601 format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.ParseDate(System.Char[])">
            <summary>
            Converts DATE value from BER format to ISO 8601. The method inserts the '-'
            separator between Y, M and D.
            </summary>
            <param name="value">BER content octets.</param>
            <returns>The value in ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.ParseTimeOfDay(System.Char[])">
            <summary>
            Converts TIME-OF-DATE value from BER format to ISO 8601. The method inserts the ':'
            separator between H, M and S.
            </summary>
            <param name="value">BER content octets.</param>
            <returns>The value in ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.ParseDateTime(System.Char[])">
            <summary>
            Converts DATE-TIME value from BER format to ISO 8601. The method inserts the '-'
            separator between Y, M and D, the 'T' separator between date and time and the ':'
            separator between H, M and S.
            </summary>
            <param name="value">BER content octets.</param>
            <returns>The value in ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.ParseDuration(System.Char[])">
            <summary>
            Converts DURATION value from BER format to ISO 8601. The method inserts the 'P'
            prefix as the first character.
            </summary>
            <param name="value">BER content octets.</param>
            <returns>The value in ISO 8601 format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes ObjectIdentifier according to X.690-200811 clause 8.19.
            </summary>
            <returns>Decoded ObjectIdentifier object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeRelativeOid">
            <summary>
            Decodes Relative-OID according to X.690-200811 clause 8.20.
            </summary>
            <returns>Decoded RelativeOid object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.Skip(System.Int32)">
            <summary>
            Skips the specified number of bytes in the input.
            </summary>
            <param name="nbytes">The number of bytes to skip.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.SkipElement(System.Boolean)">
            <summary>
            Skips a BER element (unknown extension).
            </summary>
            <param name="definite">True if the enclosing element has definite length.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.SkipExtensions(System.Boolean)">
            <summary>
            Skips unknown extensions.
            </summary>
            <param name="definite">True if the enclosing element has definite length.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.SkipAndDetectEOC(System.Boolean)">
            <summary>
            Advances to the TL of the next element unless the end of content of the enclosing element is reached.
            </summary>
            <param name="definite">>True if the enclosing element has definite length.</param>
            <returns>True if the skipped element is the last element nested in the enclosing element.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.CopyEncoded">
            <summary>
            Copies a BER element into a new array.
            </summary>
            <returns>The newly allocated array with copied BER element.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.CopyEncoded(System.UInt32)">
            <summary>
            Replaces tag of a BER element and copies it into a new array.
            </summary>
            <param name="replacementTag">The replacement tag encoded value.</param>
            <returns>The newly allocated array with copied BER element.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.ReadOctet">
            <summary>
            reads an byte from the input
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeOSCC``1">
            <summary>
            Decode an octet string with content constraints 
            </summary>
            <typeparam name="T">PDU type </typeparam>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.DecodeBSCC``1">
            <summary>
            Decode a bit string with content constraints 
            </summary>
            <typeparam name="T">PDU type </typeparam>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.BerDecoder._recursionDepth">
            <summary>
            Tracks the depth of recursive calls.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.BerDecoder.Depth">
            <summary>
            This property is for the internal use only and should not be utilized by the
            application code. It reflects the current depth of recursion when decoding
            values of types with circular definitions. The property is also used to pass
            the current depth of recursion to the child coder when circular definition
            includes OCTET STRING or BIT STRING with the content constraint.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.EnterRecursive">
            <summary>
            Informs the decoder that it enters the next level of
            recursion when decoding the value of type with the circular
            definition.
            <exception cref="T:System.InvalidOperationException">
            If the recursion depth exceeds the limit, specified by the
            RecursionLimit option.
            </exception>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BerDecoder.LeaveRecursive">
            <summary>
            Informs the decoder that the innermost recursive invocation
            is completed.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.DerArrayEncoder">
            <summary>
            Internal base class for DER encoders that operate on memory buffer.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding">
            <summary>
            Auxiliary class used for organization of temporary storage for already encoded
            message parts.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding">
            <summary>
            Stores encoding of one SET OF element.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding.Length">
            <summary>
            Length of the encoding of a SET OF element.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding.Offset">
            <summary>
            Offset of the beginning of the encoding of a SET OF element
            in the encoding buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding.Buffer">
            <summary>
            The encoding buffer where the encoding of a SET OF element
            is stored. Encodings for several elements can be stored
            in the same buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding.Set(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes this ElementEncoding object.
            </summary>
            <param name="length">Length of the encoding of a SET OF element.</param>
            <param name="offset">Offset of the beginning of the encoding of a SET OF element
            in the encoding buffer.</param>
            <param name="buffer">The encoding buffer where the encoding of a SET OF element
            is stored.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding.Compare(Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding@)">
            <summary>
            Compares this ElementEncoding with another ElementEncoding according
            to the octet strings order specified in X.690-200811 11.6.
            </summary>
            <param name="other">A reference to an ElementEncoding object.</param>
            <returns>-1 if the first byte that does not match has a lower value in this than in other;
            0 if the contents of both ElementEncoding are equal;
            1 if the first byte that does not match has a greater value in this than in other.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.OrderIndices">
            <summary>
            The array of ElementEncodings indices to allow
            access to encodings of SET OF elements in their DER order.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncodings">
            <summary>
            The array of ElementEncodings to store
            encodings of SET OF elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.Count">
            <summary>
            The current number of stored encodings of SET OF elements.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.#ctor(System.Int32)">
            <summary>
            Constructor that creates a SetOfEncoding object for the given
            number of SET OF elments.
            </summary>
            <param name="capacity">The number of SET OF element which will be stored
            in the constructed SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.LessX(System.Int32,System.Int32)">
            <summary>
            Compares OrderIndices[a]-th and x-th elements of ElementEncodings.
            </summary>
            <param name="a">An index in OrderIndices.</param>
            <param name="x">An index in ElementEncodings.</param>
            <returns>true if ElementEncodings[OrderIndices[a]] is less than ElementEncodings[x],
            false otherwise.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.RebuildEncodingsOrder">
            <summary>
            Rebuilds the order of encodings of SET OF elements after addition of a new element encoding.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.DerArrayEncoder.Options">
            <summary>
            DER-specific encoder options
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.#ctor(Oss.Asn1.DerEncoderOptions)">
            <summary>
            Constructor creates DerByteArrayEncoder object
            </summary>
            <param name="options">options object which contains flags used for encoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="stream">Output stream</param>
            <returns>Length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Byte[],System.Int32)">
            <summary>
            Encodes PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="buffer">Output buffer</param>
            <param name="index">Buffer position</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <returns>Output buffer</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeType(Oss.Asn1.BaseType,System.Boolean)">
            <summary>
            Encodes any BaseType representation that implements EncodeDer() method 
            </summary>
            <param name="pdu">BaseType object</param>
            <param name="encodeContentOnly">Whether or not the encoding include tag/length or just raw data</param>
            <returns>Length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes an OpenType object
            </summary>
            <param name="ot">Input data</param>
            <returns>Length in bytes</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeOctetString(Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding.ElementEncoding@)">
            <summary>
            Encodes an ElementEncoding object as OCTET STRING
            (puts the encoding from ElementEncoding to the resulting encoding).
            </summary>
            <param name="ee">A reference to an ElementEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.AddElementEncoding(Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding,System.Int32)">
            <summary>
            Cuts the encoding of a SET OF element from the current encoding and
            adds it to the given SetOfEncoding object.
            </summary>
            <param name="sofe">A reference of a SetOfEncoding object.</param>
            <param name="length">The length of the encoding of the SET OF element.</param>
            <returns>The value of the 'length' parameter.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.CopyEncoding(Oss.Asn1.Internal.DerArrayEncoder,Oss.Asn1.Internal.DerArrayEncoder.SetOfEncoding)">
            <summary>
            Copies the encoding of all SET OF elements from a source
            SetOfEncoding object to the target encoding in the
            given DerArrayEncoder.
            </summary>
            <param name="dst">The destination DerArrayEncoder object.</param>
            <param name="sofe">The source SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeBitStringWithNamedBits(Oss.Asn1.BitStringWithNamedBits)">
            <summary>
            Encodes BitStringWithNamedBits according to X.690-200811 clause 8.6 and 11.2.
            </summary>
            <param name="value">BitStringWithNamedBits to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes GeneralizedTime according to X.690-200811 clause 8.25 and 11.7.
            </summary>
            <param name="value">GeneralizedTime to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes UTCTime according to X.690-200811 clause 8.25 and 11.8.
            </summary>
            <param name="value">UTCTime to encode.</param>
            <returns>The encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeISO8601String(System.String)">
            <summary>
            Encodes ISO 8601 string, representing a value of the TIME type.
            </summary>
            <param name="value">The value in the ISO 8601 format.</param>
            <returns>The encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.DerArrayEncoder.EncodeDuration(System.String)">
            <summary>
            Encodes DURATION value according to X.690-200811 clause 8.26.5 and 11.9.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>The encoding length in octets.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonReader.Token">
            <summary>
            Possible JSON tokens.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.BeginCapture">
            <summary>
            Initiates input capturing mode. In capturing mode every byte read from the input
            is saved in the internal buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.EndCapture">
            <summary>
            Terminates input capturing mode and returns bytes, accumulated in the internal buffer.
            </summary>
            <returns>Captured bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.Close">
            <summary>
            Releases resources associated with this JsonReader.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.BeginRecording(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates recording of input tokens. Recorder tokens can be replayed
            using the BeginReplay().
            </summary>
            <param name="caller">The JsonDecoder object that has initiated the recording.</param>
            <returns>The instance of JsonReader capable of recording.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.BeginReplay(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates replaying of token that were previously recorded.
            </summary>
            <param name="caller">The JsonDecoder object that has requested the replay.</param>
            <returns>>The instance of JsonReader capable of replaying.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.AbortRecording">
            <summary>
            Aborts recording and discards all recorder tokens.
            </summary>
            <returns>The original JsonReader where the recorder was attached.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.Pushback(Oss.Asn1.Internal.JsonReader.Token)">
            <summary>
            Pushes back the token. Next call to NextToken() will return
            the token passed as the parameter rather than the token read
            from the input.
            </summary>
            <param name="t">The token to unread</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.NextToken(System.Boolean)">
            <summary>
            Reads next JSON token from the input.
            </summary>
            <param name="eof">when 'true' the method throws a _more_data exception
            if the EOF is detected</param>
            <returns>The kind of JSON token detected.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.SkipJsonString">
            <summary>
            Skips JSON string in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.SkipJsonNumber">
            <summary>
            Skips JSON number in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.ReadJsonString">
            <summary>
            Reads JSON String from input processing possible escapes. The Json string is terminated by the
            unescaped '"' character.
            </summary>
            <returns>The value of JSON string read.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.ReadJsonNumber">
            <summary>
            Extracts JSON number from the input. It is expected that the method is
            called immediately after the NextToken() returned the Token.NUMBER.
            </summary>
            <returns>The string containing JSON number</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.ReadHstring">
            <summary>
            Reads JSON string containing hexadecimal digits and converts it to the
            byte[]. The string is required to contain even number of characters. Otherwise
            an AsnInvalidENcodingException is thrown.
            </summary>
            <returns>The byte[] representing the result of conversion</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.ReadBASE64string">
            <summary>
            Reads JSON string containing BASE64 digits and converts it to the
            byte[]. 
            </summary>
            <returns>The byte[] representing the result of conversion</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReader.HexDigit(System.Char)">
            <summary>
            Returns hex digit represented by the character or -1 if character
            is not a valid hex digit.
            </summary>
            <param name="ch">The character to convert to hex digit.</param>
            <returns>The value of hex digit or -1 if the character is not a valid hex digit.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonReaderBase">
            <summary>
            Reads JSON tokens from a stream or TextReader.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonReaderBase._text_capacity">
            <summary>
            The capacity of the internal buffer where JSON strings and numbers
            are accumulated.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonReaderBase._text">
            <summary>
            The internal buffer where JSON strings and numbers
            are accumulated
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonReaderBase._hasUnreadChar">
            <summary>
            Indicates that the token has been unread.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonReaderBase._unreadChar">
            <summary>
            Specifies the value of unread token
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonReaderBase._lastChar">
            <summary>
            Stores the value of last token retrieved
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonReaderBase._pushedBack">
            <summary>
            The value of token saved by Pushback() method.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.ReadChar">
            <summary>
            Reads next character from input.
            </summary>
            <returns>Next character from input or -1 if no more data is available.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.Open">
            <summary>
            Resets the internal state of the reader and makes it ready to process input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.BeginRecording(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates recording of input tokens. Recorder tokens can be replayed
            using the BeginReplay().
            </summary>
            <param name="caller">The JsonDecoder object that has initiated the recording.</param>
            <returns>The instance of JsonReader capable of recording.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.BeginReplay(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates replaying of token that were previously recorded.
            </summary>
            <param name="caller">The JsonDecoder object that has requested the replay.</param>
            <returns>>The instance of JsonReader capable of replaying.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.AbortRecording">
            <summary>
            Aborts recording and discards all recorder tokens.
            </summary>
            <returns>The original JsonReader where the recorder was attached.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.Pushback(Oss.Asn1.Internal.JsonReader.Token)">
            <summary>
            Pushes back the token. Next call to NextToken() will return
            the token passed as the parameter rather than the token read
            from the input.
            </summary>
            <param name="t">The token to unread</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.NextToken(System.Boolean)">
            <summary>
            Reads next JSON token from the input.
            </summary>
            <param name="eof">when 'true' the method throws a _more_data exception
            if the EOF is detected</param>
            <returns>The kind of JSON token detected.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.ReadUCode">
            <summary>
            Reads hex character code of \Uxxxx escape.
            </summary>
            <returns>The code of the character represented by this escape sequence.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.HandleEscape">
            <summary>
            Reads escape sequence from the input and converts it to char.
            </summary>
            <returns>The character, represented by the escape sequence</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.SkipJsonString">
            <summary>
            Skips JSON string in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.SkipJsonNumber">
            <summary>
            Skips JSON number in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.ReadJsonString">
            <summary>
            Reads JSON String from input processing possible escapes. The Json string is terminated by the
            unescaped '"' character.
            </summary>
            <returns>The value of JSON string read.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonReaderBase.ReadJsonNumber">
            <summary>
            Extracts JSON number from the input. It is expected that the method is
            called immediately after the NextToken() returned the Token.NUMBER.
            </summary>
            <returns>The string containing JSON number</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonTextReader">
            <summary>
            Reads JSON tokens from a TextWriter
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTextReader._textReader">
            <summary>
            The TextReader object contaning JSON tokens.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTextReader._captureBuf">
            <summary>
            Working buffer where characters are saved in the input capturing mode
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTextReader._pos">
            <summary>
            Current position in the capture buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTextReader._capacity">
            <summary>
            The capacity of the capture buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTextReader._captureStorage">
            <summary>
            Storage to save data that does not fit the capture buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTextReader._capturing">
            <summary>
            Indicates that input capturing is in effect.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTextReader.ReadChar">
            <summary>
            Reads next character from input.
            </summary>
            <returns>Next character from input or -1 if no more data is available.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTextReader.Open(System.IO.TextReader)">
            <summary>
            Resets the internal state of the reader and makes it ready to process input.
            </summary>
            <param name="reader">The input TextReader</param>
            <returns>Initialized JsonReader that is ready to process the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTextReader.Close">
            <summary>
            Releases resources, associated with this JsonTextReader. The underlying 
            TextReader is not closed.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTextReader.BeginCapture">
            <summary>
            Initiates input capturing mode. In capturing mode every byte read from the input
            is saved in the internal buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTextReader.EndCapture">
            <summary>
            Terminates input capturing mode and returns bytes, accumulated in the internal buffer.
            </summary>
            <returns>Captured bytes</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonStreamReader">
            <summary>
            Reads JSON tokens from a stream
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._stream">
            <summary>
            The stream object containining JSON tokens in UTF-8 encoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._surrogate">
            <summary>
            Identifies whether the surrogate pair is being read.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._char">
            <summary>
            Internal buffer to store the surrogate pair.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._captureBuf">
            <summary>
            Working buffer where characters are saved in the input capturing mode
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._pos">
            <summary>
            Current position in the capture buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._capacity">
            <summary>
            The capacity of the capture buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._captureStorage">
            <summary>
            Storage to save data that does not fit the capture buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonStreamReader._capturing">
            <summary>
            Indicates that input capturing is in effect.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonStreamReader.Open(System.IO.Stream)">
            <summary>
            Resets the internal state of the reader and makes it ready to process input.
            </summary>
            <param name="stream">The input stream</param>
            <returns>Initialized JsonReader that is ready to process the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonStreamReader.Close">
            <summary>
            Releases resources, associated with this JsonSTreamReader. The underlying 
            Stream is not closed.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonStreamReader.ReadByte">
            <summary>
            Reads next byte from the _stream and saves it in the internal buffer
            if input capturing is in effect.
            </summary>
            <returns>The byte read or -1 on EOF</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonStreamReader.BeginCapture">
            <summary>
            Initiates input capturing mode. In capturing mode every byte read from the input
            is saved in the internal buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonStreamReader.EndCapture">
            <summary>
            Terminates input capturing mode and returns bytes, accumulated in the internal buffer.
            </summary>
            <returns>Captured bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonStreamReader.ReadChar">
            <summary>
            Reads next character from input.
            </summary>
            <returns>Next character from input or -1 if no more data is available.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonValue">
            <summary>
            Enumerates possible kinds of JSON value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonValue.NULL">
            <summary>
            'null' token
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonValue.TRUE_OR_FALSE">
            <summary>
            'true' or 'false' tokens
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonValue.NUMBER">
            <summary>
            JSON number as specified by the ECMA-404 (8)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonValue.STRING">
            <summary>
            JSON string as specified by the ECMA-404 (9)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonValue.OBJECT">
            <summary>
            JSON object as specified by the ECMA-404 (6)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonValue.ARRAY">
            <summary>
            JSON array as specified by the ECMA-404 (7)
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.BitTool">
            <summary>
            Implements useful operations with bits.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BitTool.NumOfTrailingZeroes(System.Int64)">
            <summary>
            Computes the number of trailing zero bits in the 64-bit number.
            </summary>
            <param name="bits">The 64-bit number.</param>
            <returns>The number of trailing zero bits in 'bits'.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BitTool.NumOfTrailingZeroes(System.Int32)">
            <summary>
            Computes the number of trailing zero bits in the 32-bit number.
            </summary>
            <param name="bits">The 32-bit number.</param>
            <returns>The number of trailing zero bits in 'bits'.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.BitSet">
            <summary>
            Represents immutable set of ordinal numbers in the range 0..N.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BitSet._mask_width">
            <summary>
            Bit shift to compute word position
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BitSet._mask">
            <summary>
            Mask to to compute bit position within word
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BitSet._empty">
            <summary>
            Reusable empty bitset.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BitSet._bits">
            <summary>
            The presense of the particular number is specified by the n MOD 64 bit of
            the n / 64 element of the array.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BitSet.#ctor(System.Int32[])">
            <summary>
            Constructs the BitSet.
            </summary>
            <param name="bits">Members of the BitSet.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.MutableBitSet">
            <summary>
            Represent mutable set of ordinal numbers in the range 0..N.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.MutableBitSet._significant">
            <summary>
            Spesifies the index of last element of the _bits that has at
            least one bit set.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.MutableBitSet.IsEmpty">
            <summary>
            Indicates whether this BitSet is empty (null) set.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.#ctor(System.Int32)">
            <summary>
            Construct the BitSet that is able to represent the set
            of ordinal numbers in the range 0..size-1.
            </summary>
            <param name="size">The initial size of the set.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.#ctor(Oss.Asn1.Internal.BitSet)">
            <summary>
            The copy constructor.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.CreateSingleton(System.Int32)">
            <summary>
            Creates empty bitset and adds the specified ordinal
            number to it.
            </summary>
            <param name="bit">The number to add</param>
            <returns>The singleton bit set containing the only element.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.Add(System.Int32)">
            <summary>
            Adds the specified ordinal number to the set. If the
            number exceeds the allocated capasity an exception is thrown.
            </summary>
            <param name="bit">The ordinal number to add.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.Intersect(Oss.Asn1.Internal.BitSet)">
            <summary>
            Computes the intersection of this object with another BitSet.
            </summary>
            <param name="other">ANother BitSet.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.Includes(Oss.Asn1.Internal.BitSet)">
            <summary>
            Check if this object includes another BitSet.
            </summary>
            <param name="other">Another BitSet.</param>
            <returns>True if all elements of the 'other' BitSet are
            members of this BitSet.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.Next(System.Int32)">
            <summary>
            Retuns the closest member of this BitSet that is greated than or equal to 'from'
            or -1 if such member does not exist. One can use the following loop to
            iterate over members of the set:
            </summary>
            <example>
            for (int n = Next(0); n != -1; n = Next(n + 1) 
            {
                ...
            }
            </example>
            <param name="from">The number to search.</param>
            <returns>The closest member of this BitSet that is greated than or equal to 'from'
            or -1 if such member does not exist.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.MutableBitSet.Clear">
            <summary>
            Sets the BitSet empty.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonTokens">
            <summary>
            This helper class implements the buffer where JSON tokens extratced from the
            input are memorized. Values of JsonReader.Token are stored in packed format
            (two values are packed in the single byte). For Token.STRING and Token.NUMBER the
            buffer additionally stores associated string values (for Token.STRING the value
            is saved without surrounding quotation marks). The lifecycle of the JsonToken
            object is as follows: the buffer is filled by means of Put() and PutValue()
            methods, the buffer is switched to the read mode by calling the Flip() method
            and then accumulated tokens are retrieved via Get() and GetValue() methods.
            After all saved tokens are retrieved the Get() method returns the Token.END
            token.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonTokens.Node">
            <summary>
            The allocation unit that is used to grow the capacity of the buffer
            without data copying.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens.Node._next">
            <summary>
            Reference to the next allocation unit.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens.Node._data">
            <summary>
            The byte[] where values of tokens are stored in packed format
            (two tokens are packed in the single byte).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.Node.#ctor(System.Int32)">
            <summary>
            Initializes new allocation unit with the given capacity.
            </summary>
            <param name="size">The requested capacity in bytes.</param>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._maxNode">
            <summary>
            Maximum size of the allocation unit. Because each byte stores values for
            two tokens the limit is equal to 1/2 of maximum signed 32-bit number  (this
            ensures that position in the buffer will fit signed 32-bit integer and
            will not overflow).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens.flipped">
            <summary>
            Specifies current mode. 'false' means that the buffer is being filled,
            'true' indicates that the buffer is being read.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._head">
            <summary>
            The head of the list of allocation units.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._tokens">
            <summary>
            The currebt allocation unit that is being filled or is being read.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._values">
            <summary>
            The storage for values of Token.STRING and Token.NUMBER.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._posT">
            <summary>
            Tracks current position in _tokens (zero-based nibble index).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._posV">
            <summary>
            Tracks current position in _values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._limit">
            <summary>
            The number of tokens in _tokens (used by Get() and Put() to switch
            to next allocation unit as necessary.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._finalLimit">
            <summary>
            The actual number of tokens in the last allocation unit (used by Get())
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._markedPosT">
            <summary>
            The _posT saved by Mark().
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._markedPosV">
            <summary>
            The _posV saved by Mark().
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonTokens._markedNode">
            <summary>
            The reference to the allocation unit at the moment the Mark() method
            was called.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.#ctor">
            <summary>
            Initializes the JsonToken object. The initializer sets the instance to
            the writing mode.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.Put(Oss.Asn1.Internal.JsonReader.Token)">
            <summary>
            Appends the token to the buffer. It is expected that for Token.NUMBER and
            Token.STRING the call to Put() must be followed by the call to PutValue().
            </summary>
            <param name="token">The token to save.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.PutValue(System.String)">
            <summary>
            Called to save the value of Token.STRING and Token.NUMBER. For Token.STRING
            the value should not contain surrounding quotation marks and in both cases
            value should contain escape sequences.
            </summary>
            <param name="value">The value to save.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.Flip">
            <summary>
            Flips the buffer from writing to reading.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.Get">
            <summary>
            Retrieves next token from the buffer. It is expected that for Token.NUMBER and
            Token.STRING the call to Get() must be followed by the call to GetValue(). After
            the last token that was previously put into the buffer is retrieved the method
            returns the Token.END.
            </summary>
            <returns>Next token in the buffer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.GetValue">
            <summary>
            Retrieves the value of Token.NUMBER or Token.STRING.
            </summary>
            <returns>Retrieved value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.Mark">
            <summary>
            Marks the current position in the buffer while tokens are read. Multiple
            marks are not supported (next call to Mark() overwrites the previous one).
            One can use Reset() to jump back to the position memorized by mark.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.Reset">
            <summary>
            Changes the current position to the position saved by the matching
            Mark() call. If Mark() has not be called before Reset() rewinds the
            buffer to the very beginning.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.GetMarked(Oss.Asn1.Internal.JsonReader.Token)">
            <summary>
            Joins tokens starting from the position memorized by Mark() and upto the
            current position (exclusive) and returns the result as a string. While values
            of Token.STRING are inserted they are surrounded by quotation marks and
            contained special characters are escaped as necessary.
            </summary>
            <param name="first">When the value is other than Token.NONE this token is inserted
            at the beginning of the returned string.</param>
            <returns>The string containing tokens.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.AppendEscapedString(System.String,System.Text.StringBuilder)">
            <summary>
            Appends the string to the StringBuilder and replaces special characters with
            corresponding escape sequences.
            </summary>
            <param name="value">The string value to append.</param>
            <param name="sb">The output StringBuilder where tokens and values are accumulated.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonTokens.Clear">
            <summary>
            Resets the object to the initial state. Clears allocated data and
            sets the writing mode. This method enables object reuse. After the method is 
            called the object can be filled and read again.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonRecordingReader">
            <summary>
            This helper reader is capable of recording the input tokens into the
            aside buffer while tokens are read from the input. It is used to
            implement lookahead when values of UNWRAPPED CHOICE are decoded.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader._caller">
            <summary>
            The JsonDecoder that is doing lookahead.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader._reader">
            <summary>
            The original input to be recorder.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader._pushed_back">
            <summary>
            Memorizes that the Pushback() was called (to avoid duplicate
            recording of the token that was pushed back).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader._items">
            <summary>
            The buffer where inout tokens are momorized.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader._player">
            <summary>
            The cached instance of the reader that is used to replay
            recorded tokens.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Open(Oss.Asn1.Internal.JsonDecoder,Oss.Asn1.Internal.JsonReader)">
            <summary>
            Initializes the reader. 
            </summary>
            <param name="caller">The JsonDecoder that is dong the lookahead.</param>
            <param name="reader">The original reader where this reader is attached.</param>
            <returns>This object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Close">
            <summary>
            Releases resources associated with this JsonReader.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.BeginRecording(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates recording of input tokens. Recorder tokens can be replayed
            using the BeginReplay().
            </summary>
            <param name="caller">The JsonDecoder object that has initiated the recording.</param>
            <returns>The instance of JsonReader capable of recording.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.BeginReplay(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates replaying of token that were previously recorded.
            </summary>
            <param name="caller">The JsonDecoder object that has requested the replay.</param>
            <returns>>The instance of JsonReader capable of replaying.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.AbortRecording">
            <summary>
            Aborts recording and discards all recorder tokens.
            </summary>
            <returns>The original JsonReader where the recorder was attached.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.BeginCapture">
            <summary>
            Initiates input capturing mode. In capturing mode every byte read from the input
            is saved in the internal buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.EndCapture">
            <summary>
            Terminates input capturing mode and returns bytes, accumulated in the internal buffer.
            </summary>
            <returns>Captured bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.NextToken(System.Boolean)">
            <summary>
            Reads next JSON token from the input.
            </summary>
            <param name="eof">when 'true' the method throws a _more_data exception
            if the EOF is detected</param>
            <returns>The kind of JSON token detected.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Pushback(Oss.Asn1.Internal.JsonReader.Token)">
            <summary>
            Pushes back the token. Next call to NextToken() will return
            the token passed as the parameter rather than the token read
            from the input.
            </summary>
            <param name="t">The token to unread</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.ReadJsonNumber">
            <summary>
            Extracts JSON number from the input. It is expected that the method is
            called immediately after the NextToken() returned the Token.NUMBER.
            </summary>
            <returns>The string containing JSON number</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.ReadJsonString">
            <summary>
            Reads JSON String from input processing possible escapes. The Json string is terminated by the
            unescaped '"' character.
            </summary>
            <returns>The value of JSON string read.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.SkipJsonNumber">
            <summary>
            Skips JSON number in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.SkipJsonString">
            <summary>
            Skips JSON string in the input.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonRecordingReader.Player">
            <summary>
            This helper reader is capable of replaying tokens recorded by the
            JsonRecordingReader.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader.Player._parent">
            <summary>
            The reader that recorded tokens are to be replayed.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader.Player._items">
            <summary>
            The buffer containing recorded tokens.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader.Player._pushedBack">
            <summary>
            Memorizes the token that was pushed back by the Pushback().
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader.Player._recording">
            <summary>
            Indicates that lookahead is in progress.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader.Player._capturing">
            <summary>
            Indicates that input capturing is in progress.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonRecordingReader.Player._savedPushedBack">
            <summary>
            Saves state when secondary recording or capturing is initiated.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.Open(Oss.Asn1.Internal.JsonRecordingReader)">
            <summary>
            Initializes the reader.
            </summary>
            <param name="recorder">The JsonRecordingReader that recorded tokens are to be replayed.</param>
            <returns>This object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.Close">
            <summary>
            Releases resources associated with this JsonReader.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.BeginRecording(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates recording of input tokens. Recorder tokens can be replayed
            using the BeginReplay().
            </summary>
            <param name="caller">The JsonDecoder object that has initiated the recording.</param>
            <returns>The instance of JsonReader capable of recording.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.BeginReplay(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Initiates replaying of token that were previously recorded.
            </summary>
            <param name="caller">The JsonDecoder object that has requested the replay.</param>
            <returns>>The instance of JsonReader capable of replaying.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.AbortRecording">
            <summary>
            Aborts recording and discards all recorder tokens.
            </summary>
            <returns>The original JsonReader where the recorder was attached.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.BeginCapture">
            <summary>
            Initiates input capturing mode. In capturing mode every byte read from the input
            is saved in the internal buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.EndCapture">
            <summary>
            Terminates input capturing mode and returns bytes, accumulated in the internal buffer.
            </summary>
            <returns>Captured bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.NextToken(System.Boolean)">
            <summary>
            Reads next JSON token from the input. When all recorded tokens are replayed the
            methods notifies the owner (the JsonDecoder) that is should switch the input to
            the original reader by calling the EndReplay() method of the JsonDecoder.
            </summary>
            <param name="eof">when 'true' the method throws a _more_data exception
            if the EOF is detected</param>
            <returns>The kind of JSON token detected.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.Pushback(Oss.Asn1.Internal.JsonReader.Token)">
            <summary>
            Pushes back the token. Next call to NextToken() will return
            the token passed as the parameter rather than the token read
            from the input.
            </summary>
            <param name="t">The token to unread</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.ReadJsonNumber">
            <summary>
            Extracts JSON number from the input. It is expected that the method is
            called immediately after the NextToken() returned the Token.NUMBER.
            </summary>
            <returns>The string containing JSON number</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.ReadJsonString">
            <summary>
            Reads JSON String from input processing possible escapes. The Json string is terminated by the
            unescaped '"' character.
            </summary>
            <returns>The value of JSON string read.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.SkipJsonNumber">
            <summary>
            Skips JSON number in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonRecordingReader.Player.SkipJsonString">
            <summary>
            Skips JSON string in the input.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonDecoder">
            <summary>
            Implements the JSON decoder.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonDecoder._reader">
            <summary>
            The object that reads JSON tokens from the input.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonDecoder._codingContained">
            <summary>
            Indicates that the decoder was invoked to decode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.JsonDecoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated after the decoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.JsonDecoder.Options">
            <summary>
            JSON decoder options
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.#ctor(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            Initializes the decoder object
            </summary>
            <param name="options">Initial options</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodePdu(System.IO.Stream,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from a stream.
            </summary>
            <param name="stream">The input stream containing JSON tokens</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodePdu(System.IO.TextReader,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from text.
            </summary>
            <param name="textReader">The TextReader to feed JSON tokens</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodePdu(System.String,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from string.
            </summary>
            <param name="value">The string containing JSON tokens</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.InternalDecodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Decodes the PDU from JSON tokens. If validation is enabled, validates
            that the decoded value satisfies constraints of the ASN.1 definitions.
            </summary>
            <param name="pdu">The output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeType(Oss.Asn1.BaseType)">
            <summary>
            Decodes a BaseType object into internal buffer/stream
            </summary>
            <param name="type">Input object</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeOpenType(Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU as open type
            </summary>
            <param name="pdu">PDU object</param>
            <returns>Open type object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeDeferredComponent``1">
            <summary>
            Decodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The decoded deferred component object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.Expect(Oss.Asn1.Internal.JsonReader.Token)">
            <summary>
            Ensures that the next token in input is of the specified kind. Otherwise an
            Asn1InvalidENcodingException(_json_unexpected_token) is thrown.
            </summary>
            <param name="token">The kind of the token</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.JsonNumber">
            <summary>
            Ensures that the next value is the JSON number and returns it in a string.
            </summary>
            <returns>The string containing the JSON nuber</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.JsonString">
            <summary>
            Ensures that the next value is the JSON string and returns it in a string.
            </summary>
            <returns>The string containing the JSON string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.JsonObject">
            <summary>
            Ensures that the next token is JSON object.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.JsonArray">
            <summary>
            Ensures that the next token is JSON array.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.KVSeparator">
            <summary>
            Ensure that next token is the colon (:).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.JsonProperty">
            <summary>
            Ensures that next input is property name (key), i.e. JSON string
            followed by the COLON token and returns the name of the property in a string.
            </summary>
            <returns>The string containing the property name</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.Hstring">
            <summary>
            Ensures that the next value is JSON string containing hex characters and
            converts this string to the byte[]
            </summary>
            <returns>byte[] representing the hstring</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.BASE64string">
            <summary>
            Ensures that the next value is JSON string containing BASE64 digits and
            converts this string to the byte[]
            </summary>
            <returns>byte[] representing the BASE64 string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.HasNull">
            <summary>
            Tests if the next token is the 'null' token.
            </summary>
            <returns>true if the next token in the input is the 'null' token.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.ImplyNull">
            <summary>
            Inserts implicit 'null' token into the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.HasMoreProperties(System.Boolean)">
            <summary>
            Verifies if the JSON object has more properties to read.
            </summary>
            <param name="first">true means that the check is invoked 
            for the first element</param>
            <returns>true if there are more properties to read</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.HasMoreElements(System.Boolean)">
            <summary>
            Verifies if the JSON array has more elements to read.
            </summary>
            <param name="first">true means that the check is invoked 
            for the first element</param>
            <returns>true if there are more elements to read</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.SkipJsonObject">
            <summary>
            Skips one JSON object in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.SkipJsonArray">
            <summary>
            Skips one JSON array in the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.SkipValue">
            <summary>
            Skips JSON value. Used to skip unknown extensions.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.CaptureRawValue">
            <summary>
            Skips JSON value but records it in the buffer using UTF8 encoding.
            </summary>
            <returns>UTF8 octets representing the value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeInt">
            <summary>
            Decodes a 32-bit integer
            </summary>
            <returns>The 'int' value decoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeLong">
            <summary>
            Decodes a 64-bit integer
            </summary>
            <returns>The 'long' value decoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeULong">
            <summary>
            Decodes an unsigned 64-bit integer
            </summary>
            <returns>The 'ulong' value decoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBigInt">
            <summary>
            Decodes big integer.
            </summary>
            <returns>The string representing big integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.ParseDouble(System.String)">
            <summary>
            Attempts to parse string value to double. The method
            recognizes special values "INF", "-INF", "NaN", "-0"
            and "-0.0".
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The result of parsing.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeDouble">
            <summary>
            Decodes double value.
            </summary>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.ParseDecimal(System.String)">
            <summary>
            Attempts to parse string value to decimal. The method
            recognizes special values "INF", "-INF", "NaN", "-0"
            and "-0.0". Because such special values cannot be represented
            using the decumal value type an exception is thrown if
            such special value is encountered.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The result of parsing.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeDecimal">
            <summary>
            Decodes decimal value.
            </summary>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeReal">
            <summary>
            Decodes REAL value and returns it in the string. Special values are returned as
            "INF", "-INF", "NaN" and "-0".
            </summary>
            <returns>The value of REAL as text</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeReal(System.String)">
            <summary>
            Completes the decoding of REAL represented by the JSON object.
            </summary>
            <param name="prop">The name of the first property of the
            JSON object.</param>
            <returns>The value of REA as text.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBitString(System.Int32)">
            <summary>
            Decodes the BIT STRING. Non-negative 'length'
            specifies that the BIT STRING has fixed length. The
            'length' of -1 specifies that the length can vary and
            must be determined from the encoding.
            </summary>
            <param name="length">The length</param>
            <returns>The decoded BitString object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBitStringWithNamedBits(System.Int32)">
            <summary>
            Decodes the BIT STRING. Non-negative 'length'
            specifies that the BIT STRING has fixed length. The
            'length' of -1 specifies that the length can vary and
            must be determined from the encoding.
            </summary>
            <param name="length">The length</param>
            <returns>The decoded BitStringWithNamedBits object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBits(System.Int32@)">
            <summary>
            Decodes the value of BIT STRING. The BIT STRING can be encoded as
            JSON string (hstring) or as a JSON object. If the 'length' >= 0 (fixed
            length) and the BIT STRING is encoded as JSON object, the 'length'
            property of the object is ignored and length specified by 'length'
            parameter is used. If the 'length' is -1 (has to be determined from the
            encoding) but the BIT STRING is encoded as JSON string an exception is
            thrown. Otherwise, the 'length' parameter is set to the value of the
            'length' property of the JSON object.
            </summary>
            <param name="length">The length</param>
            <returns>Content octets of the BIT STRING</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBits(System.String,System.Int32@)">
            <summary>
            Decodes the value of the BIT STRING, represented by JSON object.
            </summary>
            <param name="prop">The name of the first property of the JSON object.</param>
            <param name="length">The length of the BIT STRING.</param>
            <returns>Content octets of the BIT STRING</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeNull">
            <summary>
            Decodes the value of NULL type.
            </summary>
            <returns>0</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBoolean">
            <summary>
            Decodes the BOOLEAN value
            </summary>
            <returns>The value decoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeOctetString">
            <summary>
            Decodes the value of OCTET STRING.
            </summary>
            <returns>The content octets</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeOctetStringBase64">
            <summary>
            Decodes the value of OCTET STRING encoded using
            BASE64 encoding.
            </summary>
            <returns>The content octets</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeString">
            <summary>
            Decodes a string.
            </summary>
            <returns>The string decoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeUniversalString">
            <summary>
            Decodes a UTF32 string.
            </summary>
            <returns>The decoded string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes the value of OBJECT IDENTIFIER.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeRelativeOid">
            <summary>
            Decodes the value of RELATIVE-OID.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeOSCC``1(System.Boolean)">
            <summary>
            Decode into octet string with content constraints
            </summary>
            <typeparam name="T">The type of the contained value</typeparam>
            <param name="isBase64">Specifies that the value is the BASE64 string rather than the hex string</param>
            <returns>The octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBSCC``1(System.Int32)">
            <summary>
            Decode into bit string with contents constraint
            </summary>
            <typeparam name="T">The type of the contained value</typeparam>
            <param name="length">Specifies the fixed length if the length is constrained to the single value or is -1 otherwise</param>
            <returns>The bit string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeBSCCPdu``1(Oss.Asn1.BitString)">
            <summary>
            Decodes the PDU contained in the BIT STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.DecodeOSCCPdu``1(System.Byte[])">
            <summary>
            Decodes the PDU contained in the OCTET STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.PeekValue">
            <summary>
            Asserts that the next item in the input is JSON value and peeks
            its type. The starting token of the value is not consumed (is
            retained in the input).
            </summary>
            <returns>The type of the JSON value in input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.SkipRemainingProperties">
            <summary>
            Skips the value of the current property and all key/values
            that follow it ipto the end of JSON object.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.BeginLookahead">
            <summary>
            Initiates the lookahaed mode. 
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.AbortLookahead">
            <summary>
            Discards lookahead data and continues normal
            processing of the input.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.EndLookahead">
            <summary>
            Completes lookahead mode. Next calls to decoder will
            replay all tokens that were retrieved from the input
            between BeginLookahead() and matching EndLookahead()
            calls.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.EndReplay(Oss.Asn1.Internal.JsonReader)">
            <summary>
            Competes the replay of input tokens and restores the original
            JsonReader as the input source.
            </summary>
            <param name="original">The original input source.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.GetRecorder">
            <summary>
            Retrieves the instance of JsonReader capable of recording.
            </summary>
            <returns>The instance of the JsonRecordingReader.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.UpdateMask(Oss.Asn1.Internal.MutableBitSet,Oss.Asn1.Internal.BitSet)">
            <summary>
            Updates the BitSet by intersecting it with another bitset.
            If the first argument is null the copy of the second argument is
            returned.
            </summary>
            <param name="mask">The BitSet to update.</param>
            <param name="other">The BitSet that is intersected with the
            original BitSet (mask).</param>
            <returns>The updated original mask.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonDecoder._recursionDepth">
            <summary>
            Tracks the depth of recursive calls.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.JsonDecoder.Depth">
            <summary>
            This property is for the internal use only and should not be utilized by the
            application code. It reflects the current depth of recursion when decoding
            values of types with circular definitions. The property is also used to pass
            the current depth of recursion to the child coder when circular definition
            includes OCTET STRING or BIT STRING with the content constraint.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.EnterRecursive">
            <summary>
            Informs the decoder that it enters the next level of
            recursion when decoding the value of type with the circular
            definition.
            <exception cref="T:System.InvalidOperationException">
            If the recursion depth exceeds the limit, specified by the
            RecursionLimit option.
            </exception>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonDecoder.LeaveRecursive">
            <summary>
            Informs the decoder that the innermost recursive invocation
            is completed.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonEncoder">
            <summary>
            Provides functionality for encoding PDUs and primitive types using JSON encoding rules.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonEncoder.JsonStreamWriter">
            <summary>
            Helper class used for initializing the FormatProvider for a StreamWriter object.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.JsonStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.IFormatProvider)">
            <summary>
            Initializes the StreamWriter object using the specified parameters.
            </summary>
            <param name="stream">The stream over which the StreamWriter is created.</param>
            <param name="encoding">Text encoding used to write the data to the stream.</param>
            <param name="formatProvider">The IFormatProvider object which will be used for foratting data as strings.</param>
        </member>
        <member name="P:Oss.Asn1.Internal.JsonEncoder.JsonStreamWriter.FormatProvider">
            <summary>
            Returns the IFormatProvider object used in the constructur for the initialization of this instance.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.JsonEncoder.EmptyValueKind">
            <summary>
            Helper type used in detection of empty arrays and objects that are
            formatted differently.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._textWriter">
            <summary>
            TextWriter object used to write the JSON encoded data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._stream">
            <summary>
            The stream object in which the JSON encoded data is written.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._indentLevel">
            <summary>
            The current indentation level.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._indentString">
            <summary>
            The complete indentation string corresponding to the current indentation level.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._emptyValueKind">
            <summary>
            Tracks invocation of BeginObject/BeginArray 
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._indentList">
            <summary>
            A list in which are chached the indentation string corresponding to all indentation levels.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._codingContained">
            <summary>
            Indicates that the encoder was invoked to encode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.JsonEncoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated before the encoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.JsonEncoder.Options">
            <summary>
            The encoder options which can be used to modify the behavior of the JSON encoder.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.#ctor(Oss.Asn1.JsonEncoderOptions)">
            <summary>
            Constructs a new instance using the provided option object.
            </summary>
            <param name="options">The object which specifies the options to be used during encoding.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.BeginObject">
            <summary>
            Encodes the start of a JSON object.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EndObject">
            <summary>
            Encodes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.BeginArray">
            <summary>
            Encodes the start of a JSON array.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EndArray">
            <summary>
            Encodes the end of a JSON array.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeKey(System.String)">
            <summary>
            Encodes a name component in a name/value pair of an object, including the colon (:).
            Assumes that the "key" is the valid ASN.1 name and hence does not contain characters
            that need escaping.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeKeyX(System.String)">
            <summary>
            Encodes a name component in a name/value pair of an object, including the colon (:).
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeAbsentMember(System.String)">
            <summary>
            Encodes a name/value pair when the value is absent.
            Assumes that the "key" is the valid ASN.1 name and hence does not contain characters
            that need escaping.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeAbsentMemberX(System.String)">
            <summary>
            Encodes a name/value pair when the value is absent.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeSeparator(System.String)">
            <summary>
            Encodes the comma (,) separator between two name/value pairs of an object.
            The separator can be null, and in this case nothing is encoded.
            (This is used for OPTIONAL components.)
            </summary>
            <param name="separator">The string which specifies the separator. It must be null or contain a single comma character.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeSeparator">
            <summary>
            Encodes the comma (,) separator between two name/value pairs of an object.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeKVSeparator">
            <summary>
            Encodes the colon (:) separator between key and value.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeBool(System.Boolean)">
            <summary>
            Encodes a boolean value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeInt(System.Int32)">
            <summary>
            Encodes an int value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeLong(System.Int64)">
            <summary>
            Encodes a long value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeULong(System.UInt64)">
            <summary>
            Encodes an unsigned long value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeBigInt(System.String)">
            <summary>
            Encodes a BigInteger value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeNull">
            <summary>
            Encodes a NULL value.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeDouble(System.Double)">
            <summary>
            Encodes a double number.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeDecimal(System.Decimal,System.Int32)">
            <summary>
            Encodes a decimal number.
            </summary>
            <param name="value">The value to encode.</param>
            <param name="format">Specifies how the value is encoded. 0 - as JSON object
            with the sole property "base10Value" that value is JSON number, non-zero - as
            JSON number.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Encodes an ObjectIdentifier value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Encodes a RelativeOid value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes an UTCTime value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes an GeneralizedTime value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeString(System.String)">
            <summary>
            Encodes a value represented as a C# String object.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeUniversalString(System.Int32[])">
            <summary>
            Encodes an UniversalString value (an UTF-32 string of Unicode charachters).
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeOctetString(System.Byte[])">
            <summary>
            Encodes an OCTET STRING value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeOctetStringBase64(System.Byte[])">
            <summary>
            Encodes an OCTET STRING value using BASE64 encoding.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeBitString(Oss.Asn1.BitString,System.Int32)">
            <summary>
            Encodes a BitString value. 
            For variable size BitString the length must be -1.
            For fixed size BitString the size constraint in bits must be correctly specified by the length parameter.
            </summary>
            <param name="value">The value to be encoded.</param>
            <param name="length">The size constraint for fixed size BitString or -1 for variable size BitString.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeBitString(System.Byte[],System.Int32)">
            <summary>
            Internal helper method used to encode the content of a BitString value. 
            For variable size BitString the length must be -1.
            For fixed size BitString the size constraint in bits must be correctly specified by the length parameter.
            </summary>
            <param name="value">The value to be encoded.</param>
            <param name="length">The size constraint for fixed size BitString or -1 for variable size BitString.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeBitStringWithNamedBits(Oss.Asn1.BitStringWithNamedBits,System.Int32)">
            <summary>
            Encodes a BitStringWithNamedBits object which has a fixed size constraint.
            The zero trailing bits are trimmed or added as required in order to satisfy the size constraint.
            An exception is thrown if the index of the last set bit (with value 1) is bigger than the size contraint.
            </summary>
            <param name="value">The value to be encoded.</param>
            <param name="length">The size constraint.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeOSCC(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the value contained in an OctetStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeOSCCBase64(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the value contained in an OctetStringWithContentsConstraint
            using BASE64 encoding.
            </summary>
            <param name="value">The value to be encoded</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.PreencodeContained(Oss.Asn1.BasePdu)">
            <summary>
            Pre-encodes the value contained in the OCTET STRING
            into the byte[] that is later written as a JSON string
            (hstring or BASE64 string).
            </summary>
            <param name="value">The value to be encoded</param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeContainedValueAsText(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the value of the BIT STRING or OCTET STRING in the form
            {"containing":JSON_value} instead of as hex string.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeBSCC(Oss.Asn1.BasePdu,System.Int32)">
            <summary>
            Encodes the value contained in an BitStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded.</param>
            <param name="length">The fixed size constraint in bits if exists, or -1 otherwise.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes an OpenType value.
            </summary>
            <param name="value">The value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Encodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="dc">The deferred component value to be encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeType(Oss.Asn1.BaseType)">
            <summary>
            Helper method used to encode a value.
            </summary>
            <param name="type">Value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.TextWriter)">
            <summary>
            Encodes a PDU and writes the encoded data using the provided TextWriter object.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="textWriter">The TextWriter object used to write the encoded data.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes a PDU and writes the encoded data in the provided stream. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="stream">The stream in which the encoded data is written.</param>
            <returns>The size of the encoded data in bytes. If the stream does not support seek operations -1 is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU and returns the encoded data as a String object. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <returns>The encoded data as a String object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.ClearEmptyParentFlag">
            <summary>
            Invalidates assumption that parent array or object are  empty.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.InternalEncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Internal helper method used to encode a PDU.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.IncIndent">
            <summary>
            Increases the indentation level.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.DecIndent">
            <summary>
            Decreases the indentation level.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeEscapedString(System.String)">
            <summary>
            Encodes a string and escapes the control characters, plus the quotes and the backslash.
            </summary>
            <param name="value">String to be escaped and encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeStringFragment(System.String,System.Int32,System.Int32)">
            <summary>
            Helper method used to encode a fragment of a string.
            </summary>
            <param name="value">String from which to get the chars to be encoded.</param>
            <param name="startPos">The position of the first char to be encoded.</param>
            <param name="endPos">The position before which the encoding should stop.</param>
            <returns>The index after the endPos.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._hexDigits">
            <summary>
            String which contains the hex alphabet.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._charBuffer">
            <summary>
            Char buffer used for encoding strings.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.JsonEncoder._escapeCodes">
            <summary>
            Array with escape codes for ASCII control characters.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.JsonEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.OerArrayEncoder">
            <summary>
            Encoder of ISO 8601 time types.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.OerArrayEncoder.Position">
            <summary>
            Represents the position inside linked list of buffers where the
            output encoding is accumulated.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Position.Last">
            <summary>
            The reference to the SavedBuffer object.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Position.Index">
            <summary>
            The position in the SavedBuffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Position.SavedLength">
            <summary>
            The number of bytes in other SavedBuffer objects that
            preceed the current buffer.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.OerArrayEncoder.SavedBuffer">
            <summary>
            Auxiliary class used for organization of temporary storage for already encoded
            message parts.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.SavedBuffer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initialize SavedBuffer object with given <c>buffer</c>, <c>start</c> and
            <c>finish</c> values.
            </summary>
            <param name="buffer">Buffer to be stored into <c>Buffer</c> property of
            SavedBuffer object.</param>
            <param name="size">Size of data in the buffer.</param>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.SavedBuffer.Next">
            <summary>
            SavedBuffer object with next part of encoded message. Null if this SavedBuffer
            object stores the last encoding part.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.SavedBuffer.Buffer">
            <summary>
            Buffer with stored part of the encoding.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.SavedBuffer.Size">
            <summary>
            First index in the <c>Buffer</c> after last byte of
            encoded part.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.OerArrayEncoder.ByteCount">
            <summary>
            Returns the current length of encoded data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.BufferChunkSize">
            <summary>
            Base size of each new <c>Buffer</c> when encoding to
            automatically allocated memory used. Default value is 4096 bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Buffer">
            <summary>
            Current memory buffer used by encoding functions to store encoded message.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Index">
            <summary>
            Current position in the <c>Buffer</c>.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Begin">
            <summary>
            First position in the <c>Buffer</c> that can be used by encoder to store it's data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.End">
            <summary>
            End position of the <c>Buffer</c>.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.SavedLength">
            <summary>
            Length of the encoding in the list of SavedBuffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Preallocated">
            <summary>
            True if encoding in preallocated buffer used.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Head">
            <summary>
            Stored encoded parts of message. 
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder.Last">
            <summary>
            Stored encoded parts of message. 
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerArrayEncoder._codingContained">
            <summary>
            Indicates that the encoder was invoked to encode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.OerArrayEncoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated before the encoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.OerArrayEncoder.Options">
            <summary>
            OER-specific encoder options
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.#ctor(Oss.Asn1.OerEncoderOptions)">
            <summary>
            Initializes Encoder with options
            </summary>
            <param name="options">Initial options</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encode a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="stream">Output stream</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Byte[],System.Int32)">
            <summary>
            Encode a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="buffer">Output buffer</param>
            <param name="index">Buffer position</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encode a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <returns>Output buffer</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeType(Oss.Asn1.BaseType)">
            <summary>
            Encodes any BaseType representation that implements EncodeOer() method 
            </summary>
            <param name="type">BaseType object</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.AllocBuffer">
            <summary>
            Allocates memory for the encoding buffer
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.ChangeBuffer">
            <summary>
            Switches the encoder to new memory buffer.
            Asn1OutputFullException thrown when ChangeBuffer() called for preallocated
            buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.ChangeBuffer(System.Int32)">
            <summary>
            Switches the encoder to new memory buffer.
            Asn1OutputFullException thrown when ChangeBuffer() called for preallocated
            buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.InsertBuffer(Oss.Asn1.Internal.OerArrayEncoder.SavedBuffer,System.Int32)">
            <summary>
            Switches the encoder to new memory buffer.
            Asn1OutputFullException thrown when ChangeBuffer() called for preallocated
            buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.Consolidate">
            <summary>
            Consolidate all memory chunks into one.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.BeginWrappedEncoding">
            <summary>
            Begins encoding data that is wrapped with length determinant (extension,
            open type, the value contained in a BIT STRING or OCTET STRING).
            </summary>
            <returns>The Position struct to be passed to the matching call to the
            EndWrappedEncoding().</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EndWrappedEncoding(Oss.Asn1.Internal.OerArrayEncoder.Position)">
            <summary>
            Completes wrapped encoding and inserts appropriate length determinant
            in front of it.
            </summary>
            <param name="mark">The position that was memorized by the matching call of
            BeginWrappedEncoding().</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.RaiseUntaggedOpenTypeError">
            <summary>
            Throws Asn1InvalidDataException when encoder encounters untagged open type
            in the context that requires extraction of the outermost tag.
            For example:
            CHOICE {
                x TYPE_IDENTIFIER.&amp;Type
            }
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeTag(System.Int32)">
            <summary>
            Encodes C# uint into OER Tag  
            </summary>
            <param name="tag">Tag value.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeLength(System.Int32)">
            <summary>
            Encodes C# int into CANONICAL-OER Length (see OER standard 31.2) 
            (i.e. L = 0..127 fits one byte |0xxx-xxxx|, L >= 128 fits n-bytes |1nnn-nnnn|xxxx-xxxx|[...] 
            </summary>
            <param name="length">Length (32 bit unsigned integer).</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeBool(System.Boolean)">
            <summary>
            Encodes C# bool into CANONICAL-OER BOOLEAN
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeByte(System.Byte)">
            <summary>
            Encodes byte into OER octet
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeIntEnumerated(System.Int32)">
            <summary>
            Encodes C# int into CANONICAL-OER ENUMERATED 
            (i.e. 0..127 fits one byte |0xxx-xxxx|, otherwise (including negative) fits n-bytes |1nnn-nnnn|xxxx-xxxx|[...] 
            </summary>
            <param name="value">Enumerated value (32 bit).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeLongEnumerated(System.Int64)">
            <summary>
            Encodes C# int into CANONICAL-OER ENUMERATED 
            (i.e. 0..127 fits one byte |0xxx-xxxx|, otherwise (including negative) fits n-bytes |1nnn-nnnn|xxxx-xxxx|[...] 
            </summary>
            <param name="value">Enumerated value (64 bit).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeInteger1(System.Int32)">
            <summary>
            Encodes C# 1-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (a), 10.4 (a)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeInteger2(System.Int32)">
            <summary>
            Encodes C# 2-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (b), 10.4 (b)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeInteger3(System.Int32)">
            <summary>
            Encodes C# 3-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (b), 10.4 (b)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeInteger4(System.Int32)">
            <summary>
            Encodes C# 4-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeInteger8(System.Int64)">
            <summary>
            Encodes C# signed 8-byte number into constrained INTEGER SIZE(..). OER standard 10.3 (d), 10.4 (d)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeIntSigned1(System.Int32)">
            <summary>
            Encodes C# 1-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (a), 10.4 (a)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeIntSigned2(System.Int32)">
            <summary>
            Encodes C# 2-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (b), 10.4 (b)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeLongSigned4(System.Int64)">
            <summary>
            Encodes C# 8-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (d), 10.4 (d)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeIntUnsigned1(System.Int32)">
            <summary>
            Encodes C# 1-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (a), 10.4 (a)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeIntUnsigned2(System.Int32)">
            <summary>
            Encodes C# 2-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (b), 10.4 (b)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeLongUnsigned4(System.Int64)">
            <summary>
            Encodes C# 8-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (d), 10.4 (d)
            </summary>
            <param name="value">Integer to encode.</param>
            <returns>Encoded length in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeSignedInt(System.Int32)">
            <summary>
            Encodes C# int into unconstrained/extensible INTEGER (L followed by one or more V octets); OER standard 10.3 e), 10.4 e) 
            </summary>
            <param name="value">value (32 bit).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeSignedInt(System.Int32,System.Int32)">
            <summary>
            Encodes signed integer
            </summary>
            <param name="value">Value</param>
            <param name="length_mask">Mask</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeSignedLong(System.Int64)">
            <summary>
            Encodes C# signed long
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeSignedLong(System.Int64,System.Int32)">
            <summary>
            Encodes C# signed long
            </summary>
            <param name="value">Value</param>
            <param name="length_mask">Mask</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeUnsignedInt(System.Int32)">
            <summary>
            Encodes C# unsigned int
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeUnsignedLong(System.Int64)">
            <summary>
            Encodes C# unsigned long
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeBigInt(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Encodes the value of BigInteger when values are constrained to fit 1, 2, 4 or 8 octets.
            OER standard 10.3 (a-d), 10.4 (a-d)
            </summary>
            <param name="value">The value of the BigInteger in the little-endian format.</param>
            <param name="size">Specifies the width (1, 2, 4 or 8 octets).</param>
            <param name="is_unsigned">Indicates that the value is encoded as unsigned number.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeBigInt(System.Byte[],System.Boolean)">
            <summary>
            Encodes the value of unconstrained BigInteger (L followed by one or more V octets); OER standard 10.3 e), 10.4 e).
            </summary>
            <param name="value">The value of the BigInteger in the little-endian format.</param>
            <param name="is_unsigned">Indicates that the value is encoded as unsigned number.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeString(System.String)">
            <summary>
            Encodes C# string as OER byte-wide char strings, 
            i.e. IA5String, ISO646String, VisibleString, NumericString, PrintableString
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeString(System.String,System.Int32)">
            <summary>
            Encodes C# string as SIZE(<c>bytes</c>) constrained byte-wide char strings, 
            i.e. IA5String, ISO646String, VisibleString, NumericString, PrintableString
            </summary>
            <param name="value">String to encode.</param>
            <param name="size">Bytes to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeUtf8String(System.String)">
            <summary>
            Encodes C# string as OER UTF8String (see OER standard 27.3).
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoded length in bytes</returns>
            
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeUtf8String4(System.Int32[])">
            <summary>
            Encodes a string represented as array of int's as OER UTF8String (see OER standard 27.3).
            </summary>
            <param name="value">String</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeString2(System.String)">
            <summary>
            Encodes BMPString (two-bytes wide character string)
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeString2(System.String,System.Int32)">
            <summary>
            Encodes BMPString (two-bytes wide character string)
            </summary>
            <param name="value">String</param>
            <param name="length">Length</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeString4(System.Int32[])">
            <summary>
            Encodes UniversalString (four-bytes wide character string)
            </summary>
            <param name="value">String to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeString4(System.Int32[],System.Int32)">
            <summary>
            Encodes UniversalString (four-bytes wide character string)
            </summary>
            <param name="value">String to encode.</param>
            <param name="length">Length in characters</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeOctetString(System.Byte[])">
            <summary>
            Encodes byte[] array as OCTET STRING (also suitable for strings represented as byte[], i.e. TeletexString,
            T61String, VideotexString, GraphicString, GeneralString)
            </summary>
            <param name="value">String to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeOctetString(System.Byte[],System.Int32)">
            <summary>
            Encodes byte[] array as fixed length (constrained) OCTET STRING SIZE(S), 14.1 
            </summary>
            <param name="value">String to encode.</param>
            <param name="size">Bytes to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDecimal(System.Decimal)">
            <summary>
            Encodes C# decimal as OER REAL  
            </summary>
            <param name="value"> to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDecimalAsIEEE32(System.Decimal)">
            <summary>
            Encodes C# decimal as IEEE32
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDecimalAsIEEE64(System.Decimal)">
            <summary>
            Encodes C# decimal as IEEE64
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDouble(System.Double)">
            <summary>
            Encodes C# double as OER REAL 
            </summary>
            <param name="value">Number to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDoubleAsIEEE32(System.Double)">
            <summary>
            Encodes double as IEEE32
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDoubleAsIEEE64(System.Double)">
            <summary>
            Encodes double as IEEE64
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeBitString(Oss.Asn1.BitString,System.Int32)">
            <summary>
            Encodes a fixed size BIT STRING (constrained by SIZE(<c>bits</c>))
            </summary>
            <param name="value">BitString to encode.</param>
            <param name="length">number of bits</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeBitStringWithNamedBits(Oss.Asn1.BitStringWithNamedBits,System.Int32)">
            <summary>
            Encodes a fixed size BIT STRING (constrained by SIZE(<c>bits</c>))
            </summary>
            <param name="value">BitString to encode.</param>
            <param name="length">number of bits</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeBitString(Oss.Asn1.BitString)">
            <summary>
            Encodes variable length (unconstrained) BIT STRING value. 
            The CANONICAL-OER form (no non-informative trailing zeros) is ensured by the representation.
            </summary>
            <param name="value">BitString to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeBitmap(System.Int32,System.Int32)">
            <summary>
            Encodes C# int as a bitmap 
            </summary>
            <param name="bitmap">32-wide bitmap</param>
            <param name="octlen">length in octets</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes UTCTime according to X.690-200811 clause 8.25.
            </summary>
            <param name="value">UTCTime to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes GeneralizedTime according to X.690-200811 clause 8.25.
            </summary>
            <param name="value">GeneralizedTime to encode.</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Encodes object identifier according to X.690-200811 clause 8.19.
            </summary>
            <param name="value">Identifier to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Encodes relative object identifier according to X.690-200811 clause 8.20.
            </summary>
            <param name="value">Identifier to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes the value of open type.
            </summary>
            <param name="ot">The value to encode</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Encodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="dc">The deferred component value to be encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeValue``1(``0)">
            <summary>
            Encodes value of a generic type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="data">Value</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeYear(System.String)">
            <summary>
            Encodes OER YEAR-ENCODING for ISO8601String. It is defined as follows 
                 YEAR-ENCODING ::= SEQUENCE {
                     year INTEGER
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeYearMonth(System.String)">
            <summary>
            Encodes OER YEAR-MONTH-ENCODING for ISO8601String. It is defined as follows 
                 YEAR-MONTH-ENCODING ::= SEQUENCE {
                     year INTEGER,
                     month INTEGER (1..12)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDate(System.String)">
            <summary>
            Encodes OER DATE-ENCODING for ISO8601String. It is defined as follows 
                 DATE-ENCODING ::= SEQUENCE {
                     year INTEGER,
                     month INTEGER (1..12),
                     day   INTEGER (1..31)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeHours(System.String)">
            <summary>
            Encodes OER HOURS-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeHoursDiff(System.String)">
            <summary>
            Encodes OER HOURS-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes-diff (-900..900)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeTimeDiff(System.String)">
            <summary>
            Encodes minutes difference
            </summary>
            <param name="value">Time difference in the format +|-hh[:mm]</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeHoursMinutes(System.String)">
            <summary>
            Encodes OER HOURS-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-MINUTES-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeHoursMinutesDiff(System.String)">
            <summary>
            Encodes OER HOURS-MINUTES-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-MINUTES-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     minutes-diff (-900..900)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeTimeOfDay(System.String)">
            <summary>
            Encodes OER TIME-OF-DAY-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeTimeOfDayDiff(System.String)">
            <summary>
            Encodes OER TIME-OF-DAY-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60),
                     minutes-diff (-900..900)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeTimeOfDayFraction(System.String,System.Int32)">
            <summary>
            Encodes OER TIME-OF-DAY-FRACTION-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-FRACTION-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60),
                     fractional-part INTEGER (0..MAX)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">The number of fractional digits</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeTimeOfDayFractionDiff(System.String,System.Int32)">
            <summary>
            Encodes OER TIME-OF-DAY-FRACTION-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-FRACTION-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60),
                     fractional-part INTEGER (0..MAX),
                     minutes-diff (-900..900)
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">The number of fractional digits</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDateTime(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes OER DateTime for ISO8601String. It is a combination of a Date and Time
            encodings
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="date_row">Row number in the Table 1 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <param name="frdigits">Specifies the number of digits in the fractional part</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeDuration(System.String)">
            <summary>
            Encodes OER DURATION-INTERVAL-ENCODING for ISO8601String. It is defined as follows 
                 DURATION-INTERVAL-ENCODING ::= SEQUENCE {
                     years INTEGER (0..MAX) OPTIONAL,
                     months INTEGER (0..MAX) OPTIONAL,
                     weeks INTEGER (0..MAX) OPTIONAL,
                     days INTEGER (0..MAX) OPTIONAL,
                     hours INTEGER (0..MAX) OPTIONAL,
                     minutes INTEGER (0..MAX) OPTIONAL,
                     seconds INTEGER (0..MAX) OPTIONAL,
                     fractional-part SEQUENCE {
                        number-of-digits INTEGER (0..MAX),
                        fractional-value INTEGER (0..MAX)
                      } OPTIONAL
                  }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.EncodeISO8601String(System.String)">
            <summary>
            Encodes ISO 8601 string, representing a value of the TIME type.
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.ReadTimeComponent(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Parses the number from the string and ensures that the number
            fits the range, specified by lower and upper bounds.
            </summary>
            <param name="value">The string, containing the value.</param>
            <param name="lb">The lower bound.</param>
            <param name="ub">The upper bound</param>
            <param name="id">The name that identifies the component.</param>
            <returns>The parsed number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.ReadTimeComponent(System.String,System.String)">
            <summary>
            Parses the number from the string.
            </summary>
            <param name="value">The string, containing the value.</param>
            <param name="id">The name that identifies the component.</param>
            <returns>The parsed number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerArrayEncoder.ReadLongTimeComponent(System.String,System.String)">
            <summary>
            Parses the number from the string.
            </summary>
            <param name="value">The string, containing the value.</param>
            <param name="id">The name that identifies the component.</param>
            <returns>The parsed number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="T:Oss.Asn1.Internal.OerStreamDecoder">
            <summary>
            Decoder of ISO 8601 time types.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeYear">
            <summary>
            Decodes OER YEAR-ENCODING for ISO8601String. It is defined as follows 
                YEAR-ENCODING ::= SEQUENCE {
                    year INTEGER
                }
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeYearMonth">
            <summary>
            Decodes OER YEAR-MONTH-ENCODING for ISO8601String. It is defined as follows 
                 YEAR-MONTH-ENCODING ::= SEQUENCE {
                     year INTEGER,
                     month INTEGER (1..12)
                  }
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDate">
            <summary>
            Decodes OER DATE-ENCODING for ISO8601String. It is defined as follows 
                 DATE-ENCODING ::= SEQUENCE {
                     year INTEGER,
                     month INTEGER (1..12),
                     day   INTEGER (1..31)
                  }
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeHours(System.Boolean)">
            <summary>
            Decodes OER HOURS-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24)
                  }
            </summary>
            <param name="isUTC">Indicates that the time is UTC</param>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeHoursDiff">
            <summary>
            Decodes OER HOURS-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes-diff (-900..900)
                  }
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeHoursMinutes(System.Boolean)">
            <summary>
            Decodes OER HOURS-MINUTES-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-MINUTES-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59)
                  }
            </summary>
            <param name="isUTC">Indicates that the time is UTC</param>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeHoursMinutesDiff">
            <summary>
            Decodes OER HOURS-MINUTES-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 HOURS-MINUTES-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     minutes-diff (-900..900)
                  }
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeTimeOfDay(System.Boolean)">
            <summary>
            Decodes OER TIME-OF-DAY-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60)
                  }
            </summary>
            <param name="isUTC">Indicates that the time is UTC</param>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeTimeOfDayDiff">
            <summary>
            Decodes OER TIME-OF-DAY-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60),
                     minutes-diff (-900..900)
                  }
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeTimeOfDayFraction(System.Int32,System.Boolean)">
            <summary>
            Decodes OER TIME-OF-DAY-FRACTION-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-FRACTION-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60),
                     fractional-part INTEGER (0..MAX)
                  }
            </summary>
            <param name="frdigits">Specifies the number of digits in the fractional part</param>
            <param name="isUTC">Indicates that the time is UTC</param>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeTimeOfDayFractionDiff(System.Int32)">
            <summary>
            Decodes OER TIME-OF-DAY-FRACTION-DIFF-ENCODING for ISO8601String. It is defined as follows 
                 TIME-OF-DAY-FRACTION-DIFF-ENCODING ::= SEQUENCE {
                     hours INTEGER (0..24),
                     minutes INTEGER (0..59),
                     seconds INTEGER (0..60),
                     fractional-part INTEGER (0..MAX),
                     minutes-diff (-900..900)
                  }
            </summary>
            <param name="frdigits">Specifies the number of digits in the fractional part</param>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDateTime(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decodes OER DateTime for ISO8601String. It is a combination of a Date and Time
            encodings
            </summary>
            <param name="date_row">Row number in the Table 1 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <param name="frdigits">Specifies the number of digits in the fractional part</param>
            <param name="isUTC">Indicates that the time is UTC</param>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDuration">
            <summary>
            Decodes OER DURATION-INTERVAL-ENCODING for ISO8601String. It is defined as follows 
                 DURATION-INTERVAL-ENCODING ::= SEQUENCE {
                     years INTEGER (0..MAX) OPTIONAL,
                     months INTEGER (0..MAX) OPTIONAL,
                     weeks INTEGER (0..MAX) OPTIONAL,
                     days INTEGER (0..MAX) OPTIONAL,
                     hours INTEGER (0..MAX) OPTIONAL,
                     minutes INTEGER (0..MAX) OPTIONAL,
                     seconds INTEGER (0..MAX) OPTIONAL,
                     fractional-part SEQUENCE {
                        number-of-digits INTEGER (0..MAX),
                        fractional-value INTEGER (0..MAX)
                      } OPTIONAL
                  }
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeISO8601String">
            <summary>
            Decodes ISO 8601 string, representing the value of TIME type.
            </summary>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.ValidateComponent(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Validates that the decoded number fits the range, specified by lower and upper bounds.
            </summary>
            <param name="value">The the value to check.</param>
            <param name="lb">The lower bound.</param>
            <param name="ub">The upper bound</param>
            <param name="id">The name that identifies the component.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the number decoded does not fit the range</exception>
        </member>
        <member name="F:Oss.Asn1.Internal.OerStreamDecoder.OctetBuffer">
            <summary>
            Internal decoder buffer
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.OerStreamDecoder._codingContained">
            <summary>
            Indicates that the decoder was invoked to decode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.OerStreamDecoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated after the decoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.OerStreamDecoder.Options">
            <summary>
            OER decoder options
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.#ctor(Oss.Asn1.BaseDecoderOptions,System.Boolean)">
            <summary>
            Initializes the decoder object
            </summary>
            <param name="options">Initial options</param>
            <param name="is_canonical">Selects between canonical and basic decoder.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodePdu(System.IO.Stream,Oss.Asn1.BasePdu)">
            <summary>
            Decode a PDU from OER
            </summary>
            <param name="stream">Input stream</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodePdu(System.Byte[],System.Int32,Oss.Asn1.BasePdu)">
            <summary>
            Decode a PDU from OER
            </summary>
            <param name="buffer">Input buffer</param>
            <param name="index">Buffer position</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeType(Oss.Asn1.BaseType)">
            <summary>
            Decodes generic type from OER
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.GetByte">
            <summary>
            Low level access to read a raw byte from the current position of the decoder buffer
            </summary>
            <returns>Byte read</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.GetOctet">
            <summary>
            Low level access to read a raw byte from the current position of the decoder buffer
            </summary>
            <returns>Byte read</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.GetOctets(System.Int32)">
            <summary>
            Low level access to read raw bytes from the current position of the decoder buffer
            </summary>
            <param name="count">Count of bytes to read</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.GetOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Low level access to read raw bytes from the current position of the decoder buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="offset">Destination buffer ofset</param>
            <param name="count">Count of bytes to read</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.GetOctets(System.Byte[],System.Int32)">
            <summary>
            Low level access to read raw bytes from the current position of the decoder buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="count">Count of bytes to read</param>
        </member>
        <member name="P:Oss.Asn1.Internal.OerStreamDecoder.Position">
            <summary>
            Current stream position
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeSignedInteger1">
            <summary>
            Decodes C# 1-byte signed int defined as constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeSignedInteger2">
            <summary>
            Decodes C# 2-byte signed int defined as constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUnsignedInteger2">
            <summary>
            Decodes C# 2-byte unsigned int defined as constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeInteger4">
            <summary>
            Decodes C# 4-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUnsignedInteger4">
            <summary>
            Decodes C# 4-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUnsignedInteger8">
            <summary>
            Decodes C# 8-byte unsigned long into constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeInteger8">
            <summary>
            Decodes C# 8-byte int (signed or unsigned) into constrained INTEGER SIZE(..). OER standard 10.3 (c), 10.4 (c)
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeSignedInt">
            <summary>
            Decodes INTEGER value into System.Int32 (up to 4 bytes)
            </summary>
            <returns>Decoded integer value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeSignedInt(System.Int32)">
            <summary>
            Decodes INTEGER value into System.Int32 (up to 4 bytes)
            </summary>
            <returns>Decoded integer value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUnsignedInt">
            <summary>
            Decodes INTEGER value into System.Int32 (up to 4 bytes)
            </summary>
            <returns>Decoded integer value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeSignedLong">
            <summary>
            Decodes INTEGER value into System.Int32 (up to 4 bytes)
            </summary>
            <returns>Decoded integer value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeSignedLong(System.Int32)">
            <summary>
            Decodes INTEGER value into System.Int32 (up to 4 bytes)
            </summary>
            <returns>Decoded integer value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUnsignedLong">
            <summary>
            Decodes INTEGER value into System.Int32 (up to 4 bytes)
            </summary>
            <returns>Decoded integer value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBigInt(System.Int32,System.Boolean)">
            <summary>
            Decodes the value of BigInteger when values are constrained to fit 1, 2, 4 or 8 octets.
            OER standard 10.3 (a-d), 10.4 (a-d)
            </summary>
            <param name="size">Specifies the width (1, 2, 4 or 8 octets).</param>
            <param name="is_unsigned">Indicates that the value was encoded as unsigned number.</param>
            <returns>Byte array representing the value of the BigInteger in the little-endian format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBigInt(System.Boolean)">
            <summary>
            Encodes the value of unconstrained BigInteger (L followed by one or more V octets); OER standard 10.3 e), 10.4 e).
            </summary>
            <param name="is_unsigned">Indicates that the value was encoded as unsigned number.</param>
            <returns>Byte array representing the value of the BigInteger in the little-endian format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeLength">
            <summary>
            Decodes Length
            </summary>
            <returns>Decoded length</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.SkipUnknownExtension">
            <summary>
            Skips over unknown (per compiled schema) extension
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.SkipUnknownExtensions(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Skips over unknown (per compiled schema) extension
            </summary>
            <param name="bitmap"></param>
            <param name="bitmapIndex"></param>
            <param name="bitmapLength"></param>
            <param name="known"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.CheckEnd(System.Int64,System.Int32)">
            <summary>
            Checks for the end of encoding
            </summary>
            <param name="begin"></param>
            <param name="length"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeString">
            <summary>
            Decodes 8-bit char string (e.g. IA5String, ISO646String, VisibleString, NumericString, PrintableString)  
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeString(System.Int32)">
            <summary>
            Decodes 8-bit char string constrained by SIZE(<c>bytes</c>) 
            (String can be IA5String, ISO646String, VisibleString, NumericString, PrintableString)  
            </summary>
            <param name="bytes">Octets to decode.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeString2">
            <summary>
            Decodes BMPString (two-byte chars)
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeString2(System.Int32)">
            <summary>
            Decodes BMPString (two-byte chars)
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeString4">
            <summary>
            Decodes UniversalString (four-byte wide chars)
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeString4(System.Int32)">
            <summary>
            Decodes UniversalString (four-byte wide chars)
            </summary>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeIntEnumerated">
            <summary>
            Decodes ENUMERATED  
            </summary>
            <returns>decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeLongEnumerated">
            <summary>
            Decodes ENUMERATED  
            </summary>
            <returns>decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDecimal">
            <summary>
            Decodes REAL into decimal 
            </summary>
            <returns>decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDecimalFromIEEE32">
            <summary>
            Decodes IEEE32 into C# decimal
            </summary>
            <returns>Decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDecimalFromIEEE64">
            <summary>
            Decodes IEEE64 into C# decimal
            </summary>
            <returns>Decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDouble">
            <summary>
            Decodes REAL into double 
            </summary>
            <returns>decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDoubleFromIEEE32">
            <summary>
            Decodes IEEE32 into C# double
            </summary>
            <returns>Decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDoubleFromIEEE64">
            <summary>
            Decodes IEEE64 into C# double
            </summary>
            <returns>Decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeTag">
            <summary>
            Decodes a Tag
            </summary>
            <returns>Decoded tag.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBool">
            <summary>
            Decodes a BOOLEAN value 
            </summary>
            <returns>Decoded boolean.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeOctetString">
            <summary>
            Decodes an OCTET STRING (no longer than 2^32)
            </summary>
            <returns>Decoded octet string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeOctetString(System.Int32)">
            <summary>
            Decodes OCTET STRING constrained by SIZE(<c>bytes</c>)
            </summary>
            <param name="bytes">number of bytes</param>
            <returns>Decoded octet string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBitString(System.Int32)">
            <summary>
            Decodes BIT STRING constrained by SIZE(<c>bits</c>)
            </summary>
            <param name="bits">number of bits</param>
            <returns>Decoded bit string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBitString">
            <summary>
            Decodes unconstrained BIT STRING 
            </summary>
            <returns>Decoded bit string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBitStringWithNamedBits(System.Int32)">
            <summary>
            Decodes BIT STRING with names bits constrained by SIZE(<c>bits</c>)
            </summary>
            <param name="bits">number of bits</param>
            <returns>Decoded bit string with named bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBitStringWithNamedBits">
            <summary>
            Decodes variable size BIT STRING with named bits
            </summary>
            <returns>Decoded bit string with named bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBitStringWithNamedBits(System.Int32[])">
            <summary>
            Decodes variable size constrained BIT STRING with named bits
            </summary>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded bit string with named bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBitmap(System.Int32@,System.Int32)">
            <summary>
            Decodes OER bitmap
            </summary>
            <param name="bitmapIndex">Octet index</param>
            <param name="octlen">Length in octets</param>
            <returns>Decoded bitmap</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUtf8String">
            <summary>
            Decodes UTF8String 
            </summary>
            <returns>Decoded string.</returns>
            
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUTF8String4">
            <summary>
            Decode UTF8 string represented as Universal String.
            </summary>
            <returns>Decoded UTF8 encoding converted in UCS-4 string representation.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeOIDContent">
            <summary>
            Reads and validates the data corresponding to OBJECT IDENTIFIER or RELATIVE-OID
            </summary>
            <returns>buffer containing an encoded OBJECT IDENTIFIER or RELATIVE-OID</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes OBJECT IDENTIFIER
            </summary>
            <returns>Object identifier object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeRelativeOid">
            <summary>
            Decodes RELATIVE-OID
            </summary>
            <returns>RelativeOid object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeUTCTime">
            <summary>
            Decodes UTCTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded UTCTime object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeGeneralizedTime">
            <summary>
            Decodes GeneralizedTime according to X.690-200811 clause 8.25.
            </summary>
            <returns>Decoded GeneralizedTime object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeOpenType(Oss.Asn1.BasePdu)">
            <summary>
            Decodes the value of open type.
            </summary>
            <param name="pdu">Blank instance of type, carried by this open type</param>
            <returns>Thr decoded value of open type.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeDeferredComponent``1">
            <summary>
            Decodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The decoded deferred component object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBSCC``1(System.Int32)">
            <summary>
            Decodes the BIT STRING of fixed size with the content constraint
            </summary>
            <typeparam name="T">specifies the containrd type</typeparam>
            <param name="length">specifies the fixed length</param>
            <returns>the decoded BIT STRING</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBSCC``1">
            <summary>
            Decodes the BIT STRING with the content constraint
            </summary>
            <typeparam name="T">specifies the containrd type</typeparam>
            <returns>the decoded BIT STRING</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeOSCC``1(System.Int32)">
            <summary>
            Decodes the OCTET STRING of fixed size with the content constraint
            </summary>
            <typeparam name="T">specifies the containrd type</typeparam>
            <param name="length">specifies the fixed length</param>
            <returns>the decoded OCTET STRING</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeOSCC``1">
            <summary>
            Decodes the OCTET STRING with the content constraint
            </summary>
            <typeparam name="T">specifies the containrd type</typeparam>
            <returns>the decoded OCTET STRING</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeBSCCPdu``1(Oss.Asn1.BitString)">
            <summary>
            Decodes the PDU contained in the BIT STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.DecodeOSCCPdu``1(System.Byte[])">
            <summary>
            Decodes the PDU contained in the OCTET STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.OerStreamDecoder._recursionDepth">
            <summary>
            Tracks the depth of recursive calls.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.OerStreamDecoder.Depth">
            <summary>
            This property is for the internal use only and should not be utilized by the
            application code. It reflects the current depth of recursion when decoding
            values of types with circular definitions. The property is also used to pass
            the current depth of recursion to the child coder when circular definition
            includes OCTET STRING or BIT STRING with the content constraint.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.EnterRecursive">
            <summary>
            Informs the decoder that it enters the next level of
            recursion when decoding the value of type with the circular
            definition.
            <exception cref="T:System.InvalidOperationException">
            If the recursion depth exceeds the limit, specified by the
            RecursionLimit option.
            </exception>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OerStreamDecoder.LeaveRecursive">
            <summary>
            Informs the decoder that the innermost recursive invocation
            is completed.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CoerArrayEncoder">
            <summary>
            Internal base class for COER encoders that operate on memory buffer.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding">
            <summary>
            Auxiliary class used for organization of temporary storage for already encoded
            message parts.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding">
            <summary>
            Stores encoding of one SET OF element.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding.Length">
            <summary>
            Length of the encoding of a SET OF element.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding.Offset">
            <summary>
            Offset of the beginning of the encoding of a SET OF element
            in the encoding buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding.Buffer">
            <summary>
            The encoding buffer where the encoding of a SET OF element
            is stored. Encodings for several elements can be stored
            in the same buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding.Set(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes this ElementEncoding object.
            </summary>
            <param name="length">Length of the encoding of a SET OF element.</param>
            <param name="offset">Offset of the beginning of the encoding of a SET OF element
            in the encoding buffer.</param>
            <param name="buffer">The encoding buffer where the encoding of a SET OF element
            is stored.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding.Compare(Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding@)">
            <summary>
            Compares this ElementEncoding with another ElementEncoding according
            to the octet strings order specified in X.690-200811 11.6.
            </summary>
            <param name="other">A reference to an ElementEncoding object.</param>
            <returns>-1 if the first byte that does not match has a lower value in this than in other;
            0 if the contents of both ElementEncoding are equal;
            1 if the first byte that does not match has a greater value in this than in other.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.OrderIndices">
            <summary>
            The array of ElementEncodings indices to allow
            access to encodings of SET OF elements in their COER order.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncodings">
            <summary>
            The array of ElementEncodings to store
            encodings of SET OF elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.Count">
            <summary>
            The current number of stored encodings of SET OF elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.PreviousIndex">
            <summary>
            The OerArrayEncoder.Index value saved at the
            previous call of OerArrayEncoder.AddElementEncoding().
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.#ctor(System.Int32)">
            <summary>
            Constructor that creates a SetOfEncoding object for the given
            number of SET OF elments.
            </summary>
            <param name="capacity">The number of SET OF element which will be stored
            in the constructed SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.GreaterX(System.Int32,System.Int32)">
            <summary>
            Compares OrderIndices[a]-th and x-th elements of ElementEncodings.
            </summary>
            <param name="a">An index in OrderIndices.</param>
            <param name="x">An index in ElementEncodings.</param>
            <returns>true if ElementEncodings[OrderIndices[a]] is greater than ElementEncodings[x],
            false otherwise.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.RebuildEncodingsOrder">
            <summary>
            Rebuilds the order of encodings of SET OF elements after addition of a new element encoding.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.CoerArrayEncoder.Options">
            <summary>
            COER-specific encoder options
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.#ctor(Oss.Asn1.CoerEncoderOptions)">
            <summary>
            Initializes Encoder with options
            </summary>
            <param name="options">Initial options</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encode a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="stream">Output stream</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Byte[],System.Int32)">
            <summary>
            Encode a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="buffer">Output buffer</param>
            <param name="index">Buffer position</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encode a PDU
            </summary>
            <param name="pdu">Input PDU</param>
            <returns>Output buffer</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodeType(Oss.Asn1.BaseType)">
            <summary>
            Encodes any BaseType representation that implements EncodeCoer() method 
            </summary>
            <param name="type">BaseType object</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes the value of open type.
            </summary>
            <param name="ot">The value to encode</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodeOctetString(Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding.ElementEncoding@)">
            <summary>
            Encodes an ElementEncoding object as OCTET STRING
            (puts the encoding from ElementEncoding to the resulting encoding).
            </summary>
            <param name="ee">A reference to an ElementEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.AddElementEncoding(Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding)">
            <summary>
            Cuts the encoding of a SET OF element from the current encoding and
            adds it to the given SetOfEncoding object.
            </summary>
            <param name="sofe">A reference of a SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.CopyEncoding(Oss.Asn1.Internal.CoerArrayEncoder,Oss.Asn1.Internal.CoerArrayEncoder.SetOfEncoding)">
            <summary>
            Copies the encoding of all SET OF elements from a source
            SetOfEncoding object to the target encoding in the
            given CoerArrayEncoder.
            </summary>
            <param name="dst">The destination CoerArrayEncoder object.</param>
            <param name="sofe">The source SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodeBitStringCanonical(Oss.Asn1.BitStringWithNamedBits,System.Int32)">
            <summary>
            Encodes BitStringWithNamedBits according to X.696 (08/2014) clause 13.3 and 31.6.
            </summary>
            <param name="value">BitStringWithNamedBits to encode.</param>
            <param name="lower_bound">Lower bound of the effective size constraint.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes GeneralizedTime according to X.690-200811 clause 8.25 and 11.7.
            </summary>
            <param name="value">GeneralizedTime to encode.</param>
            <returns>Encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes UTCTime according to X.690-200811 clause 8.25 and 11.8.
            </summary>
            <param name="value">UTCTime to encode.</param>
            <returns>The encoding length in octets.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CoerArrayEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.OidUtils">
            <summary>
            Provides additional utility methods for ObjectIdentifier and RelativeOid classes.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.CreateObjectIdentifier(System.Byte[])">
            <summary>
            Creates a new ObjectIdentifier instance with already encoded data.
            </summary>
            <param name="data">Byte array with encoded data</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.CreateRelativeOid(System.Byte[])">
            <summary>
            Creates a new RelativeOid instance with already encoded data.
            </summary>
            <param name="data">Byte array with encoded data</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ParseOid(System.String,System.Boolean)">
            <summary>
            Converts the the list of arcs separated by '.' or ' ' into
            the encoded representation of OBJECT IDENTIFIER. The format of the
            encoded representation is specified by clauses 8.19 and 8.20 of
            X.690.
            </summary>
            <param name="value">The string containing the list of arcs.</param>
            <param name="relative">'true' means that the list of arcs represents
            the value of RELATIVE-OID rather than the value of OBJECT IDENTIFIER.</param>
            <returns>The encoded form of the value of OBJECT IDENTIFIER or RELATIVE-OID</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.OidUtils.bitsPerDigit">
            <summary>
            log2(10) scaled by 2^10 and rounded up (to avoid underallocation).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ComputeEncodedLength(System.Int64[],System.Int32[])">
            <summary>
            Computes the number of bytes that is needed to store the
            encoded representation of the value of OBJECT IDENTIFIER or
            RELATIVE-OID.
            </summary>
            <param name="arcs">The list of arcs.</param>
            <param name="hugearcs">Magnitudes of huge arcs (if any)</param>
            <returns>The computed size of the encoded representation in bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ParseArcs(System.String,System.Int32,System.Int32,System.Boolean,System.Int64[],System.Int32[])">
            <summary>
            Parses the substring of the 'value' containing the list of arcs and saves their
            values into the temporary storage. The substring is delimited by the 'beg' and 'end'
            positions. The method expects that the validity of the syntax has been already verified
            by the previous invocation of the ComputeStorageSize().
            </summary>
            <param name="value">The string to parse</param>
            <param name="beg">Start position of the substring</param>
            <param name="end">End position of the substring (exclusive)</param>
            <param name="relative">Indicates that arcs represent
            the RELATIVE-OID rather than the OBJECT IDENTIFIER</param>
            <param name="arcs">The storage for arcs</param>
            <param name="hugearcs">The storage for magnitudes of huge arcs</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ComputeArcStorageSize(System.String,System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Examines the substring of the 'value' containing the list of arcs, validates its syntax and computes
            the size of temporary storage to store the values of individual arcs. The substring to examine is
            delimited by the 'beg' and 'end' positions.
            </summary>
            <param name="value">The string to examine</param>
            <param name="beg">Start position of the substring</param>
            <param name="end">End position of the substring (exclusive)</param>
            <param name="relative">Indicates that arcs represent
            the RELATIVE-OID rather than the OBJECT IDENTIFIER</param>
            <param name="arc_count">Total number of arcs in the list</param>
            <param name="ext_count">Size of storage (in 32-bit words) that is neede to store
            magnitudes of huge arcs (that do not fit 'long')</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.EncodeArc(System.Int32[],System.Int32,System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Converts huge arc to the encoded representation and saves it to the buffer.
            </summary>
            <param name="value">The storage containing the magnituge of the arc.</param>
            <param name="vbeg">The start position of the magnitude.</param>
            <param name="vend">The end position of the magnitude (exclusive).</param>
            <param name="encoded">The buffer where the encoded representation is saved.</param>
            <param name="pos">The current position in the buffer (updated on exit).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.EncodeArc(System.Int64,System.Byte[],System.Int32@)">
            <summary>
            Converts arc which value fits 'long' to the encoded representation and saves 
            it to the buffer.
            </summary>
            <param name="value">The value of the arc.</param>
            <param name="encoded">The buffer where the encoded representation is saved.</param>
            <param name="pos">The current position in the buffer (updated on exit).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.NumBytes(System.Int32)">
            <summary>
            Computes the number of bytes needed to store the 'numbits'
            bits of data, assuming that only 7 rightmost bits of each
            byte are used for storage. 
            </summary>
            <param name="numbits">The number of bits</param>
            <returns>The number of bytes that is needed to store the 
            'numbits' bits of data.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.NumBits(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Computes the number of significant bits in the magnitude. Leftmost
            zero bits are not included in the count.
            </summary>
            <param name="magnitude">The storage containing the magnitude</param>
            <param name="beg">The start position of the magnitude</param>
            <param name="len">The length of the magnitude</param>
            <returns>The number of significant bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.NumBits(System.Int64)">
            <summary>
            Computes the number of significant bits in the 64-bit word. Leftmost
            zero bits are not included in the count.
            </summary>
            <param name="value">The value to count the significant bits</param>
            <returns>The number of significant bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.NumBits(System.Int32)">
            <summary>
            Computes the number of significant bits in the 32-bit word. Leftmost
            zero bits are not included in the count.
            </summary>
            <param name="value">The value to count the significant bits</param>
            <returns>The number of significant bits</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.OidUtils.MASK">
            <summary>
            The mask to extract 28 rightmost bits from the number.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.Add(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the specified number to the magnitude.
            </summary>
            <param name="magnitude">The storage containing the magnitude</param>
            <param name="mbeg">The start position of the magnitude</param>
            <param name="mlen">The length of the magnitude</param>
            <param name="digits">The number to add</param>
            <returns>On overflow, returns non-zero carry bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.Update(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the magnitude by merging the next group of decimal digits.
            </summary>
            <param name="magnitude">The storage containing the magnitude</param>
            <param name="mbeg">The start position of the magnitude</param>
            <param name="mlen">The length of the magnitude</param>
            <param name="digits">The number representing decimal digits to merge</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ParseBigInt(System.String,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Parses the big integer, contained in the substring of 'value', and stores its
            magnitude into the int[] buffer. The substring is delimited by the 'beg' and
            'end' positions.
            </summary>
            <param name="value">The string to parse</param>
            <param name="beg">Start position of the substring</param>
            <param name="end">End position of the substring (exclusive)</param>
            <param name="magnitude">The buffer to save the magnitude</param>
            <param name="mbeg">The offset in the buffer</param>
            <param name="mlen">The number of words available for storage</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ParseLong(System.String,System.Int32,System.Int32)">
            <summary>
            Parses the integer, contained in the substring of 'value'. The substring is 
            delimited by the 'beg' and 'end' positions.
            </summary>
            <param name="value">The string to parse</param>
            <param name="start">Start position of the substring</param>
            <param name="end">End position of the substring (exclusive)</param>
            <returns>The parsed value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.EncodedOidToString(System.Byte[],System.Boolean,System.Char)">
            <summary>
            Converts an encoded representation of an OBJECT IDENTIFIER value to the string.
            </summary>
            <param name="value">The value to be printed.</param>
            <param name="relative">Indicates whether the value represents a RELATIVE-OID.</param>
            <param name="sep">The separator char to be used between arcs (usually space or dot).</param>
            <returns>the string representing the value of OBJECT IDENTIFIER (e.g., "1.2.3").</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.PrintEncodedOid(System.IO.TextWriter,System.Byte[],System.Boolean,System.Char,System.Int32)">
            <summary>
            Prints an encoded representation of an OBJECT IDENTIFIER value.
            </summary>
            <param name="dest">The TextWriter object in which the text representation is written.</param>
            <param name="value">The value to be printed.</param>
            <param name="relative">Indicates whether the value represents a RELATIVE-OID.</param>
            <param name="sep">The separator char to be used between arcs (usually space or dot).</param>
            <param name="chop">The maximum numbers of characters to be printed.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ArcToString(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Char)">
            <summary>
            Converts encoded arc of an OBJECT IDENTIFIER to the string.
            </summary>
            <param name="buffer">The buffer containing the encoded arc to convert.</param>
            <param name="beg">Specifies the offset of first octet representing the encoded arc.</param>
            <param name="end">Points past the last octet representing the encoded arc.</param>
            <param name="packed">Indicates that the encoded arc represents two first arcs, packed
                                 as 40*X + Y.</param>
            <param name="separator">The separator char to be used between arcs (usually space or dot).
                                    This parameter has no effect if the 'packed' parameter is false.</param>
            <returns>The string representing the encoded arc.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.ArcToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the binary number to the String. The binary number is represented by octets in the buffer 
            starting from 'beg' and upto but not including the 'end'. Only 7 least significant bits are taken 
            into account. The conversion overwrites the 'beg'..'end'-1 portion of the buffer.
            </summary>
            <param name="buffer">The buffer containing the binary number to convert.</param>
            <param name="beg">Specifies the offset of first octet representing the binary number.</param>
            <param name="end">Points past the last octet representing the binary number.</param>
            <returns>The string representing the binary number.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.OidUtils.Divide(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Divides binary number, represented by octets in the buffer starting from 'beg' and upto but not
            including the 'end'. Only 7 least significant bits are taken into account. The quotient overwrites
            the 'beg'..'end'-1 portion of the buffer.
            </summary>
            <param name="buffer">The buffer containing the divident.</param>
            <param name="beg">Specifies the offset of first octet representing the binary number.</param>
            <param name="end">Points past the last octet representing the binary number.</param>
            <param name="divisor">Specifies the divisor.</param>
            <returns>The remainder.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.Asn1DateTimeUtil">
            <summary>
            Utility class provides parse and format methods for 
            ASN.1 GeneralizedTime and UTCTime strings and types.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.Asn1DateTimeUtil.T_DIGIT">
            <summary>
            Token for digit like 0, 1, 2 .. 9, recognaized by the ASN.1 GeneralizedTrime
            and UTC Time parser.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.Asn1DateTimeUtil.T_SIGN">
            <summary>
            Token for sign like '+' or '-', recognaized by the ASN.1 GeneralizedTrime
            and UTC Time parser.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.Asn1DateTimeUtil.T_DELIMITER">
            <summary>
            Token for delimiter like ',' or '.', recognaized by the ASN.1 GeneralizedTrime
            and UTC Time parser.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.Asn1DateTimeUtil.T_Z">
            <summary>
            Token for 'Z' char that identifies UTC time, recognaized by the ASN.1 GeneralizedTrime
            and UTC Time parser.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.Asn1DateTimeUtil.T_EOL">
            <summary>
            Token for End Of Line, recognaized by the ASN.1 GeneralizedTrime
            and UTC Time parser.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.Asn1DateTimeUtil.T_UNKNOWN">
            <summary>
            Unknown token, recognaized by the ASN.1 GeneralizedTrime
            and UTC Time parser.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.nextToken(System.String,System.Int32)">
            <summary>
            This helper method identifies next token in character string
            represents GenralizedTime or UTCTime.
            </summary>
            <param name="str">Character string to check.</param>
            <param name="pos">Position of token.</param>
            <returns>Token type at the specified position.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.readNumber(System.String,System.Int32,System.Int32)">
            <summary>
            Reads a number from the string. This method tries to read the
            <c>width</c> digits from the string starting at position 
            <c>pos</c>. If it encounters any non-numeric character or
            reaches unexpected end of string, a <c>FormatException</c>
            exception is thrown.
            </summary>
            <param name="str">String to read from.</param>
            <param name="pos">Position to start read.</param>
            <param name="width">Number of characters to read.</param>
            <returns>Converted integer value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.appendTimeOffset(System.TimeSpan,System.Text.StringBuilder)">
            <summary>
            Helper method to add passed TimeSpan with passed StringBuilder into
            constructed string.
            Format of appended string: {+/-}{HHmm}
            </summary>
            <param name="offset">TimeSpan object to be formatted.</param>
            <param name="sb">String builder to format the string.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.readTimeOffset(System.String,System.Int32@,System.Boolean)">
            <summary>
            Reads UTC offset from formatted string and creates corresponded TimeSpan value.
            Input string format: {+/-}HH[mm]
            Minutes component may be omittied for GeneralizedTime (isUtcTime == false) and
            must be present for UTCTime formatted string (isUtcTime == true).
            </summary>
            <param name="str">Formatted string.</param>
            <param name="pos">Position.</param>
            <param name="isUtcTime">bool flag indicates that input string is UTCTime formatted.</param>
            <returns>TimeSpan object converted from formatted string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.ToGeneralizedTimeString(System.DateTime,System.TimeSpan,System.Boolean)">
            <summary>
            This method converts passed DateTime and TimeSpan structures into formatted
            GeneralizedTime string.
            Returned GeneralizedTime string format:
            
                YYYYMMDDHHMMSS[.FFF]+hhmm
                YYYYMMDDHHMMSS[.FFF]-hhmm
                YYYYMMDDHHMMSS[.FFF]
                YYYYMMDDHHMMSS[.FFF]Z (if isUTC is true)
            </summary>
            <param name="dateTime">DateTime to convert.</param>
            <param name="timeSpan">TimeSpan to convert.</param>
            <param name="isUTC">Flag indicates if string should represent UTC time.</param>
            <returns>Formatted GeneralizedTime string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.fromGeneralizedTimeString(System.String,System.DateTime@,System.TimeSpan@,System.Boolean@)">
            <summary>
            This method converts string representation of ASN.1 GeneralizedTime into
            DateTime and TimeSpan values and isUTC boolean flag.
            String representation must be in the following forms:
            
                YYYYMMDDHHMMSS[.FFF]+hhmm
                YYYYMMDDHHMMSS[.FFF]-hhmm
                YYYYMMDDHHMMSS[.FFF]
                YYYYMMDDHHMMSS[.FFF]Z (isUTC set to true)
            
            Additionally, the parser recognizes the following forms for the 'time of day' 
            (the HHMMSS[.FFF] part) that are allowed by the ISO X.680
                HH[.FFF]  - fractions of hour
                HHMM[.FFF] - fractions of minute
                HHMMSS[.FFF] - fractions of second
            
            Fractional part precision is 1 tick = 100 nanosecond = 0.0000001 second
            If fractional part of string representation contains more digits then 
            allowed by specified precision then these digits will be ignored.
            
            This method throws Asn1TimeFormatException if passed string does not confirm to
            the specified format.
            </summary>
            <param name="str">String to parse.</param>
            <param name="dateTime">Reference to output DateTime.</param>
            <param name="timeSpan">Reference to output TimeSpan.</param>
            <param name="isUTC">Reference to output isUTC boolean flag.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.ToUtcTimeString(System.DateTime,System.TimeSpan)">
            <summary>
            This method converts passed DateTime and TimeSpan structures into formatted
            UTCTime string.
            Returned UTCTime string format:
            
                YYMMDDhhmm[ss]+hhmm
                YYMMDDhhmm[ss]-hhmm
                YYMMDDhhmm[ss]Z
            </summary>
            <param name="dateTime">DateTime to convert.</param>
            <param name="timeSpan">TimeSpan to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.fromUtcTimeString(System.String,System.DateTime@,System.TimeSpan@)">
            <summary>
            This method converts string representation of ASN.1 UTCTime into
            DateTime and TimeSpan values.
            String representation must be in the following forms:
                YYMMDDhhmm[ss]Z
                YYMMDDhhmm[ss]+hhmm
                YYMMDDhhmm[ss]-hhmm
            YY - converted into 4-digit year using Calendar of invariant culture.
            
            This method throws Asn1TimeFormatException if passed string does not confirm to
            the specified format.
            </summary>
            <param name="str">String representation of UTCTime.</param>
            <param name="dateTime">Converted DateTime reference.</param>
            <param name="timeSpan">Converted TimeSpan reference.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Asn1DateTimeUtil.ToUniversalTime(System.DateTime,System.TimeSpan)">
            <summary>
            Convert DateTime and TimeSpan to universal time represented using DateTimeOffset object.
            Implemented to overcome the restriction of the DateTimeOffset type for time offset range
            (-14:00 through +14:00).
            </summary>
            <param name="dateTime">DateTime value.</param>
            <param name="timeSpan">TimeSpan value.</param>
            <returns>DateTimeOffset value.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ISO8601Utils">
            <summary>
            Defines utilities to parse and format ISO 8601 date/time values.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ISO8601Utils.Duration">
            <summary>
            ISO 8601 duration 
            </summary>
            <param name="years"></param>
            <param name="weeks"></param>
            <param name="months"></param>
            <param name="days"></param>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <param name="fraction"></param>
            <param name="frdigits"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.ISO8601Utils.nextDurationToken(System.String,System.Int32,System.Int32)">
            <summary>
            Tells the type of the token that starts at position 'pos'> in
            the buffer. 
            This method recognizes the following tokens:
            T_NUMBER - a number like 12345.
            T_YMDHS  - character 'YMDHS' designators used for years, 
                       months, days, hours, minutes and seconds.
            T_W      - character 'W' (designator for weeks). 
            T_DOT    - '.' or ',' (used to specify the fractional portion).
            T_EOF    - indicates that the 'pos' refers to the position 
                       outside the string bounds.
            For any other token, the method returns the T_UNKNOWN. 
            </summary>
            <param name="str">String that contains the value being parsed</param>
            <param name="pos">Starting position for the token</param>
            <param name="length">The length of the string</param>
            <returns>Type of token at specified position</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ISO8601Utils.ParseDuration(System.String,Oss.Asn1.Internal.ISO8601Utils.Duration)">
            <summary>
            Represents DURATION-INTERVAL encoding kind
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="duration">The ISO 8601 duration data</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ISO8601Utils.FormatDuration(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Formats the value of Duration.
            </summary>
            <param name="years">The number of years</param>
            <param name="weeks">The number of weeks</param>
            <param name="months">The number of months</param>
            <param name="days">The number of days</param>
            <param name="hours">The number of hours</param>
            <param name="minutes">The number of minutes</param>
            <param name="seconds">The number of seconds</param>
            <param name="fraction">The fractional part </param>
            <param name="frdigits">The number of digits in the fractional part</param>
            <returns>The string containing the value in the ISO 8601 format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ISO8601Utils.ToCanonicalISO8601String(System.String)">
            <summary>
            Reformats ISO 8601 string to make it canonic.
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>The canonic version of the input ISO 8601 string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ISO8601Utils.FormatCanonicalTimeInstant(System.String)">
            <summary>
            Strips zero minutes from time differential.
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>The corrected version of the input ISO 8601 string containing time instant.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.Comparer">
            <summary>
            Helper class that implements value comparison for ASN.1 types
            represented by standard reference-compared classes.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.CompareSeqOf``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Compares two Lists (SEQUENCEs OF) of value-compared types.
            </summary>
            <param name="list1">The first compared object.</param>
            <param name="list2">The second compared object.</param>
            <returns>True if the Lists are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.CompareSeqOf2``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}},System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            <summary>
            Used with COMPAT_161.
            Compares two Lists (SEQUENCEs OF SEQUENCEs OF) of value-compared types.
            </summary>
            <param name="list1">The first compared object.</param>
            <param name="list2">The second compared object.</param>
            <returns>True if the Lists are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.CompareSeqOfArrays``1(System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]})">
            <summary>
            Compares two Lists (SEQUENCEs OF) of arrays.
            </summary>
            <param name="list1">The first compared object.</param>
            <param name="list2">The second compared object.</param>
            <returns>True if the Lists are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.CompareArrays``1(``0[],``0[])">
            <summary>
            Compares two arrays.
            </summary>
            <param name="arr1">The first compared object.</param>
            <param name="arr2">The second compared object.</param>
            <returns>True if the Lists are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.HashSeqOf``1(System.Collections.Generic.List{``0})">
            <summary>
            Computes the hash code of a List (SEQUENCE OF) of value-compared types.
            </summary>
            <param name="list">The hashed object.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.HashSeqOf2``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            <summary>
            Used with COMPAT_161.
            Computes the hash code of a SEQUENCE OF SEQUENCEs OF of value-compared types.
            </summary>
            <param name="list">The hashed object.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.HashSeqOfArrays``1(System.Collections.Generic.List{``0[]})">
            <summary>
            Computes the hash code of a List (SEQUENCE OF) of arrays.
            </summary>
            <param name="list">The hashed object.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.HashArray``1(``0[])">
            <summary>
            Computes the hash code of an array.
            </summary>
            <param name="arr">The hashed object.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.TimeCompare(System.String,System.String)">
            <summary>
            Compares two time values.
            </summary>
            <param name="val1">String representation of first time value.</param>
            <param name="val2">String representation of second time value.</param>
            <returns>Negative value if first time is earlier, zero for equal times,
            and positive value if first time is later.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Comparer.RecurrenceCompare(System.String,System.Int32)">
            <summary>
            Compares recurrence values.
            </summary>
            <param name="val">String representation first recurrence value.</param>
            <param name="rec">Int representation of second recurrence value.</param>
            <returns>Negative value if first value is smaller, zero for equal,
            and positive if bigger.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ExceptionDescriptor">
            <summary>
            Base class for exception descriptors.
            Consists of static members, containing standard
            error messages for different cases.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor.Message">
            <summary>
            Error message. Contains description of the error.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor.Code">
            <summary>
            Four-digit code of the error.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExceptionDescriptor.#ctor(System.Int32,System.String)">
            <summary>
            Initializes new instance with given error message and error code.
            </summary>
            <param name="code">Four-digit code of the error.</param>
            <param name="message">Description of the error.</param>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._small_buffer">
            <summary>
            The user provided a pre-allocated output buffer, but the memory block passed was
            too small to contain the entire encoded PDU.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._bad_choice">
            <summary>
            The value of the choice field of a PDU generated to represent a CHOICE type
            was found to be larger than the maximum allowed selector value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._bad_pointer">
            <summary>
            The encoder/decoder encountered unexpected null reference in input data
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._time_out_of_range">
            <summary>
            The encoder/decoder encountered a time value in which one or more components
            have values that lie outside the allowed range.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._tag_long_nec">
            <summary>
            (BER 6.2.4.2(c))
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._tag_too_long">
            <summary>
            Encoded tag does not fit uint.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._exp_long_nec">
            <summary>
            The exponent has nine leading 1's or 0's (10.5.4(d))
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._exp_too_long">
            <summary>
            The long exponent takes too many bytes to fit into a 'long int', or,
            after shifting to the right base, is too long to fit into an 'int'. The
            argument is the length if the former and 0 if the latter (change?)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._int_long_nec">
            <summary>
            At least 9 leading bits of an integer or an enumerated value's encoding 
            are all 0 or all 1 (BER 8.2 9.1 10.2)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._length_too_long">
            <summary>
             A length turns out to be too long to fit int.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._non_std_eoc">
            <summary>
            If a tag is 0, it is taken to be the EoC, which should be 16 bits of 0.
            If a tag is 0 and not is part of 16 bits of 0, maybe the tag was sent as
            in 6.2.4 (but this also violates 6.2.4.2(c)), or it is constructed, or the
            length is not 0, or is 0 in the long form. (BER 6.2.4 6.3.2(a) 6.5)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._inconsis_len">
            <summary>
            The lengths within an EXPLICIT-tagged type, both of definite length, not match: 
            the inner length is not the outer less the inner tag and length`s length
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._tag_mismatch">
            <summary>
            An octetstring (12.3.1 24.3) or bitstring (11.3.1) is broken
            up, and not all of the encodings that it is broken up into are
            octetstring or bitstring; the tag is not one awaited in a SEQUENCE
            (14.2), SEQUENCE OF (15.2), SET (16.2), SET OF (17.2), choice
            (18), or selection (19), or tag after an EXPLICIT tag (20.1)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._pdu_mismatch">
            <summary>
            The given PDU's tag is not that found in the input
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._extra_bits">
            <summary>
            The first content octet of a BIT STRING, specifying the number of unused
            bits in the last octet is either greater that 7 or unexpectedly greater
            than zero (it must be zero for an empty BIT STRING and for every fragment
            of the constructed encoding except the very last fragment).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._bit_str_comp">
            <summary>
            11.3.3 Each datum encoded in the contents bytes, with the exception of
            the last, shall consist of a number of bits which is a multiple of eight.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._inval_enc">
            <summary>
            A time is misencoded, a decimal real ends too early (is misencoded) (10.6),
            a null is not empty (13.2), a boolean has length other than 1 (7.1), an
            integer is empty (8.1), the length of an encoded object identifier (22)
            is not the sum of its lengths, to wit, the last byte has bit 8 set
            or the encoding of extension addition has inconsistent (shorter) length.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._no_dec_dig">
            <summary>
            No digit was found in a decimal real's fraction (mantissa)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._inval_nr1">
            <summary>
            An encoding of a REAL type that did not conform to the ISO 6093 NR1 form
            was found.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._inval_nr2">
            <summary>
            An encoding of a REAL type that did not conform to the ISO 6093 NR2 form
            was found.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._inval_nr3">
            <summary>
            An encoding of a REAL type that did not conform to the ISO 6093 NR3 form
            was found.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._real_long_zero">
            <summary>
            10.2 if the real value is the value zero, there shall be no
            contents bytes in the encoding.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._undef_enc">
            <summary>
            An encoding of a REAL type that uses an officially reserved encoding form
            was found.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._unknown_field">
            <summary>
            The chosen of a choice is none of those in the ASN definition for it
            (17.1), or a type in a set (16.2) or sequence (14.2) is not.  This error
            not arises if the type is marked "EXTENSIBLE"
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._field_repeat">
            <summary>
            Some type within a set has been found more than once (BER 16.2)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._field_omit">
            <summary>
            Some not optional type has been left out of a SEQUENCE or SET (BER 14.2 16.2)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._expec_eoc">
            <summary>
            The decoder expects EOC octets but they are not there.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._indef_len_prim">
            <summary>
            A primitive encoding may be of only definite length (BER 6.3.2(a))
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._expec_prim_fnd_constr">
            <summary>
            The decoder encountered the constructed encoding where the primitive encoding is
            expected (INTEGER, ENUMERATED, REAL, TIME types, etc.)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._cannot_happen">
            <summary>
            The decoder encountered an unhandled exception error.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._expect_tag">
            <summary>
            EOC unexpectedly occur where the tag is expected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._singleValue">
            <summary>
            An INTEGER or a REAL type with a single value constraint violation detected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._valueRange">
            <summary>
            An INTEGER or a REAL type with a value range constraint violation detected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint">
            <summary>
            The encoder/decoder was passed a value whose length exceeds the length expected
            for the particular ASN.1 type either because its definition dictates a shorter
            length or a size constraint was specified for the type.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._oPA_constraint">
            <summary>
            The encoder/decoder found that a permitted alphabet constraint was violated for
            a character string type.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._absence_constraint">
            <summary>
            Absence constraint is violated
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._presence_constraint">
            <summary>
            Presence constraint is violated
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._tableConstraint">
            <summary>
            Table constraint is violated
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._componentRelation">
            <summary>
            Component relation constraint is violated
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated">
            <summary>
            Invalid enumerated value 
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._neg_uinteger">
            <summary>
            The encoding contains negative integer while the representation supports
            only non-negative numbers (ulong).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._type_constraint">
            <summary>
            The validation fails for the imposed type constraint 
            </summary>
            Asn1ConstraintException
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._more_input">
            <summary>
            The decoder encountered the end of the input buffer before the PDU under process
            was fully decoded.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._zero_length_OpenType">
            <summary>
            The encoder/decoder has detected that octets, representing undecoded open type, are either missing
            or empty
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._real_too_large">
            <summary>
            Real value too large.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._missing_rules_opt">
            <summary>
            The encoder/decoder detected that the specified encoding rules were not 
            specified on the ASN.1 compiler command line when ASN.1-compiling the input syntax.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._UTF8_bad_conversion">
            <summary>
            The encoder/decoder could not find a valid UTF8String character to map on to when
            converting string to a UTF8String.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._UTF8_invalid_octet_sequence">
            <summary>
            The encoder/decoder found an invalid character in a UTF8String.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._field_removed">
            <summary>
            The encoding contains the field that has the Remove directive applied (non-fatal error).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._constraint_violated">
            <summary>
            Value does not satisfy its subtype constraints
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._expired">
            <summary>
            Software trial period expired.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._uae">
            <summary>
            Unrecoverable error
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._uae1">
            <summary>
            An invalid use of the OSS license file (ossinfo file) has been detected. Contact support@oss.com
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._int_len_too_long">
            <summary>
            An decoded integer value was found to be too big to fit into range of used type.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_start_tag_or_empty_tag_expected">
            <summary>
            Unexpected node where the empty-tag or a start tag is expected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_tags_mismatch">
            <summary>
            Unexpected end tag which name does not match the name of the corresponding start tag.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_end_tag_expected">
            <summary>
            Unexpected node where the end tag is expected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_item_mismatch">
            <summary>
            Unexpected start or end tag where the simple text content is expected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_bool">
            <summary>
            The value of BOOLEAN is neither 'true' nor 'false'.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_unknown_field">
            <summary>
            The name of the start tag of the component of SEQUENCE/SET/CHOICE does not match any
            field or alternative.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_not_named_value">
            <summary>
            The name of the empty-tag, representing the value of the ENUMERATED, does not match any
            enumerator.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_exp_name">
            <summary>
            Invalid character where the XML tag name is expected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_bad_tag">
            <summary>
            XML tag has invalid syntax.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_inv_name">
            <summary>
            The name of the XML tag contains invalid characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_element">
            <summary>
            The name of start tag of the element of a SET OF or SEQUENCE OF does not match
            element name or element type name.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_empty_tag_expected">
            <summary>
            Unexpected node where the empty-tag is expected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_escape_sequence">
            <summary>
            The invalid XML escape sequence is detected.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_num">
            <summary>
            The XML text does not contain a valid number.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_hex_digit">
            <summary>
            The xmlhstring includes invalid character that is neither whitespace nor
            0-9a-fA-F.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_bin_digit">
            <summary>
            The xmlbstring contains characters other than '0', '1' or the whitespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_oid">
            <summary>
            Invalid object identifier
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_undef_prefix">
            <summary>
            The Qname specifies the namespace prefix that has not been declared.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_boolean_value">
            <summary>
            The text specifying the value of BOOLEAN is not recognized.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_attr_repeated">
            <summary>
            Attribute in ABY-ATTRIBUTES field conflicts with some field with the ATTRIBUTE
            encoding instruction.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_unknown_attribute">
            <summary>
            The decoder has encountered an unknown attribute with the name that does not
            belong to the control namespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_alt_name">
            <summary>
            The restriction on the use of USE-UNION is violated.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_empty_enc">
            <summary>
            Invalid data consequent in the empty XML encoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_empty_list_enc">
            <summary>
            Invalid data consequent in the empty XML list element encoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_list_ws">
            <summary>
            The item in the [LIST] value contains whitespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_wrong_order">
            <summary>
            The [USE-ORDER] list contains invalid item.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_embed_size">
            <summary>
            The number of strings in the [EMBED-VALUES] list does not match the
            number of child elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_order_size">
            <summary>
            The number of items in the [USE-ORDER] list does not match the number of components
            of a SEQUENCE or SET.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_neg_zero_decimal">
            <summary>
            The REAL with the DECIMAL EI applied has the value of negative zero.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_inf_nan_decimal">
            <summary>
            The REAL with the DECIMAL EI applied has special REAL value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_txt_real_forbidden">
            <summary>
            The format of the exponent does not align with the current setting of the MODIFIED-ENCODINGS.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_dubl_val">
            <summary>
            The [USE-ORDER] list contains duplicate items. 
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_anyattr_wrong">
            <summary>
            The item in the [ANY-ATTRIBUTES] list does not conform the the format, specified
            by the clause 18.1 of X.693
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_name_expected">
            <summary>
            The value of the second component of the SEQUENCE with the USE-QNAME encoding instruction
            is not a valid XML name. 
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_whitespace">
            <summary>
            The value of the string with the WHITESPACE COLLAPSE EI applied has leading or
            trailing whitespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._zero_length_ContentsConst">
            <summary>
            Invalid representation of the encoded contanining value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._bad_pi_or_comment">
            <summary>
            The string specifying the value for the PI-OR-COMMENT EI has invalid syntax.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._not_implemented">
            <summary>
            The value contains the component which type is not supported by the
            codec yet.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._alternative_notfound">
            <summary>
            The E-XER decoder detected an erroneous element of [USE-UNION] CHOICE and 
            the element value fits none of the alternatives.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._null_component_element">
            <summary>
            Mandatory fields cannot be null
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._real_owf">
            <summary>
            The decoded REAL value does not fit the representation chosen.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._time_invalid_format">
            <summary>
            Time have invalid format.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._unimplemented_rules">
            <summary>
            Encoding rules used in contents constraints are not implemented.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._non_standard_rules">
            <summary>
            Non-standard encoding rules used in contents constraint.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._UTF16_invalid_character_sequence">
            <summary>
            The encoder/decoder found an invalid character in a UTF16String.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._UTF32_invalid_character">
            <summary>
            The encoder/decoder found an invalid character in a UNIVERSAL STRING (UTF32 encoding)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_unrecognized_escape">
            <summary>
            Unrecognized escape sequence was encountered in JSON encoding.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_unexpected_token">
            <summary>
            Unexpected JSON token in input.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_invalid_integer">
            <summary>
            Invalid integer number in input.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._integer_too_big">
            <summary>
            Integer number in too big to fit local representation.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._invalid_real">
            <summary>
            Invalid real number in input.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_odd_hstring">
            <summary>
            The hstring does not contain even number of characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_bad_hstring">
            <summary>
            The hstring contains invalid character.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_invalid_bit_string">
            <summary>
            Invalid BIT STRING encoding.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_bad_unwrapped_choice">
            <summary>
            The JSON value of the UNWRAPPED CHOICE does not match any alternative of this CHOICE.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_ambiguous_unwrapped_choice">
            <summary>
            The JSON value of the UNWRAPPED CHOICE is ambitious (matches multiple alternatives).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_invalid_octet_string">
            <summary>
            Invalid OCTET STRING encoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_unexpected_name">
            <summary>
            Unexpected name of the XML start tag or empty tag.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_invalid_hstring">
            <summary>
            The xmlhstring contains odd number of hexadecimal digits (X.680 clause 23.8)
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_list_control">
            <summary>
            The item in the [LIST] value contains control characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_attribute_control">
            <summary>
            The value with the [ATTRIBUTE] encoding instruction value contains control characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._xml_embed_values_control">
            <summary>
            One of elements of the EMBED-VALUES SEQUENCE OF contains control characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._cxer_unsuitable_xmlwriter">
            <summary>
            Settings of the passed XmlWriter object are unsuitable to encode with Canonical XER.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._ambiguous_pdu_tag">
            <summary>
            The PDU tag does not allow unambiguous identification of the PDU type.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._unknown_pdu">
            <summary>
            Tag that found in the input is not a PDU tag.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._per_pdu_identification_not_supported">
            <summary>
            The PDU type is not set and the PDU identification by PER encoding is impossible.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._oer_pdu_identification_not_supported">
            <summary>
            The PDU type is not set and the PDU identification by OER encoding is impossible.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._ber_pdu_identification_not_possible">
            <summary>
            The PDU type is not set and the PDU identification by BER/DER encoding is impossible.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._exer_pdu_identification_not_supported">
            <summary>
            The PDU type is not set and the PDU identification by EXER encoding is impossible.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExceptionDescriptor._json_pdu_identification_not_supported">
            <summary>
            The PDU type is not set and the PDU identification by EXER encoding is impossible.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.Details">
            <summary>
            This class defines helper methods to provide details
            about exceptions. Strings, returned by the methods of this
            class can be used without extra punctuation as the "suffix"
            parameter of the constructor of the corresponding Asn1Exception.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadCharacter(System.Int32)">
            <summary>
            Formats details about bad character. Useful for reporting
            permitted alphabet constraint violation errors.
            </summary>
            <param name="ch">Specifies bad character to report</param>
            <returns>The ", bad character = 'ch'" string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadIndex(System.Int32)">
            <summary>
            Formats details about bad index. Useful for reporting
            invalid encodings where the index to permitted alphabet
            is out of bounds.
            </summary>
            <param name="index">Specifies bad index to report</param>
            <returns>The ", bad index = 'index'" string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadLength(System.Int32)">
            <summary>
            Formats details about bad length. Useful for reporting
            invalid data where the length violates size constraint.
            </summary>
            <param name="length">Specifies bad length to report</param>
            <returns>The ", length of value = 'length'" string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.InvalidLength(System.Int64)">
            <summary>
            Format details about misencoded (wrong) length.
            </summary>
            <param name="length">Specifies bad length to report</param>
            <returns>The ", length = 'length'" string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.TooLong(System.Int64)">
            <summary>
            Format details about huge number, which length exceeds
            the capacity of the representation chosen.
            </summary>
            <param name="length">Specifies bad length to report</param>
            <returns>The ", length = 'length'" string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.ZeroLength">
            <summary>
            Format details about invalid zero length in the encoding .
            </summary>
            <returns>The ", length = 0" string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.FormatTag(System.UInt32)">
            <summary>
            Formats ASN.1 tag.
            </summary>
            <param name="tag">The tag to format.</param>
            <returns>The "['class' 'tag']'C|P' string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.FormatOerTag(System.Int32)">
            <summary>
            Formats ASN.1 OER tag.
            </summary>
            <param name="tag">The tag to format.</param>
            <returns>The "['class' 'tag'] string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadTag(System.UInt32)">
            <summary>
            Formats details about unexpected or mismatched tag.
            </summary>
            <param name="tag">The value of the unexpected tag.</param>
            <returns>The ", tag = 'tag'" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadOerTag(System.Int32)">
            <summary>
            Formats details about unexpected or mismatched OER tag.
            </summary>
            <param name="tag">The value of the unexpected tag.</param>
            <returns>The ", tag = 'tag'" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadTag(System.UInt32,System.UInt32)">
            <summary>
            Formats details about unexpected or mismatched tag.
            </summary>
            <param name="tag">The value of the unexpected tag.</param>
            <param name="expected">The expected value of the tag.</param>
            <returns>The ", tag = 'tag', expecting 'expected'" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadTag(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Formats details about unexpected or mismatched tag.
            </summary>
            <param name="tag">The value of the unexpected tag.</param>
            <param name="expected1">The expected value of the tag (first alternative).</param>
            <param name="expected2">The expected value of the tag (second alternative).</param>
            <returns>The ", tag = 'tag', expecting 'expected1' or 'expected2'" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadField(System.String)">
            <summary>
            Formats details about the problematic field
            </summary>
            <param name="name">The name of the field.</param>
            <returns>The ", field 'name'" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.AtPosition(System.Int32)">
            <summary>
            Formats details about the position in the string or buffer where an error was detected.
            </summary>
            <param name="pos">Specifies the position.</param>
            <returns>The "at position 'pos'" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadTime(System.String)">
            <summary>
            Format details about bad value of time types.
            </summary>
            <param name="value">The bad value.</param>
            <returns>The " 'value'" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.BadTime(System.String,System.String)">
            <summary>
            Format details about bad value of time types.
            </summary>
            <param name="value">The bad value.</param>
            <param name="type">Expected format, such as DATE, DATE-TIME, etc.</param>
            <returns>The " 'value' (type)" string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.InvalidOpenTypeFields">
            <summary>
            A message for the Encoded and Decoded fields of an Oss.Asn1.OpenType object cannot both be null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.InvalidBSCCFields">
            <summary>
            A message for the Encoded and Decoded fields of an Oss.Asn1.BitStringWithContentConstraint object cannot both be null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.InvalidOSCCFields">
            <summary>
            A message for the Encoded and Decoded fields of an Oss.Asn1.OctetStringWithContentConstraint object cannot both be null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.InvalidDeferredComponent">
            <summary>
            A message for the Encoded and Decoded fields of an Oss.Asn1.DeferredComponent object cannot both be null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.NegativeOidArc">
            <summary>
            A message for the OBJECT IDENTIFIER arcs cannot be negative
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.MissingEncodingRulesOption(System.String)">
            <summary>
            A message for a missing implementation of an encoding rule used within contents constraint 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.UnimplementedEncodingRules(System.String)">
            <summary>
            A message for unimplemented encoding rule
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.NonstandardEncodingRules">
            <summary>
            A message for encountering non-standard encoding rule
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.OidArcOverflow(System.Int32)">
            <summary>
            A message for OID arcs value bigger than a long. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.IllegalFractionalBits(System.Int32,System.String)">
            <summary>
            A message for the invalid BIT STRING with the content constraint when the encoding rules,
            specified by ENCOED BY, require that the content must contain the whole number of octets
            but the length of the BIT STRING is not a multiple of 8 bits.
            </summary>
            <param name="length">specifies the invalid length</param>
            <param name="rules">specified the 'ENCODED BY' encoding rules</param>
            <returns>the text of the message</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.UseOrderSizeViolated(System.Int32)">
            <summary>
            A message for the violated size constraint in the [USE-ORDER] SEQUENCE OF.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.SomeName(System.String)">
            <summary>
            For error messages clarified by a name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.AmbiguousPdu(System.UInt32,System.String)">
            <summary>
            Ambiguous PDU in the BER tag decoder.
            </summary>
            <param name="tag">The value of the tag.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.Details.AmbiguousPdu(System.String,System.String)">
            <summary>
            Ambiguous PDU in the BER tag decoder.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Oss.Asn1.Internal.Utils">
            <summary>
            This class defines helper methods to throw exceptions.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.Utils.RaiseFieldRemovedError(System.String)">
            <summary>
            Throws the _field_removed exception.
            </summary>
            <param name="name">A field name or a CHOICE alternative name.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Utils.RaiseNotImplementedException">
            <summary>
            Throws System.NotImplementedException()
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ArrayBitOutput">
            <summary>
            Class provides functionality to write individual bits of data to
            the memory buffer using IBitOutput interface.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput._buffer">
            <summary>
            Buffer to write data to.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.#ctor">
            <summary>
            Initializes the new instance of the ByteArrayBitOutput with the automatic
            allocation of output source buffers.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.#ctor(System.Byte[])">
            <summary>
            Initializes the new instance of the ByteArrayBitOutput with the preallocated
            output source buffer.
            </summary>
            <param name="buffer">Preallocated buffer to be used as output data source.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes the new instance of the ByteArrayBitOutput with the preallocated
            output source buffer. Buffer will be used starting from the given offset.
            </summary>
            <param name="buffer">Preallocated buffer to be used as output data source.</param>
            <param name="startOffset">Offset to start to write data in the buffer.</param>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput.BUFFER_CHUNK">
            <summary>
            Size factor for buffers allocated in the case of writing to the automatically
            allocated memory. 
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ArrayBitOutput.bufferChunk">
            <summary>
            Auxiliary class used for temporary storage of written data.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.bufferChunk.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes bufferChunk with the given buffer.
            </summary>
            <param name="buf">Buffer to be used for data writing.</param>
            <param name="len">Buffer length.</param>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput.bufferChunk.buffer">
            <summary>
            Buffer for the stored data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput.bufferChunk.bytePos">
            <summary>
            Number of written bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput.bufferChunk.length">
            <summary>
            Buffer length.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput.memoryList">
            <summary>
            List of stored buffer chunks.
            Used for organization of the storage of already encoded message parts.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput._accumulator">
            <summary>
            Accumulator of bit values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput._bytePos">
            <summary>
            Current byte position in <c>_buffer</c>.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput._bitPos">
            <summary>
            Current bit position in <c>_accumulator</c>.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput._length">
            <summary>
            Length of current buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput._fullLength">
            <summary>
            Full length of the encoding in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitOutput.preallocated">
            <summary>
            True if preallocated buffer used.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.WriteBool(System.Boolean)">
            <summary>
            Writes one individual bit to the internal bit accumulator.
            </summary>
            <param name="val">Bit as booolean value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write1BitInt(System.Int32)">
            <summary>
            Function to write 1-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write2BitInt(System.Int32)">
            <summary>
            Function to write 2-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write3BitInt(System.Int32)">
            <summary>
            Function to write 3-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write4BitInt(System.Int32)">
            <summary>
            Function to write 4-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write5BitInt(System.Int32)">
            <summary>
            Function to write 5-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write6BitInt(System.Int32)">
            <summary>
            Function to write 6-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write7BitInt(System.Int32)">
            <summary>
            Function to write 7-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Write8BitInt(System.Int32)">
            <summary>
            Function to write 8-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.WriteBits(System.Int32,System.Int32)">
            <summary>
            Function to write up to 32 bits into Output.
            The right-aligned bits to write are located in the int parameter.
            </summary>
            <param name="bitfield">Bitfield to write.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.WriteBits64(System.Int64,System.Int32)">
            <summary>
            Function to write up to 64 bits into Output.
            The right-aligned bits to write are located in the int parameter.
            </summary>
            <param name="bitfield">Bitfield to write.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.WriteBits(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write big chunk of bits into Output.
            The right-aligned bits to write are located in the byte array parameter.
            </summary>
            <param name="bitfield">Bitfield to write.</param>
            <param name="offset">Offset to start from.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.WritePadding">
            <summary>
            Write padding bits from current bit position to the end of octet.
            if current bit position is zero then zero padding bits be written.
            </summary>
            <returns>Number of padding bits written.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.WriteOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the length octets from the specified offset of
            octets array into output.
            </summary>
            <param name="octets">Octets array to write in output.</param>
            <param name="offset">Offset in the array to start.</param>
            <param name="length">Number of octets to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.BytesWritten">
            <summary>
            Number of whole bytes appended into output.
            </summary>
            <returns>Number of whole bytes appended into output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.BitsWritten">
            <summary>
            Total number of bits appended into output.
            </summary>
            <returns>Total number of bits appended into output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.BitPos">
            <summary>
            Current bit position in the byte to start the next read from.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.GetMem(System.Int32)">
            <summary>
            This is a memory manager.
            Called then end of output buffer is reached.
            Creates new buffer with needed size and put it into
            memoryList.
            </summary>
            <param name="bytes">Number of bytes needed.</param>
            <exception cref="T:Oss.Asn1.Asn1OutputFullException">Thrown for pre-allocated buffer</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Consolidate">
            <summary>
            Consolidates buffer chunks and returns
            result buffer.
            </summary>
            <returns>Result buffer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.Clear">
            <summary>
            Clears current BitOutput.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitOutput.ConsolidateBitString">
            <summary>
            Consolidates buffer chunks and returns result as BitString
            </summary>
            <returns>result BitString</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ArrayBitInput">
            <summary>
            Class gives ability to read individual bits of data from
            the memory buffer using IBitInput interface.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitInput._buffer">
            <summary>
            Buffer to read data from.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.#ctor(Oss.Asn1.BitString)">
            <summary>
            Initializes the new instance with the given BitString as input source.
            </summary>
            <param name="bitstr">BitString to be used as input source.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.#ctor(System.Byte[])">
            <summary>
            Initializes the new instance with the given byte array as input source.
            </summary>
            <param name="buffer">Byte array to be used as input source.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes the new instance with the given byte array to be used as input source
            starting from the <c>startOffset</c>.
            </summary>
            <param name="buffer">Byte array to be used as input source.</param>
            <param name="startOffset">Offset in the <c>buffer</c> to start reading from.</param>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitInput._accumulator">
            <summary>
            Bit accumulator.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitInput._bytePos">
            <summary>
            Number of bytes (octets), read from the stream.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ArrayBitInput._bitPos">
            <summary>
            Current bit position within accumulator. Valid values are 0 to 8. Value
            of 8 means that accumulator needs to be filled with new octet before
            reading next bit.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.ReadBool">
            <summary>
            Reads the one individual bit from the internal bit accumulator.
            Update accumulator value if needed.
            </summary>
            <returns>Bit as boolean value</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read1BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 1-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read2BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 2-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read3BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 3-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read4BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 4-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read5BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 5-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read6BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 6-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read7BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 7-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.Read8BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 8-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.ReadBits(System.Int32)">
            <summary>
            Function to read up to 32 bits from input source.
            </summary>
            <param name="nbits">Number of bits to read.</param>
            <returns>Bitfield with the right-aligned bits as int.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.ReadBits64(System.Int32)">
            <summary>
            Function to read up to 64 bits from input source.
            </summary>
            <param name="nbits">Number of bits to read.</param>
            <returns>Bitfield with the right-aligned bits as long.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.ReadBits(System.Byte[],System.Int32)">
            <summary>
            Function to read bits from Input source into caller bitfield byte array.
            </summary>
            <param name="bitfield">Bitfield to copy read bits.</param>
            <param name="nbits">Number of bits to read.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.SkipBits(System.Int32)">
            <summary>
            Skips specified number of bits from current bit position.
            </summary>
            <param name="nbits">Number of bits to skip.</param> 
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.SkipPadding">
            <summary>
            Skips padding bits from current bit position to the end of the octet.
            if current bit position is zero then zero padding bits will be skipped.
            </summary>
            <returns>Value of the skipped padding bits.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.ReadOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the length octets from input source
            into octets byte array starting from the specified offset.
            </summary>
            <param name="octets">Octets byte array to store read bytes.</param>
            <param name="offset">Offset of the byte array to store bytes.</param>
            <param name="length">Number of octets to read.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.BitsRead">
            <summary>
            Total number of bits read from source.
            </summary>
            <returns>Total number of bits read from source.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.BytesRead">
            <summary>
            Returns number of bytes read from source.
            </summary>
            <returns>Total number of bytes read from source.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ArrayBitInput.BitPos">
            <summary>
            Current bit position in the byte to start the next read from.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.IBitInput">
            <summary>
            Interface gives the ability to read individual
            bits of data from the input source.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.ReadBool">
            <summary>
            Reads the one individual bit into boolean value.
            </summary>
            <returns>Bit as boolean value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read1BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 1-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read2BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 2-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read3BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 3-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read4BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 4-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read5BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 5-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read6BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 6-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read7BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 7-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.Read8BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 8-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.ReadBits(System.Int32)">
            <summary>
            Function to read up to 32 bits from input source.
            </summary>
            <param name="nbits">Number of bits to read.</param>
            <returns>Bitfield with the right-aligned bits as int.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.ReadBits64(System.Int32)">
            <summary>
            Function to read up to 64 bits from input source.
            </summary>
            <param name="nbits">Number of bits to read.</param>
            <returns>Bitfield with the right-aligned bits as int.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.SkipPadding">
            <summary>
            Skips padding bits from current bit position to the end of octet.
            if current bit position is zero then zero padding bits will be skipped.
            </summary>
            <returns>Number of padding bits skipped.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.SkipBits(System.Int32)">
            <summary>
            Skips specified number of bits from current bit position.
            </summary>
            <param name="nbits">Number of bits to skip.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.ReadBits(System.Byte[],System.Int32)">
            <summary>
            Read bits from Input source into caller bitfield byte array.
            Bitfield is left-aligned.
            </summary>
            <param name="bitfield">Bitfield to copy read bits.</param>
            <param name="nbits">Number of bits to read.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.ReadOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the length octets from input source
            and copies it into octets byte array starting from the specified offset.
            </summary>
            <param name="octets">Octets byte array to copy read bytes.</param>
            <param name="offset">Offset to start copy.</param>
            <param name="length">Number of octets to read.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.BitsRead">
            <summary>
            Total number of bits read from source.
            </summary>
            <returns>Total number of bits read from source.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.BytesRead">
            <summary>
            Total number of bytes read from source.
            </summary>
            <returns>Total number of bytes read from source.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitInput.BitPos">
            <summary>
            Current bit position in the octet to start the next read from.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.IBitOutput">
            <summary>
             An interface provides functionality to write 
             bits of data to the output.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.WriteBool(System.Boolean)">
            <summary>
            Writes one idividual bit.
            </summary>
            <param name="val">Bit as boolean value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.WriteBits(System.Int32,System.Int32)">
            <summary>
            Function to write up to 32 bits into Output.
            The right-aligned bits to write are located in the int parameter.
            </summary>
            <param name="val">Bitfield to write.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.WriteBits64(System.Int64,System.Int32)">
            <summary>
            Function to write up to 64 bits into Output.
            The right-aligned bits to write are located in the int parameter.
            </summary>
            <param name="val">Bitfield to write.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write1BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 1-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write2BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 2-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write3BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 3-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write4BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 4-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write5BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 5-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write6BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 6-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write7BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 7-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.Write8BitInt(System.Int32)">
            <summary>
            Function from the WriteNBitInt set
            to write bitfield of fixed width.
            The bitfield is right-aligned in least-significant 8 bits 
            of specified int parameter.
            This function writes 8-bit width right-aligned constrained integer.
            </summary>
            <param name="val">Bitfield to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.WritePadding">
            <summary>
            Write padding bits from current bit position to the end of octet.
            if current bit position is zero then zero padding bits be written.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.WriteBits(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write big chunk of bits into Output.
            The right-aligned bits to write located in the byte array parameter.
            </summary>
            <param name="bitarray">Bitfield to write.</param>
            <param name="offset">Offset to start from.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.WriteOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the length octets from the specified offset of
            octets array into output.
            </summary>
            <param name="octets">Octets array to write in output.</param>
            <param name="offset">Offset in the array to start.</param>
            <param name="length">Number of octets to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.BitsWritten">
            <summary>
            Total number of bits appended into output.
            </summary>
            <returns>Total number of bits appended into output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.BytesWritten">
            <summary>
            Number of whole bytes appended into output.
            </summary>
            <returns>Number of whole bytes appended into output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.IBitOutput.BitPos">
            <summary>
            Current bit position in the byte to start the next write from.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.PerEncoder">
            <summary>
            Encoder of ISO 8601 time types.
            </summary>
            <summary>
            Internal base class for Per encoders.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.PerEncoder.Iso8601IntervalEnpoint">
            <summary>
            Identifies the progress of encoding of time interval
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._iso8601IntervalEP">
            <summary>
            Identifies the progress of encoding of time interval
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._epSign">
            <summary>
            Saves sign of time difference for the lower bound of time interval
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._epHours">
            <summary>
            Saves hours of time difference for the lower bound of time interval
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._epMinutes">
            <summary>
            Saves minutes of time difference for the lower bound of time interval
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeISO8601String(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes the value of ISO 8601 TIME type according to clause 32 of X.691:2008
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <param name="frdigits">Number of fractional digits</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeRecInterval(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes subtypes with the "Basic=Rec-Interval" property settings
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeInterval(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes subtypes with the "Basic=Interval" property settings
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.nextDurationToken(System.String,System.Int32,System.Int32)">
            <summary>
            Tells the type of the token that starts at position 'pos'> in
            the buffer. 
            This method recognizes the following tokens:
            T_NUMBER - a number like 12345.
            T_YMDHS  - character 'YMDHS' designators used for years, 
                       months, days, hours, minutes and seconds.
            T_W      - character 'W' (designator for weeks). 
            T_DOT    - '.' or ',' (used to specify the fractional portion).
            T_EOF    - indicates that the 'pos' refers to the position 
                       outside the string bounds.
            For any other token, the method returns the T_UNKNOWN. 
            </summary>
            <param name="str">String that contains the value being parsed</param>
            <param name="pos">Starting position for the token</param>
            <param name="length">The length of the string</param>
            <returns>Type of token at specified position</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDurationInterval(System.String)">
            <summary>
            Encodes DURATION-INTERVAL encoding kind
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDateTime(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes the DATE-TIME time encoding kind
            DATE-TIME-ENCODING {Date-Type, Time-Type} ::= SEQUENCE {
                date Date-Type,
                time Time-Type
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTime15_32(System.String,System.Int32,System.Int32)">
            <summary>
            Encodes the TIME-TYPE (property settings specified in one of the rows 
            15 to 32 for "BASIC=TIME")
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTimeOfDayAndDiffAndFraction(System.String,System.Int32)">
            <summary>
            Encodes the TIME-OF-DAY-AND-DIFF-AND-FRACTION time encoding kind
            TIME-OF-DAY-AND-DIFF-AND-FRACTION-ENCODING ::= SEQUENCE {
                local-time SEQUENCE {
                    hours    INTEGER (0..24),
                    minutes  INTEGER (0..59),
                    seconds  INTEGER (0..60),
                    fraction INTEGER (0..999, ..., 1000 .. MAX)
                },
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTimeOfDayUTCAndFraction(System.String)">
            <summary>
            Encodes the TIME-OF-DAY-UTC-AND-FRACTION time encoding kind
            TIME-OF-DAY-UTC-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24),
                minutes  INTEGER (0..59),
                seconds  INTEGER (0..60),
                fraction INTEGER (0..999, ..., 1000 .. MAX)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTimeOfDayAndFraction(System.String)">
            <summary>
            Encodes the TIME-OF-DAY-AND-FRACTION time encoding kind
            TIME-OF-DAY-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24),
                minutes  INTEGER (0..59),
                seconds  INTEGER (0..60),
                fraction INTEGER (0..999, ..., 1000 .. MAX)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMinutesAndDiffAndFraction(System.String,System.Int32)">
            <summary>
            Encodes the MINUTES-AND-DIFF-AND-FRACTION time encoding kind
            MINUTES-AND-DIFF-AND-FRACTION-ENCODING ::= SEQUENCE {
                local-time SEQUENCE {
                    hours    INTEGER (0..24),
                    minutes  INTEGER (0..59),
                    fraction INTEGER (0..999, ..., 1000 .. MAX)
                },
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMinutesUTCAndFraction(System.String)">
            <summary>
            Encodes the MINUTES-AND-FRACTION time encoding kind
            MINUTES-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24), -- 5 bits
                minutes  INTEGER (0..59), -- 6 bits --
                fraction INTEGER (0..999, ..., 1000 .. MAX)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMinutesAndFraction(System.String)">
            <summary>
            Encodes the MINUTES-AND-FRACTION time encoding kind
            MINUTES-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24), -- 5 bits
                minutes  INTEGER (0..59), -- 6 bits --
                fraction INTEGER (0..999, ..., 1000 .. MAX)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeHoursAndDiffAndFraction(System.String,System.Int32)">
            <summary>
            Encodes the HOURS-AND-DIFF-AND-FRACTION time encoding kind
            HOURS-AND-DIFF-AND-FRACTION-ENCODING ::= SEQUENCE {
                local-time SEQUENCE { 
                    hours    INTEGER (0..24), -- 5 bits
                    fraction INTEGER (0..999, ..., 1000 .. MAX)
                },
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeHoursUTCAndFraction(System.String)">
            <summary>
            Encodes the HOURS-UTC-AND-FRACTION time encoding kind
            HOURS-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24), -- 5 bits
                fraction INTEGER (0..999, ..., 1000 .. MAX)
                -- 11 bits for up to three digits accuracy -- 
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeHoursAndFraction(System.String)">
            <summary>
            Encodes the HOURS-UTC-AND-FRACTION time encoding kind
            HOURS-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24), -- 5 bits
                fraction INTEGER (0..999, ..., 1000 .. MAX)
                -- 11 bits for up to three digits accuracy -- 
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeFraction(System.String)">
            <summary>
            Encodes the fraction:
            INTEGER (0..999, ..., 1000 .. MAX)
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTimeOfDayAndDiff(System.String)">
            <summary>
            Encodes the TIME-OF-DAY-AND-DIFF time encoding kind
            TIME-OF-DAY-AND-DIFF-ENCODING ::= SEQUENCE {
                local-time SEQUENCE {
                    hours   INTEGER (0..24),
                    minutes INTEGER (0..59),
                    seconds INTEGER (0..60) 
                },
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTimeOfDay(System.String)">
            <summary>
            Encodes the TIME-OF-DAY time encoding kind                                                    
            TIME-OF-DAY-ENCODING ::= SEQUENCE {                                                                    
                hours   INTEGER (0..24), -- 5 bits                                                                 
                minutes INTEGER (0..59), -- 6 bits                                                                 
                seconds INTEGER (0..60)  -- 6 bits --                                                               
            } -- hh:mm:ss            
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMinutesAndDiff(System.String)">
            <summary>
            Encodes the MINUTES-AND-DIFF time encoding kind
            MINUTES-AND-DIFF-ENCODING ::= SEQUENCE {
                local-time SEQUENCE {
                    hours   INTEGER (0..24),
                    minutes INTEGER (0..59)
                },
                time-difference TIME-DIFFERENCE
            } 
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMinutes(System.String)">
            <summary>
            Encodes the MINUTES time encoding kind                                                        
            MINUTES-ENCODING ::= SEQUENCE {                                                                        
                 hours   INTEGER (0..24), -- 5 bits                                                                 
                 minutes INTEGER (0..59) -- 6 bits --                                                               
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeHoursAndDiff(System.String)">
            <summary>
            Encodes the HOURS-AND-DIFF time encoding kind
            HOURS-AND-DIFF-ENCODING ::= SEQUENCE {
                local-hours     INTEGER (0..24),
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTimeDifference(System.String)">
            <summary>
            Encodes the time difference:
            TIME-DIFFERENCE ::= SEQUENCE {           
                sign ENUMERATED { positive, negative },
                hours INTEGER (0..15),
                minutes INTEGER (1..59) OPTIONAL
            } +|-hh(:mm)?
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeHours(System.String)">
            <summary>
            Encodes the HOURS time encoding kind
            HOURS-ENCODING ::= INTEGER(0..24) -- 5 bits
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDate1_14(System.String,System.Int32)">
            <summary>
            Encodes the DATE (property settings specifed in one of rows 1 to 14 for "Basic=Date")
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeAnyYearWeekDay(System.String)">
            <summary>
            Encodes the ANY-YEAR-WEEK-DAY time encoding kind
            ANY-YEAR-WEEK-DAY-ENCODING ::= SEQUENCE {
                year ANY-YEAR-ENCODING,
                week	INTEGER (1 .. 53),
                day  INTEGER (1 .. 7)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeYearWeekDay(System.String)">
            <summary>
            Encodes the YEAR-WEEK-DAY time encoding kind
            YEAR-WEEK-DAY-ENCODING ::= SEQUENCE {
                year YEAR-ENCODING,
                week	INTEGER (1 .. 53),
                day  INTEGER (1 .. 7)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeAnyYearWeek(System.String)">
            <summary>
            Encodes the ANY-YEAR-WEEK time encoding kind
            ANY-YEAR-WEEK-ENCODING ::= SEQUENCE {
                year ANY-YEAR-ENCODING,
                week INTEGER (1 ..53)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeYearWeek(System.String)">
            <summary>
            Encodes the YEAR-WEEK time encoding kind
            YEAR-WEEK-ENCODING ::= SEQUENCE {
                year YEAR-ENCODING,
                week INTEGER (1 ..53)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeAnyYearDay(System.String)">
            <summary>
            Encodes the ANY-YEAR-DAY time encoding kind
            ANY-YEAR-DAY-ENCODING ::= SEQUENCE {
                year ANY-YEAR-ENCODING,
                day  INTEGER (1 .. 366)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeYearDay(System.String)">
            <summary>
            Encodes the YEAR-DAY time encoding kind
            YEAR-DAY-ENCODING ::= SEQUENCE {
                year YEAR-ENCODING,
                day  INTEGER (1 .. 366)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeAnyDate(System.String)">
            <summary>
            Encodes the ANY-DATE time encoding kind
            ANY-DATE-ENCODING ::= SEQUENCE {
                year  ANY-YEAR-ENCODING,
                month INTEGER (1 .. 12),
                day INTEGER (1 .. 31)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDate(System.String)">
            <summary>
            Encodes the DATE time encoding kind
            DATE-ENCODING ::= SEQUENCE {
                year  YEAR-ENCODING,
                month INTEGER (1 .. 12),
                day INTEGER (1 .. 31)
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeAnyYearMonth(System.String)">
            <summary>
            Encodes the ANY-YEAR-MONTH time encoding kind
            ANY-YEAR-MONTH-ENCODING ::= SEQUENCE {
                year		ANY-YEAR-ENCODING,
                month		INTEGER (1..12)
            }   
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeYearMonth(System.String)">
            <summary>
            Encodes the YEAR-MONTH time encoding kind
            YEAR-MONTH-ENCODING ::= SEQUENCE {
                year		YEAR-ENCODING,
                month		INTEGER (1..12) -- 4 bits -- 
            }   
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeAnyYear(System.String)">
            <summary>
            Encodes the ANY-YEAR time encoding kind
            ANY-YEAR-ENCODING ::= INTEGER(MIN..MAX)
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeYear(System.String)">
            <summary>
            Encodes the YEAR time encoding kind
            YEAR-ENCODING ::= CHOICE { -- 2 bits for choice determinant
                immediate   INTEGER (2005 .. 2020),  -- 4 bits
                near-future INTEGER (2021 .. 2276),  -- 8 bits
                near-past   INTEGER (1749 .. 2004),  -- 8 bits
                remainder   INTEGER ((MIN .. 1748) | (2277 .. MAX))
            }
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeAnyCentury(System.String)">
            <summary>
            Encodes the ANY-CENTURY time encoding kind
            ANY-CENTURY-ENCODING ::= INTEGER(MIN..MAX)
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeCentury(System.String)">
            <summary>
            Encodes the century time encoding kind
            CENTURY-ENCODING ::= INTEGER (0..99) -- YYC
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.ReadTimeComponent(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Parses the number from the string and ensures that the number
            fits the range, specified by lower and upper bounds.
            </summary>
            <param name="value">The string, containing the value.</param>
            <param name="lb">The lower bound.</param>
            <param name="ub">The upper bound</param>
            <param name="id">The name that identifies the component.</param>
            <returns>The parsed number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.ReadTimeComponent(System.String,System.String)">
            <summary>
            Parses the number from the string.
            </summary>
            <param name="value">The string, containing the value.</param>
            <param name="id">The name that identifies the component.</param>
            <returns>The parsed number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.ReadLongTimeComponent(System.String,System.String)">
            <summary>
            Parses the number from the string.
            </summary>
            <param name="value">The string, containing the value.</param>
            <param name="id">The name that identifies the component.</param>
            <returns>The parsed number.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMixed(System.String,System.Int32)">
            <summary>
            Encodes the MIXED-ENCODING time encoding kind
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDateTimeType(System.String,System.Int32)">
            <summary>
            Encodes the DATE-TIME-ENCODING time encoding kind (row-33 in MIXED-ENCODING)
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeTimeType(System.String,System.Int32,System.Boolean)">
            <summary>
            Encodes the TIME-TYPE time encoding kind
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="choice">Indicates upper bound for choice encoding</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDateType(System.String,System.Boolean)">
            <summary>
            Encodes the DATE-TYPE time encoding kind
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="choice">Indicates upper bound for choice encoding</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMixedInterval(System.String,System.Int32,System.Boolean)">
            <summary>
            Encodes intervals choices (from row 34 to row 53) of the MIXED-ENCODING time encoding kind
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="recurring">Indicates whether the interval is recurring</param>
            <returns>Number of bits written to the encoding</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.IsTimeType(System.String)">
            <summary>
            Determines if the string is the TIME-TYPE
            </summary>
            <param name="value">The value in the ISO 8601 format</param>
            <returns>true if the value represents TIME-TYPE</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeMixedIntervalHead(System.Int32,System.Int64)">
            <summary>
            Encodes the row and the recurrence if the interval is recurring for intervals in
            the MIXED-ENCODING time encoding kind
            </summary>
            <param name="row">Row number in the Table 2</param>
            <param name="recurrence">Specifies the recurrence.</param>
            <returns>Number of bits written to the encoding</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._out">
            <summary>
            Output source for the encoder.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._isAligned">
            <summary>
            True if this is instance of per aligned decoder
            and false if unaligned.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerEncoder.IsAligned">
            <summary>
            True if this is instance of per aligned encoder
            and false if unaligned.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerEncoder.Options">
            <summary>
            gets or sets the options used for encoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder.int16K">
            <summary>
            Size of the 16 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder.int32K">
            <summary>
            Size of the 32 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder.int48K">
            <summary>
            Size of the 48 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder.int64K">
            <summary>
            Size of the 64 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._utf8Encoding">
            <summary>
            Convenience object to decode UTF8 strings.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerEncoder._codingContained">
            <summary>
            Indicates that the encoder was invoked to encode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerEncoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated before the encoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerEncoder.EncodeDefaultValue">
            <summary>
            If value of field marked as DEFAULT equal to default value we 
            should not encode it.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerEncoder.Output">
            <summary>
            Gets or sets the current output source.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.#ctor(System.Boolean,Oss.Asn1.PerEncoderOptions)">
            <summary>
            Initializes new instance of aligned or unaligned PER encoder. 
            </summary>
            <param name="aligned">True for aligned encoder.</param>
            <param name="options">options objects with flags used for encoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodePdu(Oss.Asn1.BasePdu,Oss.Asn1.BitString)">
            <summary>
            Encodes PDU into a bit string
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="bstr">Output bit string</param>
            <returns>Encoded length in bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes PDU into a stream
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="stream">Output stream</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Byte[],System.Int32)">
            <summary>
            Encodes PDU into a buffer
            </summary>
            <param name="pdu">Input PDU</param>
            <param name="buffer">Output buffer</param>
            <param name="index">Buffer position</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes PDU into a new buffer
            </summary>
            <param name="pdu">Input PDU</param>
            <returns>New buffer containing the encoded data</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes an open type
            </summary>
            <param name="ot">Open type object</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Encodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="dc">The deferred component value to be encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeType(Oss.Asn1.BaseType)">
            <summary>
            Encodes a BaseType object
            </summary>
            <param name="type">Data object</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBool(System.Boolean)">
            <summary>
            Encodes boolean value
            Reference to clause 12 of X.691:2008
            </summary>
            <param name="val">Value to encode</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeLength(System.Int32)">
            <summary>
            Encodes unconstrained length.
            Reference to 11.9 of X.691:2008
            </summary>
            <param name="length">length value to encode</param>
            <returns>If fragmentation procedure is NOT applied to encode length value
            then length is returned. Otherwise, returnes length of the fragment 
            that was encoded.
            </returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeConstrainedLength(System.Int32,System.Int32,System.Int32)">
            <summary>
            Encode constrained length as constrained whole number.
            Reference to clause 11.9 of X.691:2008.
            </summary>
            <param name="length">length value</param>
            <param name="lb">lower bound</param>
            <param name="ub">upper bound</param>
            <returns>If no fragmentation procedure is needed to encode value of
            that length, then 'length' is returned. Otherwise, return
            value is length of the next fragment to be encoded.
            </returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeNormallySmallLength(System.Int32)">
            <summary>
            Helper method that implements clause 10.9.3.4 of X.691: encoding
            of a normally small length with a lower bound of 1.
            </summary>
            <param name="length">Length to encode</param>
            <returns>Encoded number of bits</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeSemiconstrainedInteger(System.Int32)">
            <summary>
            Encodes semiconstrained Integer according to clause 11.7 of X.691 2008
            </summary>
            <param name="val">value to encode </param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeUnconstrainedInteger(System.Int32)">
            <summary>
            Encodes Unconstrained Integer according to clause 11.8 of X.691 2008
            </summary>
            <param name="val">integer value</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeNormSmallNonNegativeInteger(System.Int32)">
            <summary>
            Encodes normally small whole number according to clause 11.6 of X.691 2008
            </summary>
            <param name="val">integer value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeConstrainedInteger(System.Int32,System.Int32)">
            <summary>
            Encodes Constrained Whole Number according to clause 11.5 of X.691 2008
            </summary>
            <param name="val">value to encode</param>
            <param name="nbits">number of bits to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeNonNegativeBinaryInteger(System.Int32,System.Int32)">
            <summary>
            Encodes non-negative binary integer according to clause 11.3 of X.691 2008
            </summary>
            <param name="val">value to encode</param>
            <param name="nbits">bit length of the value</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeSemiconstrainedLongInteger(System.Int64)">
            <summary>
            Encodes semiconstrained Integer according to clause 11.7 of X.691 2008
            For long representation of INTEGER type.
            </summary>
            <param name="val">value to encode </param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeUnconstrainedLongInteger(System.Int64)">
            <summary>
            Encodes Unconstrained Integer according to clause 11.8 of X.691 2008
            For long representation of INTEGER type.
            </summary>
            <param name="val">integer value</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeConstrainedLongInteger(System.Int64,System.Int32)">
            <summary>
            Encodes Constrained Whole Number according to clause 11.5 of X.691 2008
            For long representation of INTEGER type.
            </summary>
            <param name="val">value to encode</param>
            <param name="nbits">number of bits to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeConstrainedBigInteger(System.Byte[],System.Int32)">
            <summary>
            Encodes constrained whole number represented by the BigInteger. The provided
            value is relative to the lower bound of the effective value range constraint.
            The method can change the order of bytes in the 'val' byte array so the caller
            should not assume that the 'val' remains unmodified after the call.
            </summary>
            <param name="val">Specifies the value of the BigInteger in the little-endian format.</param>
            <param name="nbits">The width of the target bitfield.</param>
            <returns>The number of bits encoded.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeSemiconstrainedBigInteger(System.Byte[])">
            <summary>
            Encodes semi-constrained whole number represented by the BigInteger. The provided
            value is relative to the lower bound of the effective value range constraint.
            The method can change the order of bytes in the 'val' byte array so the caller
            should not assume that the 'val' remains unmodified after the call.
            </summary>
            <param name="val">Specifies the value of the BigInteger in the little-endian format.</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeUnconstrainedBigInteger(System.Byte[])">
            <summary>
            Encodes unconstrained whole number represented by the BigInteger. 
            The method can change the order of bytes in the 'val' byte array so the caller
            should not assume that the 'val' remains unmodified after the call.
            </summary>
            <param name="val">Specifies the value of the BigInteger in the little-endian format.</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeNonNegativeBinaryLongInteger(System.Int64,System.Int32)">
            <summary>
            Encoded non-negative binary integer according to clause 11.3 of X.691 2008
            For long representation of INTEGER type.
            </summary>
            <param name="val">value to encode</param>
            <param name="nbits">bit length of the value</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.BinarySearch(System.Int32[],System.Int32)">
            <summary>
            Searches value in sorted integer array
            </summary>
            <param name="array">Array to search</param>
            <param name="value">Value to search</param>
            <returns>Index of value. -1 if value not found</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.BinarySearch(System.Int64[],System.Int64)">
            <summary>
            Searches value in sorted integer array
            </summary>
            <param name="array">Array to search</param>
            <param name="value">Value to search</param>
            <returns>Index of value. -1 if value not found</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeEnum(System.Int32,System.Int32[])">
            <summary>
            Encodes ENUMERATED value according to clause 14 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list.
            </summary>
            <param name="val">Enum value</param>
            <param name="sortedEnum">all enumeration values in ascending order</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeEnum(System.Int64,System.Int64[])">
            <summary>
            Encodes ENUMERATED value according to clause 14 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list.
            </summary>
            <param name="val">Enum value</param>
            <param name="sortedEnum">all enumeration values in ascending order</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeEnumWithExtension(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Encodes ENUMERATED value with extension according to clause 14.3 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list. Enumerations in extension root are always defined in ascending order.
            </summary>
            <param name="val">Enum value</param>
            <param name="sortedEnum">enumeration root values in ascending order</param>
            <param name="sortedExtEnum">enumerations in extension root in ascending order</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeEnumWithExtension(System.Int64,System.Int64[],System.Int64[])">
            <summary>
            Encodes ENUMERATED value with extension according to clause 14.3 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list. Enumerations in extension root are always defined in ascending order.
            </summary>
            <param name="val">Enum value</param>
            <param name="sortedEnum">enumeration root values in ascending order</param>
            <param name="sortedExtEnum">enumerations in extension root in ascending order</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDouble(System.Double)">
            <summary>
            Encodes the REAL type according to clause 15 of X.691:2008.
            A real uses the contents octets of CER/DER preceded by a length determinant 
            that will in practice be a single octet.
            </summary>
            <param name="value">REAL value represented as double to encode</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeDecimal(System.Decimal)">
            <summary>
            Encodes the character REAL value according to clause 15 of X.691:2008.
            </summary>
            <param name="value">decimal value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Encodes the object identifier type according to clause 24 of X.691:2008.
            An object identifier type encoding uses the contents octets of BER preceded by a 
            length determinant that will in practice be a single octet.
            </summary>
            <param name="value">ObjectIdentifier to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Encodes the relative object identifier type according to clause 25 of X.691:2008.
            A relative object identifier type encoding uses the contents octets of BER preceded 
            by a length determinant that will in practice be a single octet.
            </summary>
            <param name="value">RelativeOid value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes UTC Time as VisibleString
            according to clause 10.6.5 of X.691:2008.
            </summary>
            <param name="value">UTCTime value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes Generalized Time as VisibleString
            according to clause 10.6.5 of X.691:2008.
            </summary>
            <param name="value">GeneralizedTime value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeOctetString(System.Byte[])">
            <summary>
            Encodes unconstrained OCTET STRING (Clause 17)
            </summary>
            <param name="val">octet string value as byte array</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeOctetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes constrained OCTET STRING
            </summary>
            <param name="val">octet string value as byte array</param>
            <param name="lb">minimum size</param>
            <param name="ub">maximum size</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeHugePreamble(System.Byte[],System.Int32)">
            <summary>
            Encodes huge bitmask preamble that requires fragmentation
            </summary>
            <param name="length">length of the preamble in bits</param>
            <param name="preamble">bits of the preamble as byte array</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeOctetString(System.Byte[],System.Int32)">
            <summary>
            Encodes OCTET STRING of fixed SIZE
            </summary>
            <param name="length">length of the value</param>
            <param name="val">octet string value as byte array</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBitString(Oss.Asn1.BitString)">
            <summary>
            Encode unconstrained BIT STRING according to clause 16 of X.691:2008
            </summary>
            <param name="value">bit string value to encode</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBitString(Oss.Asn1.BitString,System.Int32,System.Int32)">
            <summary>
            Encode constrained BIT STRING according to clause 16 of X.691:2008
            </summary>
            <param name="val">bit string value to encode</param>
            <param name="lb">lower bound</param>
            <param name="ub">upper bound</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBitString(Oss.Asn1.BitString,System.Int32)">
            <summary>
            Encode BIT STRING of fixed size according to clause 16 of X.691:2008
            </summary>
            <param name="val">bit string value to encode</param>
            <param name="length">length value</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.WriteZeroBits(System.Int32)">
            <summary>
            Write zero bits.
            </summary>
            <param name="length">number of bits to write</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBitStringWithNamedBits(Oss.Asn1.BitStringWithNamedBits,System.Int32)">
            <summary>
            Encode unconstrained BIT STRING with named bit list
            according to clause 16 of X.691:2008
            </summary>
            <param name="value">BitStringWithNamedBits value to encode</param>
            <param name="canonicalLength">number of bits to encode</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBitStringWithNamedBits(Oss.Asn1.BitStringWithNamedBits,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encode constrained BIT STRING with named bit list according to clause 16 of X.691:2008
            </summary>
            <param name="value">BitStringWithNamedBits value to encode</param>
            <param name="canonicalLength">number of bits to encode</param>
            <param name="lb">lower bound</param>
            <param name="ub">upper bound</param>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBitStringWithNamedBits(Oss.Asn1.BitStringWithNamedBits,System.Int32,System.Int32)">
            <summary>
            Encode BIT STRING with named bits of fixed size
            according to clause 16 of X.691:2008
            </summary>
            <param name="value">BitStringWithNamedBits value to encode</param>
            <param name="canonicalLength">canonical number of bits</param>
            <param name="length">number of bits to encode</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeNKMCString(System.Byte[])">
            <summary>
            Encodes not known-multiplier character strings
            according to clause 30.6
            </summary>
            <param name="val">String to encode</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeCharsAsValues(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes a number of 1-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="bits">The number of bits where each character is encoded.</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeCharsAsValues(System.String,System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Encodes a number of 1-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="bits">The number of bits where each character is encoded.</param>
            <param name="al">The permitted alphabet metadata for restricted character string</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeCharsAsIndices(System.String,System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Encodes a number of 1-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="al">The permitted alphabet metadata for restricted character string</param>
            <param name="bits">The number of bits where each character is encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeKMCString(System.String,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encode 1-byte KnownMultiplierChar string with specified permitted alphabet
            </summary>
            <param name="val">string value represented as 2-byte character string</param>
            <param name="al">String metadata</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeKMCString(System.String,System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encode 1-byte KnownMultiplierChar string with constrained length
            </summary>
            <param name="val">string value represented as 2-byte character string</param>
            <param name="lb">length lower bound</param>
            <param name="ub">length upper bound</param>
            <param name="al">String metadata</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeKMCString(System.String,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encode 1-byte KnownMultiplierChar string with fixed length
            </summary>
            <param name="val">String value represented as 2-byte character string</param>
            <param name="len">String length</param>
            <param name="al">String metadata</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeKMCString(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes unconstrained 1-byte KnownMultiplierChar string according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">string value represented as 2-byte character string</param>
            <param name="bits">number of bits needed to encode single character</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeKMCString(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes constrained 1-byte KnownMultiplierChar string according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">string value represented as 2-byte character string</param>
            <param name="lb">length lower bound</param>
            <param name="ub">length upper bound</param>
            <param name="bits">number of bits needed to encode single character</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeKMCString(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes constrained 1-byte KnownMultiplierChar string according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">String value represented as 2-byte character string</param>
            <param name="len">String length</param>
            <param name="bits">number of bits needed to encode single character</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeChars2AsValues(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes a number of 2-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="bits">The number of bits where each character is encoded.</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeChars2AsValues(System.String,System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Encodes a number of 1-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="pa">The permitted alphabet metadata for restricted character string</param>
            <param name="bits">The number of bits where each character is encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeChars2AsIndices(System.String,System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Encodes a number of 1-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="pa">The permitted alphabet metadata for restricted character string</param>
            <param name="bits">The number of bits where each character is encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode2ByteString(System.String,System.Int32,System.Int32)">
            <summary>
            Encodes unconstrained BMPString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">String to encode</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode2ByteString(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes constrained BMPString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">String to encode</param>
            <param name="lb">Lower bound</param>
            <param name="ub">Upper bound</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode2ByteString(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes fixed length BMPString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">String to encode</param>
            <param name="len">String length</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode2ByteString(System.String,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encodes fixed length BMPString according to
            clause 30.5.
            </summary>
            <param name="val">String to encode</param>
            <param name="pa">String metadata</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode2ByteString(System.String,System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encodes constrained BMPString according to
            clause 30.5.
            </summary>
            <param name="val">String to encode</param>
            <param name="lb">Lower bound</param>
            <param name="ub">Upper bound</param>
            <param name="pa">String metadata</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode2ByteString(System.String,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encodes fixed length BMPString according to
            clause 30.5.
            </summary>
            <param name="val">String to encode</param>
            <param name="length">String length</param>
            <param name="pa">String metadata</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeChars4AsValues(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Encodes a number of 4-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="bits">The number of bits where each character is encoded.</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeChars4AsValues(System.Int32[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Encodes a number of 4-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="pa">The permitted alphabet metadata for restricted character string</param>
            <param name="bits">The overflow mask.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeChars4AsIndices(System.Int32[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Encodes a number of 4-byte characters. The characters to encode are
            taken from positions 'from'..'to-1' of the 'data' buffer.
            </summary>
            <param name="data">The buffer containing the characters to encode.</param>
            <param name="from">The index of the first character to encode.</param>
            <param name="to">The index past the last character to encode.</param>
            <param name="pa">The permitted alphabet metadata for restricted character string</param>
            <param name="bits">The overflow mask.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode4ByteString(System.Int32[],System.Int64,System.Int64)">
            <summary>
            Encodes unconstrained UniversalString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">String to encode represented as integer array</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode4ByteString(System.Int32[],System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Encodes constrained UniversalString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">String to encode represented as integer array</param>
            <param name="lb">Lower bound</param>
            <param name="ub">Upper bound</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode4ByteString(System.Int32[],System.Int32,System.Int64,System.Int64)">
            <summary>
            Encodes fixed length UniversalString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="val">String to encode represented as integer array</param>
            <param name="len">String length</param>
            <param name="minChar">The minimal value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode4ByteString(System.Int32[],Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encodes unconstrained UniversalString according to
            clause 30.5.
            </summary>
            <param name="val">String to encode represented as integer array</param>
            <param name="pa">String metadata</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode4ByteString(System.Int32[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encodes constrained UniversalString according to
            clause 30.5.
            </summary>
            <param name="val">String to encode represented as integer array</param>
            <param name="lb">Lower bound</param>
            <param name="ub">Upper bound</param>
            <param name="pa">String metadata</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode4ByteString(System.Int32[],System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Encodes fixed length UniversalString according to
            clause 30.5.
            </summary>
            <param name="val">String to encode represented as integer array</param>
            <param name="length">String length</param>
            <param name="pa">String metadata</param>
            <returns>Number of bits encoded</returns>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeUtf8String(System.String)">
            <summary>
            Encode UTF8String
            </summary>
            <param name="val">utf8 string represented as 2-byte character string</param>
            <returns>number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode2ByteUTF8String(System.String)">
            <summary>
            Encodes UTF8String represented as BMPString
            </summary>
            <param name="val">String to encode</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.Encode4ByteUTF8String(System.Int32[])">
            <summary>
            Encodes UTF8String represented as UniversalString
            </summary>
            <param name="val">String to encode represented as integer array</param>
            <returns>Number of bits encoded</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.CompleteEncoding">
            <summary>
            Completes encoding by flushing last byte of output.
            </summary>
            <returns>number of bits added</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.CompleteBits">
            <summary>
            Completes top-level encoding to be placed in a BIT STRING.
            In the ALIGNED case adds padding bits to produce a multiple
            of eight bits or replaces the empty encoding by the single
            zero octet. In the UNALIGNED case replaces the empty encoding
            by the single zero bit.
            </summary>
            <returns>>number of bits added</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.BitCount(System.Int32)">
            <summary>
            Counts number of bits in the value.
            </summary>
            <returns>Number of bits in value. If value equal 0 then 0 is returnded.
            If value less then 0 then 32 is returned</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.BitCount(System.Int64)">
            <summary>
            Counts number of bits in the value.
            For long integer.
            </summary>
            <returns>Number of bits in value. If value equal 0 then 0 is returnded.
            If value less then 0 then 64 is returned</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.BitCount(System.Byte[])">
            <summary>
            Counts the number of bits in the value of the BigInteger. The caller must ensure that the
            value is non-negative.
            </summary>
            <param name="value">Bytes in the little-endian format representing the value of BigInteger.</param>
            <returns>The number of bits in the value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerEncoder.EncodeBSCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING into the BitString object.
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.PerDecoder">
            <summary>
            Internal base class for Per encoders.
            </summary>
            <summary>
            Internal base class for Per decoders.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeISO8601String(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes the value of ISO 8601 TIME type according to clause 32 of X.691:2008
            </summary>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <param name="frdigits">Number of fractional digits</param>
            <returns>The string containing the decoded value in the ISO 8601 format.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeRecurrence(System.Text.StringBuilder)">
            <summary>
            Decodes recurrence in subtypes with the "Basic=Rec-Interval" property settings
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeInterval(System.Text.StringBuilder,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes subtypes with the "Basic=Interval" property settings
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDurationInterval(System.Text.StringBuilder)">
            <summary>
            Decodes DURATION-INTERVAL time encoding kind
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDateTime(System.Text.StringBuilder,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes the DATE-TIME time encoding kind
            DATE-TIME-ENCODING {Date-Type, Time-Type} ::= SEQUENCE {
                date Date-Type,
                time Time-Type
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="date_row">Row number in the Table 2 for the date component</param>
            <param name="time_row">Row number in the Table 2 for the time component</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeTime15_32(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Decodes the TIME-TYPE (property settings specified in one of the rows 
            15 to 32 for "BASIC=TIME")
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeTimeOfDayAndDiffAndFraction(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the TIME-OF-DAY-AND-DIFF-AND-FRACTION time encoding kind
            TIME-OF-DAY-AND-DIFF-AND-FRACTION-ENCODING ::= SEQUENCE {
                local-time SEQUENCE {
                    hours    INTEGER (0..24),
                    minutes  INTEGER (0..59),
                    seconds  INTEGER (0..60),
                    fraction INTEGER (0..999, ..., 1000 .. MAX)
                },
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeTimeOfDayAndFraction(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the TIME-OF-DAY-AND-FRACTION time encoding kind
            TIME-OF-DAY-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24),
                minutes  INTEGER (0..59),
                seconds  INTEGER (0..60),
                fraction INTEGER (0..999, ..., 1000 .. MAX)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeMinutesAndDiffAndFraction(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the MINUTES-AND-DIFF-AND-FRACTION time encoding kind
            MINUTES-AND-DIFF-AND-FRACTION-ENCODING ::= SEQUENCE {
                local-time SEQUENCE {
                    hours    INTEGER (0..24),
                    minutes  INTEGER (0..59),
                    fraction INTEGER (0..999, ..., 1000 .. MAX)
                },
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeMinutesAndFraction(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the MINUTES-AND-FRACTION time encoding kind
            MINUTES-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24), -- 5 bits
                minutes  INTEGER (0..59), -- 6 bits --
                fraction INTEGER (0..999, ..., 1000 .. MAX)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeHoursAndDiffAndFraction(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the MINUTES-AND-FRACTION time encoding kind
            MINUTES-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24), -- 5 bits
                minutes  INTEGER (0..59), -- 6 bits --
                fraction INTEGER (0..999, ..., 1000 .. MAX)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeHoursAndFraction(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the HOURS-AND-FRACTION time encoding kind
            HOURS-AND-FRACTION-ENCODING ::= SEQUENCE {
                hours    INTEGER (0..24), -- 5 bits
                fraction INTEGER (0..999, ..., 1000 .. MAX)
                -- 11 bits for up to three digits accuracy -- 
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeFraction(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the fraction:
            INTEGER (0..999, ..., 1000 .. MAX)
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="frdigits">Number of fractional digits</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeTimeOfDayAndDiff(System.Text.StringBuilder)">
            <summary>
            Decodes the TIME-OF-DAY-AND-DIFF time encoding kind
            TIME-OF-DAY-ENCODING ::= SEQUENCE {
                    hours   INTEGER (0..24), -- 5 bits
                    minutes INTEGER (0..59), -- 6 bits
                    seconds INTEGER (0..60) -- 6 bits --
                },
                time-difference TIME-DIFFERENCE
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeTimeOfDay(System.Text.StringBuilder)">
            <summary>
            Decodes the TIME-OF-DAY time encoding kind
            TIME-OF-DAY-ENCODING ::= SEQUENCE {
                hours   INTEGER (0..24), -- 5 bits
                minutes INTEGER (0..59), -- 6 bits
                seconds INTEGER (0..60) -- 6 bits -- 
            } -- hh:mm:ss
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeMinutesAndDiff(System.Text.StringBuilder)">
            <summary>
            Decodes the MINUTES-AND-DIFF time encoding kind
            MINUTES-AND-DIFF-ENCODING ::= SEQUENCE {
                local-time SEQUENCE {
                    hours   INTEGER (0..24),
                    minutes INTEGER (0..59)
                },
                time-difference TIME-DIFFERENCE
            } 
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeMinutes(System.Text.StringBuilder)">
            <summary>
            Decodes the MINUTES time encoding kind
            MINUTES--ENCODING ::= SEQUENCE {
                hours   INTEGER (0..24),
                minutes INTEGER (0..59)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeHoursAndDiff(System.Text.StringBuilder)">
            <summary>
            Decodes the HOURS-AND-DIFF time encoding kind
            HOURS-AND-DIFF-ENCODING ::= SEQUENCE {
                local-hours     INTEGER (0..24),
                time-difference TIME-DIFFERENCE 
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeTimeDifference(System.Text.StringBuilder)">
            <summary>
            Decodes the time difference:                                                                  
            TIME-DIFFERENCE ::= SEQUENCE {                                                                         
                sign ENUMERATED { positive, negative },                                                            
                hours INTEGER (0..15),                                                                             
                minutes INTEGER (1..59) OPTIONAL                                                                   
            } +|-hh(:mm)?
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeHours(System.Text.StringBuilder)">
            <summary>
            Decodes the HOURS time encoding kind
            HOURS-ENCODING ::= INTEGER(0..24) -- 5 bits
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDate1_14(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes the DATE-TYPE (property settings specifed in one of rows from 1 to 14 for 
            "Basic=Date")
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeAnyYearWeekDay(System.Text.StringBuilder)">
            <summary>
            Decodes the ANY-YEAR-WEEK-DAY time encoding kind
            ANY-YEAR-WEEK-DAY-ENCODING ::= SEQUENCE {
                year ANY-YEAR-ENCODING,
                week	INTEGER (1 .. 53),
                day  INTEGER (1 .. 7)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeYearWeekDay(System.Text.StringBuilder)">
            <summary>
            Decodes the YEAR-WEEK-DAY time encoding kind
            YEAR-WEEK-DAY-ENCODING ::= SEQUENCE {
                year YEAR-ENCODING,
                week	INTEGER (1 .. 53),
                day  INTEGER (1 .. 7)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeAnyYearWeek(System.Text.StringBuilder)">
            <summary>
            Decodes the ANY-YEAR-WEEK time encoding kind
            ANY-YEAR-WEEK-ENCODING ::= SEQUENCE {
                year ANY-YEAR-ENCODING,
                week INTEGER (1 ..53)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeYearWeek(System.Text.StringBuilder)">
            <summary>
            Decodes the YEAR-WEEK time encoding kind
            YEAR-WEEK-ENCODING ::= SEQUENCE {
                year YEAR-ENCODING,
                week INTEGER (1 ..53)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeAnyYearDay(System.Text.StringBuilder)">
            <summary>
            Decodes the ANY-YEAR-DAY time encoding kind
            ANY-YEAR-DAY-ENCODING ::= SEQUENCE {
                year ANY-YEAR-ENCODING,
                day  INTEGER (1 .. 366)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeYearDay(System.Text.StringBuilder)">
            <summary>
            Decodes the YEAR-DAY time encoding kind
            YEAR-DAY-ENCODING ::= SEQUENCE {
                year YEAR-ENCODING,
                day  INTEGER (1 .. 366)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeAnyDate(System.Text.StringBuilder)">
            <summary>
            Decodes the ANY-DATE time encoding kind
            ANY-DATE-ENCODING ::= SEQUENCE {
                year  ANY-YEAR-ENCODING,
                month INTEGER (1 .. 12),
                day INTEGER (1 .. 31)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDate(System.Text.StringBuilder)">
            <summary>
            Decodes the DATE time encoding kind
            DATE-ENCODING ::= SEQUENCE {
                year  YEAR-ENCODING,
                month INTEGER (1 .. 12),
                day INTEGER (1 .. 31)
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeAnyYearMonth(System.Text.StringBuilder)">
            <summary>
            Decodes the ANY-YEAR-MONTH time encoding kind
            ANY-YEAR-MONTH-ENCODING ::= SEQUENCE {
                year		ANY-YEAR-ENCODING,
                month		INTEGER (1..12)
            }   
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeYearMonth(System.Text.StringBuilder)">
            <summary>
            Decodes the YEAR-MONTH time encoding kind
            YEAR-MONTH-ENCODING ::= SEQUENCE {
                year		YEAR-ENCODING,
                month		INTEGER (1..12) -- 4 bits -- 
            }   
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeAnyYear(System.Text.StringBuilder)">
            <summary>
            Decodes the ANY-YEAR time encoding kind
            ANY-YEAR-ENCODING ::= INTEGER(MIN..MAX)
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeYear(System.Text.StringBuilder)">
            <summary>
            Decodes the YEAR time encoding kind
            YEAR-ENCODING ::= CHOICE { -- 2 bits for choice determinant
                immediate   INTEGER (2005 .. 2020),  -- 4 bits
                near-future INTEGER (2021 .. 2276),  -- 8 bits
                near-past   INTEGER (1749 .. 2004),  -- 8 bits
                remainder   INTEGER ((MIN .. 1748) | (2277 .. MAX))
            }
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeAnyCentury(System.Text.StringBuilder)">
            <summary>
            Decodes the ANY-CENTURY time encoding kind
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeCentury(System.Text.StringBuilder)">
            <summary>
            Decodes the century time encoding kind
            CENTURY-ENCODING ::= INTEGER (0..99) -- YYC
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeMixed(System.Text.StringBuilder)">
            <summary>
            Decodes the MIXED-ENCODING time encoding kind
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeMixedInterval(System.Text.StringBuilder,System.Int32)">
            <summary>
            Decodes inteval choices (since row-34 till row-53) of the MIXED-ENCODING time encoding kind
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <param name="row">Row number in the Table 2 (0 - for "mixed" case)</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDateTimeType(System.Text.StringBuilder)">
            <summary>
            Decodes the DATE-TIME-ENCODING time encoding kind (row-33 in MIXED-ENCODING)
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeTimeType(System.Text.StringBuilder)">
            <summary>
            Decodes the TIME-TYPE time encoding kind
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDateType(System.Text.StringBuilder)">
            <summary>
            Decodes the DATE-TYPE time encoding kind
            </summary>
            <param name="buf">The buffer to append the decoded value.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder._isAligned">
            <summary>
            True if this is instance of per aligned decoder
            and false if unaligned.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder._CANONICAL_PER">
            <summary>
            True if this object was instantiated
            for the Canonical PER decoder.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerDecoder.IsAligned">
            <summary>
            True if this is an instance of the PER aligned decoder
            and false if unaligned.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerDecoder.IsCanonical">
            <summary>
            True if this is an instance of the Canonical PER decoder.
            and false otherwise.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerDecoder.Options">
            <summary>
            gets or sets the options used for decoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder._in">
            <summary>
            Input source for the decoder.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerDecoder.Input">
            <summary>
            Gets decoder input source.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.int8K">
            <summary>
            Size of the 8 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.int16K">
            <summary>
            Size of the 16 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.int32K">
            <summary>
            Size of the 32 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.int48K">
            <summary>
            Size of the 48 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.int64K">
            <summary>
            Size of the 64 kbytes in bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.buf64K">
            <summary>
            Byte buffer with size of 64 kbytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.buf8K">
            <summary>
            Byte buffer with size of 8 kbytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.charBuf64K">
            <summary>
            Character buffer with size of 64 kbytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder.intBuf64K">
            <summary>
            Integer buffer with size of 64 kbytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder._utf8Encoding">
            <summary>
            Convenience object to decode UTF8 strings.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder._codingContained">
            <summary>
            Indicates that the decoder was invoked to decode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerDecoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated after the decoding
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.#ctor(System.Boolean,System.Boolean,Oss.Asn1.BaseDecoderOptions)">
            <summary>
            Initializes new instance of aligned or unaligned PER decoder. 
            </summary>
            <param name="align">True for aligned decoder.</param>
            <param name="is_canonical">Selects between canonical and basic decoder.</param>
            <param name="options">object containing the flags used for decoding</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodePdu(Oss.Asn1.BitString,Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU from a BitString object.
            An exception is thrown if trailing bits are left in the input BitString object after decoding.
            </summary>
            <param name="bstr">The input BitString object containing the encoded data.</param>
            <param name="pdu">The PDU object in which decoded data is stored.</param>
            <returns>The number of bits read from the BitString object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodePdu(System.IO.Stream,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from a stream
            </summary>
            <param name="stream">Input stream</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodePdu(System.Byte[],System.Int32,Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU from a buffer
            </summary>
            <param name="buffer">Input buffer</param>
            <param name="index">Buffer position</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeType(Oss.Asn1.BaseType)">
            <summary>
            Decodes a BaseType object into internal buffer/stream
            </summary>
            <param name="type">Input object</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeOpenType(System.Byte[],Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU as open type
            </summary>
            <param name="encoded">The encoded data</param>
            <param name="pdu">PDU object</param>
            <returns>Open type object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDeferredComponent``1">
            <summary>
            Decodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The decoded deferred component object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBool">
            <summary>
            Decodes BOOL value
            Reference to 12 of X.691:2008
            </summary>
            <returns>decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeLength(System.Int32@)">
            <summary>
            Decode unconstrained length.
            Fragmentation procedure may be applied.
            Reference to 11.9 of X.691:2008
            </summary>
            <param name="lastFragment">on input is the length of the last decoded fragmement,
            65536 for the first fragment;
            on output -1 if the last length fragment decoded, unchanged input value otherwise</param>
            <returns>Decoded length value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeExtAdditonLength(System.Int32@)">
            <summary>
            Decode extension addition length.
            Fragmentation procedure may be applied.
            Reference to 11.9 of X.691:2008
            </summary>
            <param name="lastFragment">on input is the length of the last decoded fragmement,
            65536 for the first fragment;
            on output -1 if the last length fragment is decoded, unchanged input value otherwise</param>
            <returns>Decoded length value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded or decoded zero length</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeNormallySmallLength">
            <summary>
            Helper method that implements clause 10.9.3.4 of X.691: encoding
            of a normally small length with a lower bound of 1.
            </summary>
            <returns>Decoded length.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeConstrainedLength(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Decode constrained length.
            Reference to clause 11.9 of X.691.
            </summary>
            <param name="lb">Lower bound.</param>
            <param name="ub">Upper bound.</param>
            <param name="lastFragment">on input is the length of the last decoded fragmement,
            65536 for the first fragment;
            on output -1 if the last length fragment is decoded, unchanged input value otherwise</param>
            <returns>Length value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeConstrainedRangeLength(System.Int32,System.Int32)">
            <summary>
            Decode constrained length.
            Reference to clause 11.9 of X.691.
            </summary>
            <param name="lb">Lower bound.</param>
            <param name="ub">Upper bound.</param>
            <returns>Length value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeNKMCString">
            <summary>
            Decodes not known-multiplier character strings
            according to clause 30.6.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeCharsAsValues(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes a number of 1-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="minChar">The minimum value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeCharsAsValues(System.Char[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Decodes a number of 1-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="al">The permitted alphabet metadata for restricted character string</param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeCharsAsIndices(System.Char[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Decodes a number of 1-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="al">The permitted alphabet metadata for restricted character string</param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeKMCString(Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decode KnownMultiplierChar string with specified permitted alphabet.
            </summary>
            <param name="al">String metadata.</param>
            <returns>Decoded character string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeKMCString(System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decode KnownMultiplierChar string with constrained length.
            </summary>
            <param name="lb">Lower bound of size constraint.</param>
            <param name="ub">Upper bound of size constraint.</param>
            <param name="al">String metadata.</param>
            <returns>Decoded character string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeKMCString(System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decode KnownMultiplierChar string with fixed length.
            </summary>
            <param name="length">Known fixed length of character string.</param>
            <param name="al">String metadata.</param>
            <returns>Decoded character string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeKMCString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes unconstrained KnownMultiplierChar string according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).        
            </summary>
            <param name="bits">Bit length of the single character.</param>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded character string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeKMCString(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes constrained KnownMultiplierChar string according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="lb">Lower bound of size constraint.</param>
            <param name="ub">Upper bound of size constraint.</param>
            <param name="bits">Bit length of the single character.</param>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded character string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeKMCString(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes fixed length KnownMultiplierChar string according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="len">Known fixed length of character string.</param>
            <param name="bits">Bit length of the single character.</param>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded character string</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeChars2AsValues(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes a number of 2-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="minChar">The minimum value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeChars2AsValues(System.Char[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Decodes a number of 2-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="pa">PER string metadata </param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeChars2AsIndices(System.Char[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Decodes a number of 2-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="pa">PER string metadata </param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode2ByteString(System.Int32,System.Int32)">
            <summary>
            Decodes unconstrained BMPString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode2ByteString(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes constrained BMPString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="lb">Lower bound.</param>
            <param name="ub">Upper bound.</param>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode2ByteString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes fixed length BMPString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="len">String length.</param>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode2ByteString(Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decodes fixed length BMPString according to
            clause 30.5.
            </summary>
            <param name="pa">String metadata.</param>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode2ByteString(System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decodes constrained BMPString according to
            clause 30.5.
            </summary>
            <param name="lb">Lower bound.</param>
            <param name="ub">Upper bound.</param>
            <param name="pa">String metadata.</param>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode2ByteString(System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decodes fixed length BMPString according to
            clause 30.5.
            </summary>
            <param name="length">String length.</param>
            <param name="pa">String metadata.</param>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeChars4AsValues(System.Int32[],System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            Decodes a number of 4-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="minChar">The minimum value of valid character.</param>
            <param name="maxChar">The maximum value of valid character.</param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeChars4AsValues(System.Int32[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Decodes a number of 4-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="pa">PER string metadata </param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeChars4AsIndices(System.Int32[],System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata,System.Int32)">
            <summary>
            Decodes a number of 4-byte characters and stores them in the buffer at positions
            'from'..'to-1'.
            </summary>
            <param name="buffer">The buffer to store the decoded characters.</param>
            <param name="from">The starting position to store the decoded characters.</param>
            <param name="to">The position past the last character to decode.</param>
            <param name="pa">PER string metadata </param>
            <param name="bits">The number of bits where each character was encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode4ByteString(System.Int64,System.Int64)">
            <summary>
            Decodes unconstrained UniversalString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded string represented as integer array.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode4ByteString(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Decodes constrained UniversalString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="lb">Lower bound.</param>
            <param name="ub">Upper bound.</param>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded string represented as integer array.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode4ByteString(System.Int32,System.Int64,System.Int64)">
            <summary>
            Decodes fixed length UniversalString according to
            clause 30.5. Does not use indicies (Clause 30.5.4, case a).
            </summary>
            <param name="len">String length.</param>
            <param name="minChar">Smallest value of the permitted alphabet constraint.</param>
            <param name="maxChar">Largest value of the permitted alphabet constraint.</param>
            <returns>Decoded string represented as integer array.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode4ByteString(Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decodes unconstrained UniversalString according to
            clause 30.5.
            </summary>
            <param name="pa">String metadata.</param>
            <returns>Decoded string represented as integer array.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode4ByteString(System.Int32,System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decodes constrained UniversalString according to
            clause 30.5.
            </summary>
            <param name="lb">Lower bound.</param>
            <param name="ub">Upper bound.</param>
            <param name="pa">String metadata.</param>
            <returns>Decoded string represented as integer array.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode4ByteString(System.Int32,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Decodes fixed length UniversalString according to
            clause 30.5.
            </summary>
            <param name="length">String length.</param>
            <param name="pa">String metadata.</param>
            <returns>Decoded string represented as integer array.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeUtf8String">
            <summary>
            Decode UTF8 string.
            </summary>
            <returns>Decoded string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.Decode4ByteUTF8String">
            <summary>
            Decode UTF8 string represented as Universal String.
            </summary>
            <returns>Decoded UTF8 encoding converted in UCS-4 string representation.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.SkipPaddingBits">
            <summary>
            Skips bits from current Offset BitPos to the end of byte.
            Checks that padding bits are zero.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeHugePreamble(System.Byte[],System.Int32)">
            <summary>
            Decodes fragmented bitmask preamble. If the decoded
            length does not match the expected length an
            exception is thrown.
            </summary>
            <param name="buffer">The buffer to store the bits of the preamble.</param>
            <param name="total_length">The expected length in bits.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeExtPreamble(System.Int32@)">
            <summary>
            Decodes possibly fragmented extension preamble.
            </summary>
            <param name="total_length">Returns the length of the preamble.</param>
            <returns>The buffer containing preamble bits.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeOctetString">
            <summary>
            Decodes unconstrained OCTET STRING.
            </summary>
            <returns>Byte array containing decoded octet string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeOctetString(System.Int32,System.Int32)">
            <summary>
            Decodes OCTET STRING with specified SIZE constraints.
            </summary>
            <param name="lb">Lower bound of size.</param>
            <param name="ub">Upper bound of size.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeOctetString(System.Int32)">
            <summary>
            Decodes OCTET STRING of fixed SIZE.
            </summary>
            <param name="length">Length value.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeOctetStringFrag(System.Int32)">
            <summary>
            Decodes unconstrained OCTET STRING with fragmentation. This version
            is needed for opentypes, extensions and containing.
            Important note: Assumed that you already decode first
            length fragment and pass it to Length argument.
            </summary>
            <param name="firstLength">Length of the first fragment.</param>
            <returns>Byte array containing decoded octet string.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitStringFrag(System.Int32)">
            <summary>
            Decodes unconstrained BIT STRING with fragmentation. This version
            is needed for open types, extensions and containing.
            Important note: Assumed that you already decode first
            length fragment and pass it to Length argument.
            </summary>
            <param name="firstLength">Length of the first fragment.</param>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitString">
            <summary>
            Decode unconstrained BIT STRING according to clause 16 of X.691:2008.
            </summary>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitString(System.Int32,System.Int32)">
            <summary>
            Decode constrained BIT STRING according to clause 16 of X.691:2008.
            </summary>
            <param name="lb">Lower bound of SIZE.</param>
            <param name="ub">Upper bound of SIZE.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitString(System.Int32)">
            <summary>
            Decodes BIT STRING of fixed SIZE according to clause 16 of X.691:2008.
            </summary>
            <param name="length">Fixed length value.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitStringWithNamedBits">
            <summary>
            Decode unconstrained BIT STRING with named bit list
            according to clause 16 of X.691:2008.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitStringWithNamedBits(System.Int32[])">
            <summary>
            Decode unconstrained BIT STRING with named bit list
            according to clause 16 of X.691:2008.
            </summary>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitStringWithNamedBits(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Decode constrained BIT STRING with named bit list
            according to clause 16 of X.691:2008.
            </summary>
            <param name="lb">Lower bound of SIZE.</param>
            <param name="ub">Upper bound of SIZE.</param>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded value.</returns>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBitStringWithNamedBits(System.Int32,System.Int32[])">
            <summary>
            Decode fixed BIT STRING with named bit list
            according to clause 16 of X.691:2008.
            </summary>
            <param name="length">Length of the BIT STRING.</param>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeExtBitStringWithNamedBits(System.Int32[])">
            <summary>
            Decode unconstrained BIT STRING with named bit list from extension
            according to clause 16 of X.691:2008.
            </summary>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeUnconstrainedInteger">
            <summary>
            Decodes Unconstrained Integer according to clause 11.8 and 11.4 of X.691 2008.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeSemiconstrainedInteger(System.Int32)">
            <summary>
            Decodes semiconstrained Integer according to clause 11.7 of X.691 2008.
            </summary>
            <param name="lb">Lower bound of size constraint.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeNormSmallNonNegativeInteger">
            <summary>
            Decodes normally small whole number according to clause 11.6 of X.691 2008.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeConstrainedInteger(System.Int32,System.Int32)">
            <summary>
            Decodes Constrained Whole Number according to clause 11.5 of X.691 2008.
            </summary>
            <param name="nbits">Number of bits to decode.</param>
            <param name="lb">Constraint lower bound.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeUnconstrainedLongInteger">
            <summary>
            Decodes Unconstrained Integer according to clause 11.8 and 11.4 of X.691 2008.
            For long representation of INTEGER type.
            </summary>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeSemiconstrainedLongInteger(System.Int64)">
            <summary>
            Decodes semiconstrained Integer according to clause 11.7 of X.691 2008.
            For long representation of INTEGER type.
            </summary>
            <param name="lb">Lower bound of size constraint.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeConstrainedLongInteger(System.Int32)">
            <summary>
            Decodes Constrained Whole Number according to clause 11.5 of X.691 2008.
            For long representation of INTEGER type.
            </summary>
            <param name="nbits">Number of bits to decode.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeConstrainedLongInteger(System.Int32,System.Int64)">
            <summary>
            Decodes Constrained Whole Number according to clause 11.5 of X.691 2008.
            For long representation of INTEGER type.
            </summary>
            <param name="nbits">Number of bits to decode.</param>
            <param name="lb">Lower bound of size constraint.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeConstrainedULongInteger(System.Int32,System.UInt64)">
            <summary>
            Decodes Constrained Whole Number according to clause 11.5 of X.691 2008.
            For long representation of INTEGER type.
            </summary>
            <param name="nbits">Number of bits to decode.</param>
            <param name="lb">Lower bound of size constraint.</param>
            <returns>Decoded value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeConstrainedBigInteger(System.Int32)">
            <summary>
            Decodes constrained whole number represented by the BigInteger.
            </summary>
            <param name="nbits">The width of the source bitfield.</param>
            <returns>The value of the BigInteger relative to the lower bound 
            of the effective value range constraint in the little-endian format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeSemiconstrainedBigInteger">
            <summary>
            Decodes semi-constrained whole number represented by the BigInteger.
            </summary>
            <returns>The value of the BigInteger relative to the lower bound 
            of the effective value range constraint in the little-endian format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeUnconstrainedBigInteger">
            <summary>
            Decodes unconstrained whole number represented by the BigInteger.
            </summary>
            <returns>The value of the BigInteger in the little-endian format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeEnum(System.Int32[])">
            <summary>
            Decodes ENUMERATED value according to clause 14 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list.
            </summary>
            <param name="sortedEnum">Enumerated values sorted in ascending order.</param>
            <returns>Decoded enumerated value as int.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeEnum(System.Int64[])">
            <summary>
            Decodes ENUMERATED value according to clause 14 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list.
            </summary>
            <param name="sortedEnum">Enumerated values sorted in ascending order.</param>
            <returns>Decoded enumerated value as int.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeEnumWithExtension(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Decodes ENUMERATED value with extension according to clause 14.3 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list.
            </summary>
            <param name="sortedEnum">Enumerated values sorted in ascending order.</param>
            <param name="sortedExtEnum">Extension enumerated values sorted in
            ascending order.</param>
            <param name="unknownEnum">The value assigned when an unknown extension is received.</param>
            <returns>Decoded enumerated value as int.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeEnumWithExtension(System.Int64[],System.Int64[],System.Int64)">
            <summary>
            Decodes ENUMERATED value with extension according to clause 14.3 of X.691:2008
            The enumerations in the enumeration root shall be sorted into ascending order 
            by their enumeration value, and shall then be assigned an enumeration index starting 
            with zero for the first enumeration, one for the second, and so on up to the last enumeration 
            in the sorted list.
            </summary>
            <param name="sortedEnum">Enumerated values sorted in ascending order.</param>
            <param name="sortedExtEnum">Extension enumerated values sorted in
            ascending order.</param>
            <param name="unknownEnum">The value assigned when an unknown extension is received.</param>
            <returns>Decoded enumerated value as int.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDouble">
            <summary>
            Decodes the REAL type according to clause 15 of X.691:2008.
            A real uses the contents octets of CER/DER preceded by a length determinant 
            that will in practice be a single
            octet.
            </summary>
            <returns>REAL value represented as double.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeDecimal">
            <summary>
            Decodes the REAL type according to clause 15 of X.691:2008.
            REAL is represented in NR3 form according to X.690-2008 8.5.8.
            A real uses the contents octets of CER/DER preceded by a length determinant 
            that will in practice be a single octet.
            </summary>
            <returns>REAL value represented as decimal.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeUTCTime">
            <summary>
            Decodes the UTCTime type according to clause 10.6.5 of X.691:2008.
            </summary>
            <returns>Decoded UTCTime value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeGeneralizedTime">
            <summary>
            Decodes the GeneralizedTime type according to clause 10.6.5 of X.691:2008.
            </summary>
            <returns>Decoded GeneralizedTime value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes the object identifier type according to clause 24 of X.691:2008.
            An object identifier type encoding uses the contents octets of BER preceded by a 
            length determinant that will in practice be a single octet.
            </summary>
            <returns>ObjectIdentifier.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeRelativeOid">
            <summary>
            Decodes the relative object identifier type according to clause 25 of X.691:2008.
            A relative object identifier type encoding uses the contents octets of BER preceded 
            by a length determinant that will in practice be a single octet.
            </summary>
            <returns>RelativeOid value.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.BitCount(System.Int32)">
            <summary>
            Counts number of bits in the value.
            </summary>
            <param name="value">Value to count bits in.</param>
            <returns>Bit count.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.BitCount(System.Int64)">
            <summary>
            Counts number of bits in the value.
            For long integer.
            </summary>
            <param name="value">Value to count bits in.</param>
            <returns>Bit count.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.CompleteEncoding">
            <summary>
            This function completes the encoding read procedure.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.CompleteBits">
            <summary>
            Completes top-level encoding that was placed in a BIT STRING.
            In the ALIGNED case reads padding bits to align at octet boundary
            or skips the single zero octet representing an empty encoding. 
            In the UNALIGNED case skips the single zero bit representing 
            the empty encoding.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.SkipUnknownExtensions(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Skips specified number of unknown extensions.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.PrepareExtInputFrag(System.Int32)">
            <summary>
            Decodes unconstrained OCTET STRING with fragmentation,
            sets input to the decoded byte array.
            Important note: Assumed that you already decode first
            length fragment and pass it to the firstLength argument.
            </summary>
            <param name="firstLength">Length of the first fragment.</param>
            <returns>Length of the byte array containing decoded octet string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.CheckExtEncodingCompletion(System.Int32,System.Int32)">
            <summary>
            Check correctness of the completion of an extension addition encoding.
            </summary>
            <param name="startBitPosition">Bit position of the Input before decoding of the extension addition.</param>
            <param name="extContainerLength">Length of the OCTET STRING containing the extension addiion.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if padding bits at the end of encoding are invalid.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.compare_unsigned_int(System.Int32,System.Int32)">
            <summary>
            Compares to 32-bit integer numbers as unsigned numbers.
            </summary>
            <param name="n1">First number to compare</param>
            <param name="n2">Second number to compare</param>
            <returns>-1 if n1 &lt; n2; 1 - if n1 &gt; n2 or 0 if they are equal</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.compare_unsigned_long(System.Int64,System.Int64)">
            <summary>
            Compares to 64-bit integer numbers as unsigned numbers.
            </summary>
            <param name="n1">First number to compare</param>
            <param name="n2">Second number to compare</param>
            <returns>-1 if n1 &lt; n2; 1 - if n1 &gt; n2 or 0 if they are equal</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeOSCC``1(System.Byte[])">
            <summary>
            Decode into octet string with content constraints 
            </summary>
            <typeparam name="T">PDU type</typeparam>
            <param name="encodedData">Encoded data</param>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBSCC``1(Oss.Asn1.BitString)">
            <summary>
            Decode into bit string with content constraints 
            </summary>
            <typeparam name="T">PDU type </typeparam>
            <param name="encodedData">Encoded data</param>
            <returns>An bit string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeBSCCPdu``1(Oss.Asn1.BitString)">
            <summary>
            Decodes the PDU contained in the BIT STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.DecodeOSCCPdu``1(System.Byte[])">
            <summary>
            Decodes the PDU contained in the OCTET STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.RaiseExtRangeError(System.Boolean)">
            <summary>
            Throws the _inval_enc exception for an extensible range.
            </summary>
            <param name="extPresent">true if extension marker is present, false otherwise</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.RaiseExtLengthError(System.Boolean)">
            <summary>
            Throws the _inval_enc exception for an extensible size.
            </summary>
            <param name="extPresent">true if extension marker is present, false otherwise</param>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.RaiseUnnecessaryExtGroupError">
            <summary>
            Throws the _inval_enc exception for an extnsible length determinant.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.RaiseNotImplementedError">
            <summary>
            Throws the _not_implemented exception
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.RaiseDefaultPresentError(System.String)">
            <summary>
            Throws the _inval_enc exception
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.RaiseInvalidEncodingError">
            <summary>
            Throws the _inval_enc exception
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerDecoder._recursionDepth">
            <summary>
            Tracks the depth of recursive calls.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerDecoder.Depth">
            <summary>
            This property is for the internal use only and should not be utilized by the
            application code. It reflects the current depth of recursion when decoding
            values of types with circular definitions. The property is also used to pass
            the current depth of recursion to the child coder when circular definition
            includes OCTET STRING or BIT STRING with the content constraint.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.EnterRecursive">
            <summary>
            Informs the decoder that it enters the next level of
            recursion when decoding the value of type with the circular
            definition.
            <exception cref="T:System.InvalidOperationException">
            If the recursion depth exceeds the limit, specified by the
            RecursionLimit option.
            </exception>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PerDecoder.LeaveRecursive">
            <summary>
            Informs the decoder that the innermost recursive invocation
            is completed.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.StreamBitInput">
            <summary>
            Class gives ability to read individual bits of data from
            the stream using IBitInput interface.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitInput._stream">
            <summary>
            Stream to read data from.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.#ctor(System.IO.Stream)">
            <summary>
            Initializes the new instance with the given stream as input source.
            </summary>
            <param name="stream">Stream to be used as input source.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.GetOctet">
            <summary>
            Function that retrieves the next octet from input source.
            </summary>
            <returns>Octet value as integer.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.GetOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function that reads the next <c>count</c> octets from the input stream.
            </summary>
            <param name="buffer">Byte array to store byte from the stream.</param>
            <param name="offset">Offset of the byte array.</param>
            <param name="count">Number of bytes to read from the stream.</param>
            <returns>Number of bytes read from the stream.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitInput._accumulator">
            <summary>
            Bit accumulator.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitInput._bytePos">
            <summary>
            Number of bytes (octets), read from the stream.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitInput._bitPos">
            <summary>
            Current bit position within accumulator. Valid values are 0 to 8. Value
            of 8 means that accumulator needs to be filled with new octet before
            reading next bit.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.ReadBool">
            <summary>
            Reads the one individual bit from the internal bit accumulator.
            Update accumulator value if needed.
            </summary>
            <returns>Bit as boolean value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read1BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 1-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read2BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 2-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read3BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 3-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read4BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 4-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read5BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 5-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read6BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 6-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read7BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 7-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.Read8BitInt">
            <summary>
            Function is from the ReadNBitInt set used to decode integer
            located in fixed width bitfield. This function is for 8-width fixed bitfield.
            </summary>
            <returns>Read integer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.ReadBits(System.Int32)">
            <summary>
            Function to read up to 32 bits from input source.
            </summary>
            <param name="nbits">Number of bits to read.</param>
            <returns>Bitfield with the right-aligned bits as int.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.ReadBits64(System.Int32)">
            <summary>
            Function to read up to 64 bits from input source.
            </summary>
            <param name="nbits">Number of bits to read.</param>
            <returns>Bitfield with the right-aligned bits as long.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.ReadBits(System.Byte[],System.Int32)">
            <summary>
            Function to read bits from Input source into caller bitfield byte array.
            </summary>
            <param name="bitfield">Bitfield to copy read bits.</param>
            <param name="nbits">Number of bits to read.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.SkipBits(System.Int32)">
            <summary>
            Skips specified number of bits from current bit position.
            </summary>
            <param name="nbits">Number of bits to skip.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.SkipPadding">
            <summary>
            Skips padding bits from current bit position to the end of the octet.
            if current bit position is zero then zero padding bits will be skipped.
            </summary>
            <returns>Value of the skipped padding bits.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.ReadOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the length octets from input source
            into octets byte array starting from the specified offset.
            </summary>
            <param name="octets">Octets byte array to store read bytes.</param>
            <param name="offset">Offset of the byte array to store bytes.</param>
            <param name="length">Number of octets to read.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.BitsRead">
            <summary>
            Total number of bits read from source.
            </summary>
            <returns>Total number of bits read from source.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.BytesRead">
            <summary>
            Returns number of bytes read from source.
            </summary>
            <returns>Total number of bytes read from source.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitInput.BitPos">
            <summary>
            Current bit position in the byte to start the next read from.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.StreamBitOutput">
            <summary>
            Class provides functionality to write individual bits of data to
            the stream using IBitOutput interface.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitOutput._stream">
            <summary>
            Stream to write data to.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.#ctor(System.IO.Stream)">
            <summary>
            Initializes the new instance of the StreamBitOutput with given stream
            as output source.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.AppendOctet(System.Int32)">
            <summary>
            Appends the octet represented as last 8 bits of passed int value into output.
            </summary>
            <param name="val">Octet value as int.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.AppendOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends the count bytes starting from the specified offset into output.
            </summary>
            <param name="val">Byte array to append.</param>
            <param name="offset">Offset to start from.</param>
            <param name="count">Bytes count to append.</param>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitOutput._accumulator">
            <summary>
            Accumulator of bit values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitOutput._bytePos">
            <summary>
            Number of written bytes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.StreamBitOutput._bitPos">
            <summary>
            Buffer length.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.WriteBool(System.Boolean)">
            <summary>
            Writes one idividual bit to the internal bit accumulator.
            </summary>
            <param name="val">Bit as booolean value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write1BitInt(System.Int32)">
            <summary>
            Function to write 1-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write2BitInt(System.Int32)">
            <summary>
            Function to write 2-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write3BitInt(System.Int32)">
            <summary>
            Function to write 3-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write4BitInt(System.Int32)">
            <summary>
            Function to write 4-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write5BitInt(System.Int32)">
            <summary>
            Function to write 5-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write6BitInt(System.Int32)">
            <summary>
            Function to write 6-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write7BitInt(System.Int32)">
            <summary>
            Function to write 7-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.Write8BitInt(System.Int32)">
            <summary>
            Function to write 8-bit width right-aligned constrained integer.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.WriteBits(System.Int32,System.Int32)">
            <summary>
            Function to write up to 32 bits into Output.
            The right-aligned bits to write are located in the int parameter.
            </summary>
            <param name="bitfield">Bitfield to write.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.WriteBits64(System.Int64,System.Int32)">
            <summary>
            Function to write up to 64 bits into Output.
            The right-aligned bits to write are located in the long parameter.
            </summary>
            <param name="bitfield">Bitfield to write.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.WriteBits(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write big chunk of bits into Output.
            The right-aligned bits to write are located in the byte array parameter.
            </summary>
            <param name="bitfield">Bitfield to write.</param>
            <param name="offset">Offset to start from.</param>
            <param name="nbits">Number of bits to write in output.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.WritePadding">
            <summary>
            Write padding bits from current bit position to the end of octet.
            If current bit position is zero then zero padding bits be written.
            </summary>
            <returns>Number of padding bits written.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.WriteOctets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the length octets from the specified offset of
            octets array into output.
            </summary>
            <param name="octets">Octets array to write in output.</param>
            <param name="offset">Offset in the array to start.</param>
            <param name="length">Number of octets to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.BytesWritten">
            <summary>
            Number of whole bytes appended into output.
            </summary>
            <returns>Number of whole bytes appended into output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.BitsWritten">
            <summary>
            Total number of bits appended into output.
            </summary>
            <returns>Total number of bits appended into output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.StreamBitOutput.BitPos">
            <summary>
            Current bit position in the byte to start the next read from.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerNamespace">
            <summary>
            Used to store information about the XML namespace.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerNamespace.Prefix">
            <summary>
            Specifies the recommended prefix.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerNamespace.Uri">
            <summary>
            Specifies the URI that identifies the namespace.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerNamespace.#ctor(System.String,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="uri">The namespace name (URI).</param>
            <param name="prefix">The prefix to reference the namespace.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerQNameDecoder">
            <summary>
            Implements E-XER tag decoder for tags
            qualified by different URI that does not use URI wildcards.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerQNameDecoder.#ctor(System.Int32[],System.String[],System.Int32[])">
            <summary>
            The constructor.
            </summary>
            <param name="ns_idx">The array of namespace (URI) indices.</param>
            <param name="names">The array of names for searching in it.</param>
            <param name="values">The array of values associated with names.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerQNameDecoder.GetValue(System.Int32,System.String)">
            <summary>
            Returns value associated with the given qualified name.
            </summary>
            <param name="ns_idx">The namespace (URI) index.</param>
            <param name="name">The name.</param>
            <returns>65535 if the qualified name is not found,
            the associated value otherwise.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerNameDecoder">
            <summary>
            Implements E-XER tag decoder for tags all qualified by one URI.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerNameDecoder.#ctor(System.String[],System.Int32[])">
            <summary>
            The constructor.
            </summary>
            <param name="names">The array of names for searching in it.</param>
            <param name="values">The array of values associated with names.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerNameDecoder.#ctor(System.String[])">
            <summary>
            The constructor.
            </summary>
            <param name="names">The array of names for searching in it.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerNameDecoder.GetValue(System.String)">
            <summary>
            Returns value associated with the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>65535 if the qualified name is not found,
            the associated value otherwise.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerNameDecoder.TryGetValue(System.String)">
            <summary>
            Returns true if the given name.is present.
            </summary>
            <param name="name">The name.</param>
            <returns>true if the name is found,
            false otherwise.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerUriNameDecoder">
            <summary>
            Implements E-XER tag decoder for tags all qualified by one URI.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUriNameDecoder.#ctor(System.String[],System.Int32[],Oss.Asn1.Internal.ExerNameDecoder[],System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="uri">The array of URI as strings.</param>
            <param name="values">The array of values or
            indices of the name decoders associated with URI</param>
            <param name="name_decoder">The array of names decoders, one name
            decoder for each URI.</param>
            <param name="other">The value returned by the GetValue method
            if URI has not been matched</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUriNameDecoder.GetValue(System.String,System.String)">
            <summary>
            Returns value associated with the given qualified name.
            </summary>
            <param name="uri">The URI as a string.</param>
            <param name="name">The name.</param>
            <returns>The 'other' value if URI has not been matched.
            65535 if the qualified name is not found,
            the associated value otherwise.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.CopyUtil">
            <summary>
            Contains methods used to deep copy types represented as mutable C# reference types.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyByteArray(System.Byte[])">
            <summary>
            Creates a deep copy of a byte array.
            </summary>
            <param name="source">The byte array to be copied.</param>
            <returns>The deep copy of the input byte array.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Creates a deep copy of an ObjectIdentifier.
            </summary>
            <param name="source">The ObjectIdentifier to be copied.</param>
            <returns>The deep copy of the input ObjectIdentifier.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Creates a deep copy of a RelativeOid.
            </summary>
            <param name="source">The RelativeOid to be copied.</param>
            <returns>The deep copy of the input RelativeOid.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyBitString(Oss.Asn1.BitString)">
            <summary>
            Creates a deep copy of a BitString.
            </summary>
            <param name="source">The BitString to be copied.</param>
            <returns>The deep copy of the input BitString.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyBitString(Oss.Asn1.BitStringWithNamedBits)">
            <summary>
            Creates a deep copy of a BitStringWithNamedBits.
            </summary>
            <param name="source">The BitStringWithNamedBits to be copied.</param>
            <returns>The deep copy of the input BitStringWithNamedBits.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyOpenType(Oss.Asn1.OpenType)">
            <summary>
            Creates a deep copy of an OpenType.
            </summary>
            <param name="source">The OpenType to be copied.</param>
            <returns>The deep copy of the input OpenType.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyBSCC``1(Oss.Asn1.BitStringWithContentsConstraint{``0})">
            <summary>
            Creates a deep copy of a BitStringWithContentsConstraint.
            </summary>
            <typeparam name="T">The type of the PDU wrapped in the bit string.</typeparam>
            <param name="source">The BitStringWithContentsConstraint to be copied.</param>
            <returns>The deep copy of the input BitStringWithContentsConstraint.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyOSCC``1(Oss.Asn1.OctetStringWithContentsConstraint{``0})">
            <summary>
            Creates a deep copy of an OctetStringWithContentsConstraint.
            </summary>
            <typeparam name="T">The type of the PDU wrapped in the octet string.</typeparam>
            <param name="source">The OctetStringWithContentsConstraint to be copied.</param>
            <returns>The deep copy of the input OctetStringWithContentsConstraint.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyType``1(``0)">
            <summary>
            Creates a deep copy of any ASN.1 object.
            </summary>
            <typeparam name="T">The type of the ASN.1 object.</typeparam>
            <param name="source">The object to be copied.</param>
            <returns>The deep copy of the input object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CopyUtil.CopyDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Creates a deep copy of a deferred component.
            </summary>
            <typeparam name="T">Type of the deferred component.</typeparam>
            <param name="source">The deferred component to be copied.</param>
            <returns>The deep copy of the given deferred component.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.MiscUtil">
            <summary>
            Contains various utility methods
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.MiscUtil.GetUnicodeChar(System.String,System.Int32@)">
            <summary>Extracts an Unicode charachter from a string, by performing an UTF-16 to UTF-32 conversion.</summary>
            <param name="str">The string from which the Unicode charachter is extracted.</param>
            <param name="index">The position in the specified string from where the Unicode character is extracted.
            The position is advanced with the numbers of characters processed from the string (1 or 2).
            </param>
            <returns>The Unicode character encoded at the specified position.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if an invalid surrogate pair is encountered.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(System.Int32[],System.Int32)">
            <summary>
            Selects a value that fits to the given ordered array of integer intervals.
            </summary>
            <param name="ranges">Ordered array of integers,
            arranged as { 0, LB1, UB1, LB2, UB2, ..., LBn, UBn, int.MaxValue },
            where LBi and UBi - i-th lower and upper bounds of the [LBi, RBi) interval</param>
            <param name="x">A value that may be increased to fit to the leftmost possible interval</param>
            <returns>A value not less than x that fits ranges</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.MiscUtil.Reverse(System.Byte[])">
            <summary>
            Reverses the order of elements in a byte array. The method
            facilitates transformation between big-endian and little-endian
            formats.
            </summary>
            <param name="value">The byte array to reverse.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.MiscUtil.HasShortestForm(System.Byte[],System.Boolean)">
            <summary>
            Detects is the two's complement integer occupies the minimal
            number of octets.
            </summary>
            <param name="value">The value to check.</param>
            <param name="big_endian">Selects big-endian (true) or little-endian (false) format.</param>
            <returns>False if nine most significant bits are all ones or all zeroes.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.BinaryParser">
            <summary>
            Provides common code to parse values of REAL 
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.BinaryParser.ByteIterator">
            <summary>
            Provides bytes of binary encoding.
            </summary>
            <returns>The value of next byte</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.BinaryParser._RELAXED">
            <summary>
            Specifies the conformance level.
            In relaxed level the following deviations are accepted:
            - the exponent in the binary encoding is not encoded into
              the minimal number of octets
            - the mantissa in the binary encoding has zero length
            - the binary encoding of positive zero has content octets.
            In the strict level the following additional checks are performed:
            - that the decimal encoding conforms to NR1, NR2 or NR3 as specified
              by the first byte of the encoding.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.BinaryParser.RealKind">
            <summary>
            Possible kinds of decoded REAL values
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BinaryParser.BeginParse(System.Int32,System.Int32)">
            <summary>
            Determines the kind of the encoding and/or special real value from the first octet of
            the encoding. When the method returns Binary, Decimal_NR1, Decimal_NR2 or Decimal_NR3,
            the caller is supposed to invoke ParseBinary() or ParseDecimal() to complete parsing.
            </summary>
            <param name="length">Specifies the total number of octets in the encoding</param>
            <param name="firstOctet">Specifies the first octet of the encoding</param>
            <returns>The enum identifying the kind of the encoding (binary/decimal) or the
            special REAL value</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.BinaryParser.ParseDecimal(System.Int32,System.Int32,Oss.Asn1.Internal.BinaryParser.ByteIterator,System.Int32,System.Boolean)">
            <summary>
            Extracts the REAL value from the decimal encoding.
            </summary>
            <param name="length">The total number of bytes in the encoding (including firstOctet)</param>
            <param name="firstOctet">The first octet of the encoding</param>
            <param name="nextByte">The function to retrieve bytes of the encoding</param>
            <param name="conformance">The conformance level</param>
            <param name="isCanonical">Requests that encoding must be canonical (conform to X.690 11.3)</param>
            <returns>The value of REAL as an array of char</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.BinaryParser.ParseDouble(System.Int32,System.Int32,Oss.Asn1.Internal.BinaryParser.ByteIterator,System.Int32,System.Boolean)">
            <summary>
            Extracts the REAL value from the binary encoding.
            </summary>
            <param name="length">The total number of bytes in the encoding (including firstOctet)</param>
            <param name="firstOctet">The first octet of the encoding</param>
            <param name="nextByte">The function to retrieve bytes of the encoding</param>
            <param name="conformance">The conformance level</param>
            <param name="isCanonical">Requests that encoding must be canonical (conform to X.690 11.3)</param>
            <returns>The value of REAL as double</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="F:Oss.Asn1.Internal.BinaryParser.cTWO54">
            <summary>
            1.80143985094819840000e+16;
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.BinaryParser.cTWOM54">
            <summary>
            5.55111512312578270212e-17;
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.BinaryParser.ldexp(System.Double,System.Int32)">
            <summary>
            Computes mantissa * 2 ^ exponent.
            </summary>
            <param name="mantissa">The mantissa.</param>
            <param name="exponent">The exponent.</param>
            <returns>mantissa * 2 ^ exponent</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ValueNotationHelper">
            <summary>
            Internal base class for printers.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ValueNotationHelper.Target">
            <summary>
            Destination used for printing
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ValueNotationHelper.Options">
            <summary>
            stores options used for printing
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ValueNotationHelper.Indent">
            <summary>
            Number of spaces printed for indentation.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ValueNotationHelper.PrintImpliedValues">
            <summary>
            Indicates whether the default (implied) value of the component should be printed when the value 
            of the component was not explicitly specified.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.ResetIndent">
            <summary>
            Resets indentation
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.WriteLine">
            <summary>
            Writes a new line
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.WriteLine``1(``0)">
            <summary>
            Writes the specifies value in a new line
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.Write``1(``0)">
            <summary>
            Writes the specifies value (on same the current line)
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.BeginConstructedValue">
            <summary>
            Begins a region of a constructed value
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.EndConstructedValue">
            <summary>
            Ends a region of a constructed value
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.IncreaseIndent">
            <summary>
            Increase indentation
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.DecreaseIndent">
            <summary>
            Decrease indentation
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ValueNotationHelper.GetBitName">
            <summary>
            Get a name of named bits 
            </summary>
            <param name="index">Bit index</param>
            <returns>Bit name</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintBitString(Oss.Asn1.BitString,Oss.Asn1.Internal.ValueNotationHelper.GetBitName)">
            <summary>
            Prints a BIT STRING with named bits value.
            <param name="value">The value to be printed.</param>
            <param name="getBitName">A delegate function returning bit names.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintBitString(Oss.Asn1.BitString)">
            <summary>
            Prints a BIT STRING value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintOctetString(System.Byte[])">
            <summary>
            Prints an OCTET STRING value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintString(System.String)">
            <summary>
            Prints a normal character string value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintNKMCString(System.Byte[])">
            <summary>
            Prints a non-KMC character string value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Prints an OBJECT IDENTIFIER value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Prints a RELATIVE-OID value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Prints an UTCTime value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Prints a GeneralizedTime value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.Print4ByteChar(System.Int32[])">
            <summary>
            Prints a UCS-4 character string value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintOctets(System.Byte[],System.Int32)">
            <summary>
            Prints an encoded buffer.
            <param name="value">The buffer to be printed.</param>
            <param name="length">The size of the encoding to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintDecimal(System.Decimal)">
            <summary>
            Prints decimal value.
            <param name="value">The value to be printed.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintDouble(System.Double)">
            <summary>
            Prints double value.
            </summary>
            <param name="value">The value to be printed.</param>
            <exception cref="T:Oss.Asn1.Asn1PrinterException"></exception>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintIndent">
            <summary>
            Prints the indentation.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintContent(Oss.Asn1.BaseType)">
            <summary>
            Prints content of a BaseType object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintOpenType(Oss.Asn1.OpenType)">
            <summary>
            Prints open type object content
            </summary>
            <param name="ot"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.ValueNotationHelper.PrintDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Prints a deferred component.
            </summary>
            <typeparam name="T">Type of the deferred component.</typeparam>
            <param name="dc">The deferred component value to be printed.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.TableTreeCharDataNode">
            <summary>
            The TableTreeCharDataNode class represents permitted alphabet
            node which is a set of separate characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.TableTreeCharDataNode._inverseTable">
            <summary>
            Table of numeric values corresponds to character
            values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.TableTreeCharDataNode.#ctor(Oss.Asn1.Internal.TreeCharDataNode,Oss.Asn1.Internal.TreeCharDataNode,System.Int32,System.Int32[])">
            <summary>
            Initializes node instance.
            </summary>
            <param name="Left">Left node of the tree.</param>
            <param name="Right">Right node of the tree.</param>
            <param name="Offset">Absolute index offset of the node minimum character from
            the global minimum character</param>
            <param name="InverseTable">Table of numeric values corresponds to character
            values.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.TableTreeCharDataNode.IndexToChar(System.Int32)">
            <summary>
            Returns a char for provided index
            </summary>
            <param name="index">Char index</param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.TableTreeCharDataNode.CharToIndex(System.Int32)">
            <summary>
            Return an index of a char
            </summary>
            <param name="ch">Char</param>
            <returns>Index</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.TableTreeCharDataNode.IsValidChar(System.Int32)">
            <summary>
            Check if the char is valid (present in the table)
            </summary>
            <param name="ch">Char</param>
            <returns>True if valid</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.PointTreeCharDataNode">
            <summary>
            The PointTreeCharDataNode class represents permitted
            alphabet node which is a single character.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PointTreeCharDataNode._point">
            <summary>
            Numeric value corresponds to permitted character
            value.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.PointTreeCharDataNode.#ctor(Oss.Asn1.Internal.TreeCharDataNode,Oss.Asn1.Internal.TreeCharDataNode,System.Int32,System.Int32)">
            <summary>
            Initializes node instance.
            </summary>
            <param name="left">Left node of the tree.</param>
            <param name="right">Right node of the tree.</param>
            <param name="Offset">Absolute index offset of the node minimum character from
            the global minimum character</param>
            <param name="point"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.PointTreeCharDataNode.IndexToChar(System.Int32)">
            <summary>
            Returns a char for provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PointTreeCharDataNode.CharToIndex(System.Int32)">
            <summary>
            Return an index for provided char
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.PointTreeCharDataNode.IsValidChar(System.Int32)">
            <summary>
            Checks if char is valid (present) in the tree
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:Oss.Asn1.Internal.RangeTreeCharDataNode">
            <summary>
            The RangeTreeCharDataNode class represents permitted
            alphabet node which is a character range.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.RangeTreeCharDataNode._lower">
            <summary>
            The lower numeric value corresponds to permitted character
            values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.RangeTreeCharDataNode._upper">
            <summary>
            The upper numeric value corresponds to permitted character
            values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.RangeTreeCharDataNode.#ctor(Oss.Asn1.Internal.TreeCharDataNode,Oss.Asn1.Internal.TreeCharDataNode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes node instance.
            </summary>
            <param name="Left">Left node of the tree.</param>
            <param name="Right">Right node of the tree.</param>
            <param name="Offset">Absolute index offset of the node minimum character from
            the global minimum character</param>
            <param name="Lower">The lower numeric value corresponds to permitted character
            values.</param>
            <param name="Upper">The upper numeric value corresponds to permitted character
            values.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.RangeTreeCharDataNode.IndexToChar(System.Int32)">
            <summary>
            Return a char for provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.RangeTreeCharDataNode.CharToIndex(System.Int32)">
            <summary>
            Return an index for the provided char
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.RangeTreeCharDataNode.IsValidChar(System.Int32)">
            <summary>
            Checks if the char is valid (present)
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:Oss.Asn1.Internal.TreeCharDataNode">
            <summary>
            The TreeCharDataNode class represents abstract permitted alphabet node.
            Concrete tree node classes extend this class.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.TreeCharDataNode._left">
            <summary>
            Left node of the tree.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.TreeCharDataNode._right">
            <summary>
            Right node of the tree.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.TreeCharDataNode._offset">
            <summary>
            Absolute index offset of the node minimum character from
            the global minimum character.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.TreeCharDataNode.#ctor(Oss.Asn1.Internal.TreeCharDataNode,Oss.Asn1.Internal.TreeCharDataNode,System.Int32)">
            <summary>
            Initializes node instance.
            </summary>
            <param name="left">Left node of the tree.</param>
            <param name="right">Right node of the tree.</param>
            <param name="offset">Absolute index offset of the node minimum character from
            the global minimum character</param>
        </member>
        <member name="M:Oss.Asn1.Internal.TreeCharDataNode.IndexToChar(System.Int32)">
            <summary>
            Maps PA index to character.
            </summary>
            <param name="index">PA index to be mapped.</param>
            <returns>Mapped character.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.TreeCharDataNode.CharToIndex(System.Int32)">
            <summary>
            Maps character to PA index.
            </summary>
            <param name="ch">Character to be mapped.</param>
            <returns>Mapped PA value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.TreeCharDataNode.IsValidChar(System.Int32)">
            <summary>
            Return true if the character belongs to the PA represented
            by this node, false - otherwise.
            </summary>
            <param name="ch">Character to be checked.</param>
            <returns>True if the character belongs to the PA.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.PerStringMetadata">
            <summary>
            Known Multiplier Character String metadata
            for 1-byte strings to be used by PER Encoder/Decoder.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.Alphabet">
            <summary>
            String representation of Permitted Alphabet
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.InverseTable">
            <summary>
            Table of numeric values corresponds to character
            values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.MinChar">
            <summary>
            Minimum integer value of allowed character
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.MaxChar">
            <summary>
            Maximum integer value of allowed character
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.BitWidthUnaligned">
            <summary>
            Bit width for 1 character for PER UNALIGNED
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.BitWidthAligned">
            <summary>
            Bit width for 1 character for PER ALIGNED
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.EncodeValueAligned">
            <summary>
            Boolean flag that indicates should we encode character
            code implicitly or use indicies for PER ALIGNED.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.EncodeValueUnaligned">
            <summary>
            Boolean flag that indicates should we encode character
            code implicitly or use indicies for PER UNALIGNED.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.PerStringMetadata.CharTreeDataPresent">
            <summary>
            Boolean flag that indicates CharTreeData
            presence.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.PerStringMetadata.CharTreeData">
            <summary>
            Data tree whose nodes represents part
            of the permitted alphabet constraint.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.UTF8Util">
             <summary>
             This class provides utility functionality to convert UCS-4 encoded character into
             UTF-8 encoding of this character.
             Depending on the decimal value of the UCS-4 character, the correspondent
             UTF8 character may contain from one to six octets. The format of UTF8
             character and the mapping between the UTF8 and the UCS-4 encoding is
             defined by the following table:
             
             UCS-4 characters      UTF8 characters
             ---------------------------------------------------------------------------
             0x00000000-0x0000007F 0XXXXXXX
             0x00000080-0x000007FF 110XXXXX 10XXXXXX
             0x00000800-0x0000FFFF 1110XXXX 10XXXXXX 10XXXXXX
             0x00010000-0x001FFFFF 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX
             0x00200000-0x03FFFFFF 111110XX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX
             0x04000000-0x7FFFFFFF 1111110X 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX
            
             The UTF8 character if formed by the leading octet, followed by a number
             of additional octets (from zero to five). High order bit of the leading
             octet specifies if any additional octets follow the leading octet. When
             this bit is zero, the UTF8 character has the length of one octet. When this
             bit is one, the number of leading 'one' bits specifies the length of the
             UTF8 character. Bits, marked as 'X' designate specific number of least
             significant bits, extracted from the decimal value of the UCS-4 character,
             being converted. This class has no idea where the octets that form UTF8
             character are actually stored. It assumes that specific subclasses
             implement the <code>writeOctet</code> method, which iteratively stores
             the content octets of the UTF8 character in progress of the conversion
             from its UCS-4 equivalent.
             </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.UTF8Util._utf8EncodingRelaxed">
            <summary>
            Convenience object to decode UTF8 strings in relaxed mode.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.UTF8Util._utf8EncodingStrict">
            <summary>
            Convenience object to decode UTF8 strings in strict mode.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetString(Oss.Asn1.BaseDecoderOptions,System.Byte[],System.Int32,System.Int32)">
            <summary>
            decodes an UTF8 string from a buffer, and reports errors according to the decoder options
            </summary>
            <param name="options">decoder options used for controlling error handling</param>
            <param name="buffer">encoded data</param>
            <param name="startIndex">start index in encoded data buffer</param>
            <param name="length">length of encoded data</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetString(Oss.Asn1.BaseDecoderOptions,System.Byte[])">
            <summary>
            decodes an UTF8 string from a buffer, and reports errors according to the decoder options
            </summary>
            <param name="options">decoder options used for controlling error handling</param>
            <param name="buffer">encoded data</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            decodes an UTF8 string from a buffer, and reports errors according to the decoder options
            </summary>
            <param name="buffer">encoded data</param>
            <param name="startIndex">start index in encoded data buffer</param>
            <param name="length">length of encoded data</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetString(System.Byte[])">
            <summary>
            decodes an UTF8 string from a buffer
            </summary>
            <param name="buffer">encoded data</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetBytes(System.String)">
            <summary>
            encodes a String object in UTF8
            </summary>
            <param name="value">the String object to be encoded</param>
            <returns>byte buffer containing UTF8 encoding</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.CharWidthToWrite(System.Int32)">
            <summary>
            Computes the length of UTF-8 equivalent. If the UCS-4 character has no UTF8 equivalent,
            the -1 is returned.
            </summary>
            <param name="character">The decimal value of the character which UTF-8 length is 
            computed.</param>
            <returns>The length of UTF-8 equivalent of the <c>character</c>.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.WriteBytes(System.String,System.Byte[],System.Int32)">
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.WriteBytes(System.Int32[],System.Byte[],System.Int32)">
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.CountBytesToWrite(System.String)">
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.CountBytesToWrite(System.Int32[])">
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.ReadChar(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the UTF character to its UCS-4 equivalent.
            </summary>
            <param name="b">The buffer that stores the UTF character.</param>
            <param name="off">Offset in the buffer to start reading from.</param>
            <param name="len">The length of the character.</param>
            <returns>The integer that specifies the decimal code of equivalent UCS-4 character.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.CharWidthToRead(System.Byte)">
            <summary>
            Compute the length of the UTF character with the <c>octet</c>
            leading octet.
            </summary>
            <param name="octet">Leading octet of UTF8 character.</param>
            <returns>Width of UTF-8 character.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is corrupt and/or cannot be decoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetCharCount(System.Byte[])">
            <summary>
            Calculates the number of Unicode charaters in the UTF-8 byte array.
            </summary>
            <param name="buffer">UTF-8 byte array.</param>
            <returns>Number of Unicode characters.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetIntArrayStrict(System.Byte[])">
            <summary>
            Decodes Unicode characters from the UTF-8 byte array
            and stores them into allocated array of integers.
            Checks that any Unicode character was encoded
            into the the minimal number of octets.
            Checks any Unicode character is not in (U+D800 through U+DFFF)
            and not greater than U+10FFFF.
            </summary>
            <param name="buffer">UTF-8 byte array.</param>
            <returns>Array of integers containing numerical values of Unicode code points.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is incorrect.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.GetIntArray(System.Byte[])">
            <summary>
            Decodes Unicode characters from the UTF-8 byte array
            and stores them into allocated array of integers.
            </summary>
            <param name="buffer">UTF-8 byte array.</param>
            <returns>Array of integers containing numerical values of Unicode code points.</returns>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException">Thrown if the encoding is incorrect.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.RaiseLeadingZeroBitsError(System.Int32)">
            <summary>
            Throws the _UTF8_invalid_octet_sequence exception
            on presence of too many leading zero bits.
            </summary>
            <param name="position">Position in the octet sequence.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException"></exception>
        </member>
        <member name="M:Oss.Asn1.Internal.UTF8Util.RaiseIncorrectSequentByteError(System.Int32)">
            <summary>
            Throws the _UTF8_invalid_octet_sequence exception
            on an incorrect sub-sequent byte.
            </summary>
            <param name="position">Position in the octet sequence.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidEncodingException"></exception>
        </member>
        <member name="T:Oss.Asn1.Internal.Validator">
            <summary>
            An auxiliary class used by validation procedures
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateKMCString(System.String,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Checks that all the characters containing in a NumericString,
            PrintableString, VisibleString and IA5String
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">The string.</param>
            <param name="Pa">Permitted alphabet.</param>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data are not valid</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateNKMCString(System.Byte[])">
            <summary>
            Checks that all the characters containing in a TeletexString,
            VideotexString, GraphicString, GeneralString
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">The string.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateUniversalString(System.Int32[],Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Checks that all the characters containing in a UniversalString
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">The string.</param>
            <param name="Pa">Permitted alphabet.</param>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data are not valid</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateBmpString(System.String,Oss.Asn1.Internal.PerStringMetadata)">
            <summary>
            Checks that all the characters containing in a BMPString
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">The string.</param>
            <param name="Pa">Permitted alphabet.</param>
            <exception cref="T:Oss.Asn1.Asn1ConstraintException">Thrown if data are not valid</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateUtf8String(System.String)">
            <summary>
            Checks that all the characters containing in a UTF8String
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">The string.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateTime(System.String)">
            <summary>
            Checks that all the characters containing in a TIME
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">TIME value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateDate(System.String)">
            <summary>
            Checks that all the characters containing in a DATE
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">DATE value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateTimeOfDay(System.String)">
            <summary>
            Checks that all the characters containing in a TIME-OF-DAY
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">TIME-OF-DAY value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateDateTime(System.String)">
            <summary>
            Checks that all the characters containing in a DATE-TIME
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">DATE-TIME value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateDuration(System.String)">
            <summary>
            Checks that all the characters containing in a DURATION
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">DURATION value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateOidIri(System.String)">
            <summary>
            Checks that all the characters containing in an OID-IRI
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">OID-IRI value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateRelativeOidIri(System.String)">
            <summary>
            Checks that all the characters containing in a RELATIVE-OID-IRI
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">RELATIVE-OID-IRI value.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Checks that an ObjectIdentifier created during decoding is valid.
            Checks that the decoded data is not zero-length and that the first
            two arcs have correct values, according to the standard.
            </summary>
            <param name="value">The ObjectIdentifier object to be validated.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the ObjectIdentifier is invalid.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Checks that an RealtiveOid created during decoding is valid.
            Checks that the decoded data is not zero-length.
            </summary>
            <param name="value">The RelativeOid object to be validated.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the RelativeOid is invalid.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateUtcTime(Oss.Asn1.UTCTime,System.Boolean)">
            <summary>
            Checks that all the characters containing in a UTCTime
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">UTCTime value.</param>
            <param name="isCanonical">True if canonical form used.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.Validator.ValidateGeneralizedTime(Oss.Asn1.GeneralizedTime,System.Boolean)">
            <summary>
            Checks that all the characters containing in a GeneralizedTime
            value belong to the permitted alphabet. Throws a
            ValidationException in case of a violation.
            </summary>
            <param name="value">GeneralizedTime value.</param>
            <param name="isCanonical">True if canonical form used.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.XERReader">
            <summary>
            Reads XML from a stream, TextReader or XmlReader
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.XERReader.Node">
            <summary>
            Enumerates possible types of node
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReader.ProcessEscapes">
            <summary>
            Specifies whether the &amp;amp;, &amp;ltl;, &amp;gt;, &amp;#n; and
            &amp;#xn; escapes are converted to the correspondimg Unicode characters.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReader.ReportWhitespace">
            <summary>
            Specifies whether the ignorable whitespace is reported as
            TEXT node.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReader.NodeType">
            <summary>
            The type of the current node.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReader.Name">
            <summary>
            The name of the start or the end tag.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReader.IsEmptyTag">
            <summary>
            Identifies that the start tag is actually an empty tag.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReader.Value">
            <summary>
            The content of the TEXT node or extra information for the UNKNOWN node.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.ReadNode">
            <summary>
            Fetches next node from the XML document
            </summary>
            <returns>'false' if the end of the input has been reached.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.Pushback(System.Boolean)">
            <summary>
            Unreads the current node. After the Pushback() method is invoked,
            the next call to the NextNode() will return the current node again.
            The 'special' parameter can be used to request the special pushback:
            when the current node is an empty-tag and the 'special' is 'true',
            the next call to the NextNode() will return END_TAG rather than START_TAG.
            This can be used to tranparently present an empty-tag as a start tag
            followed by the end tag.
            </summary>
            <param name="special">Requests the special pushback.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.SkipElement(System.String)">
            <summary>
            Skips the next XML element in input, including start and end tags and.
            the element content. 
            <param name="name">Specifies the name of the start tag.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.ReadElement(System.String)">
            <summary>
            Reads the next XML element, including start and end tags and.
            the element content, and saves it into the byte buffer using the
            UTF-8 encoding.
            </summary>
            <param name="name">Specifies the name of the start tag.</param>
            <returns>Octets in UTF8 encoding representing the XML element.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReader._hasUnread">
            <summary>
            Indicates that the node has been pushed back.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.Open">
            <summary>
            Initializes the reader.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.Close">
            <summary>
            Closes the XERReader and releases resources associated with it.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.HexDigit(System.Char)">
            <summary>
            Returns hex digit represented by the character or -1 if character
            is not a valid hex digit.
            </summary>
            <param name="ch">The character to convert to hex digit.</param>
            <returns>The value of hex digit or -1 if the character is not a valid hex digit.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.DecimalDigit(System.Char)">
            <summary>
            Returns decimal digit represented by the character or -1 if character
            is not a valid decimal digit.
            </summary>
            <param name="ch">The character to convert to decimal digit.</param>
            <returns>The value of the decimal digit or -1 if the character is not a valid decimal digit.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.IsWhiteSpace(System.Char)">
            <summary>
            Checks if the character is the permitted whitespace character (X.693 clause 8.1.4).
            </summary>
            <param name="ch">The character to check.</param>
            <returns>true if the character is the permitted whitespace character.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReader.FormatCurrentNode">
            <summary>
            Formats the current node to the string suitable for use in the
            diagnostic message.
            </summary>
            <returns>The string that describes the current node.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.XERXMLReader">
            <summary>
            The adapter class to read XER encoding from the arbitrary XmlReader
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERXMLReader._xmlReader">
            <summary>
            The XmlReader object where the XML input is read from.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERXMLReader._resync">
            <summary>
            Indicates that the XmlReader was repositioned to another node
            as the result of doing SkipElement() or ReadElement() and
            XERXmlReader needs to resync its internal state.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERXMLReader.Name">
            <summary>
            The name of the start or the end tag.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERXMLReader.IsEmptyTag">
            <summary>
            Identifies that the start tag is actually an empty tag.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERXMLReader.Value">
            <summary>
            The content of the TEXT node.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLReader.ReadNode">
            <summary>
            Fetches next node from the XML document
            </summary>
            <returns>'false' if the end of the input has been reached.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLReader.SkipElement(System.String)">
            <summary>
            Skips the next XML element in input, including start and end tags and.
            the element content. 
            <param name="name">Specifies the name of the start tag.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLReader.ReadElement(System.String)">
            <summary>
            Reads the next XML element, including start and end tags and.
            the element content, and saves it into the byte buffer using the
            UTF-8 encoding.
            </summary>
            <param name="name">Specifies the name of the start tag.</param>
            <returns>Octets in UTF8 encoding representing the XML element.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLReader.Open(System.Xml.XmlReader)">
            <summary>
            Initializes the XERXMLReader and makes it ready for input.
            </summary>
            <param name="xmlReader">The source of the XML input.</param>
            <returns>Initialized XERXMLReader that is ready to process the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLReader.Close">
            <summary>
            Closes the XERReader and releases resources associated with it.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CharSink">
            <summary>
            The lightweighted character accumulator.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CharSink.Buffer">
            <summary>
            The current buffer storage,
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CharSink.Limit">
            <summary>
            The start of unused space.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.CharSink.Length">
            <summary>
            Returns total number of accumulated characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CharSink._saved">
            <summary>
            Total number of saved characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CharSink._storage">
            <summary>
            The storage where buffers are saved.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.#ctor(System.Int32)">
            <summary>
            Creates new CharSink with the specified intial capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.#ctor">
            <summary>
            Creates the CharSink with the default capacity (64).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.Append(System.Char)">
            <summary>
            Appends the single character.
            </summary>
            <param name="ch">The character to append</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.Append(System.String)">
            <summary>
            Appends the string.
            </summary>
            <param name="s">The string to append</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.FlushBuffer(System.Char[])">
            <summary>
            Appends the buffer to the list of saved buffers.
            </summary>
            <param name="buffer">The buffer to append.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.Save">
            <summary>
            Saves the current buffer and alloocates the new one with
            the initial capacity.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.Flush">
            <summary>
            Concatenates all saved data, returns it as a string object and resets
            the object to the initial state.
            </summary>
            <returns>The string containing accumulated character data.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CharSink.Clear">
            <summary>
            Discards all saved data and resets the object to the initial state.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.XERReaderBase">
            <summary>
            Provides the common base for classes that read XML from the
            TextReader or from the Stream.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._hasUnreadChar">
            <summary>
            Indicates that the char has been unread.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._unreadChar">
            <summary>
            Specifies the value of the unread char
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._name">
            <summary>
            Tag name or "" if the current node is not a start-tag or end-tag.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._value">
            <summary>
            The value of TEXT node or "" if the current node is not the TEXT NODE.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._isEmpty">
            <summary>
            Is true when the start-tag is an empty-tag.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._nameOrValue">
            <summary>
            Temporary buffer used to accumulate tag names and TEX values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._skipping">
            <summary>
            Indicates that SkipElement() is in progress.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._capturing">
            <summary>
            Indicates that ReadElement() is in progress.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERReaderBase._buffer">
            <summary>
            Internal buffer to capture XML element and its children.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReaderBase.Name">
            <summary>
            The name of the start or the end tag.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReaderBase.IsEmptyTag">
            <summary>
            Identifies that the start tag is actually an empty tag.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XERReaderBase.Value">
            <summary>
            The content of the TEXT node.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.Open">
            <summary>
            Initializes the reader.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.Close">
            <summary>
            Closes the XERReader and releases resources associated with it.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.UngetChar(System.Int32)">
            <summary>
            Pushes back the specified char to the input so that the
            next call to GetChar() will return it.
            </summary>
            <param name="ch">The character to pushback.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.ReadNode">
            <summary>
            Fetches next node from the XML document
            </summary>
            <returns>'false' if the end of the input has been reached.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.ParseTagOrXmlDeclaration">
            <summary>
            Tries to parse start-tag, end-tag, empty-tag or XMLDeclaration.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.TryParseXmlDeclaration">
            <summary>
            Tries to parse the XML declaration.
            </summary>
            <returns>false if the XML does not look like an XMLDeclaration.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.ParseText(System.Int32)">
            <summary>
            Tries to parse the TEXT node.
            <param name="ch">The initial character.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.ParseEscape">
            <summary>
            Parses the known entity or #xHHHH/#DDDD escapes.
            </summary>
            <returns>The codepoint represented by the escape sequence</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.ParseHexCode(System.Int32@)">
            <summary>
            Parses the character code represented as the hexadecimal number.
            </summary>
            <param name="ch">On input - the character 'x', 
            on output - the character that terminated the hexadecimal number </param>
            <returns>The character code</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.ParseDecimalCode(System.Int32@)">
            <summary>
            Parses the character code represented as the decimal number.
            </summary>
            <param name="ch">On input - the initial decimal digit, 
            on output - the character that terminated the decimal number </param>
            <returns>The character code</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.IsValidCodepoint(System.Int32)">
            <summary>
            Checks if the 'ch' code represents the valid Unicode codepoint.
            </summary>
            <param name="ch">The character code to check.</param>
            <returns>True if 'ch' represents the valid codepoint.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.SkipElement(System.String)">
            <summary>
            Skips the next XML element in input, including start and end tags and.
            the element content. 
            <param name="element_name">Specifies the name of the start tag.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.ReadElement(System.String)">
            <summary>
            Reads the next XML element, including start and end tags and.
            the element content, and saves it into the byte buffer using the
            UTF-8 encoding.
            </summary>
            <param name="element_name">Specifies the name of the start tag.</param>
            <returns>Octets in UTF8 encoding representing the XML element.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.TryGetChar">
            <summary>
            Gets next character from the input. Returns -1 if no more data is
            available.
            </summary>
            <returns>The next character from the input or -1 if no more data is available.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.GetChar">
            <summary>
            Gets next character from the input. Throws the _more_input 
            error when no more data is available.
            </summary>
            <returns>The next character from the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.Read">
            <summary>
            Reads the next character from the input.
            </summary>
            <returns>Next character from the input or -1 if no more data is available.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.BeginCapture(System.String)">
            <summary>
            Begin capturing the XML and its children into the internal buffer.
            </summary>
            <param name="element_name">The name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERReaderBase.EndCapture">
            <summary>
            Terminates capturing mode and returns bytes, accumulated in the internal buffer.
            </summary>
            <returns>Captured bytes.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.XERTextReader">
            <summary>
            Implements reading the XML from the arbitrary TextReader
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERTextReader._reader">
            <summary>
            The TextReader object where the XML input is read from.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextReader.Open(System.IO.TextReader)">
            <summary>
            Initializes the XERTextReader and makes it ready for input.
            </summary>
            <param name="textReader">The source of the XML input.</param>
            <returns>Initialized XERTextReader that is ready to process the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextReader.Close">
            <summary>
            Closes the XERReader and releases resources associated with it.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextReader.Read">
            <summary>
            Reads the next character from the input.
            </summary>
            <returns>Next character from the input or -1 if no more data is available.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.XERStreamReader">
            <summary>
            Implements reading the XML to the arbitrary input Stream
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamReader._stream">
            <summary>
            The input stream where the XML input is read from.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamReader._surrogate">
            <summary>
            Identifies whether the surrogate pair is being read.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamReader._char">
            <summary>
            Internal buffer to store the surrogate pair.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamReader.Open(System.IO.Stream)">
            <summary>
            Initializes the XERStreamReader and makes it ready for input.
            </summary>
            <param name="stream">The source for XML input.</param>
            <returns>Initialized XERStreamReader that is ready to process the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamReader.Close">
            <summary>
            Closes the XERReader and releases resources associated with it.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamReader.ReadByte(System.Boolean)">
            <summary>
            Reads next byte from the _stream and saves it in the internal buffer
            if input capturing is in effect.
            </summary>
            <param name="abortOnEOF">Instructs the method that the exception must be thrown on EOF.</param>
            <returns>The byte read or -1 on EOF</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamReader.Read">
            <summary>
            Reads the next character from the input. When the 'abotrOnEOF' is 'true', the method
            reports EOF by throwing an exception instead of returning -1.
            </summary>
            <returns>Next character from the input or -1 if no more data is available.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.XerDecoder">
            <summary>
            Provides functionality for decoding PDUs and primitive types using basic XER encoding rules.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerDecoder._reader">
            <summary>
            The XERReader object to read XER-encoded data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerDecoder._xerXmlReader">
            <summary>
            The cached instance of the XERXMLReader adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerDecoder._xerTextReader">
            <summary>
            The cached instance of the XERTextReader adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerDecoder._xerStreamReader">
            <summary>
            The cached instance of the XERStreamReader adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerDecoder._codingContained">
            <summary>
            Indicates that the decoder was invoked to decode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XerDecoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated after the decoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XerDecoder.Options">
            <summary>
            XER decoder options
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.#ctor(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            Initializes the decoder object
            </summary>
            <param name="options">Initial options</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.NextNode">
            <summary>
            Retrieves the next node from the input XML document.
            </summary>
            <returns>The kind of the next node.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.Text">
            <summary>
            Asserts that the next node is TEXT and returns its content.
            </summary>
            <returns>The content of the TEXT node</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.EmptyTag(System.String)">
            <summary>
            Asserts that the next node is the empty tag with the specified name.
            </summary>
            <param name="name">Specifies the expected name of the tag.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.EmptyTag">
            <summary>
            Asserts that the next node in the document is an empty-tag and
            returns its name.
            </summary>
            <returns>The tag name.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.StartTag(System.String)">
            <summary>
            Asserts that the next node is the start tag or empty-tag with the specified name.
            If the node is an empty-tag, sets up the reader to return the fabricated END_TAG node
            on the next call to the NextNode().
            </summary>
            <param name="name">Specifies the expected name of the tag.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.StartTag">
            <summary>
            Asserts that the next node in the document is the start tag or empty-tag and returns its name.
            If the node is an empty-tag, sets up the reader to return the fabricated END_TAG node
            on the next call to the NextNode().
            </summary>
            <returns>The tag name.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.HasStartTag(System.String,System.Boolean)">
            <summary>
            Returns 'true' if the next node in the document is the start tag and its name
            matches the 'name' parameter. The 'peek' parameter specifies whether the matching 
            node is consumed (as if the StartTag(String) was invoked instead of the
            HasStartTag(String,bool)).
            </summary>
            <param name="name">The name of start tag to match.</param>
            <param name="peek">When the parameter is 'true' the method reports the result 
            of the check but does not consume the matching node.</param>
            <returns>true if the next node is the start tag with the matching name.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.PeekNextNode">
            <summary>
            Peeks the type of the next node in the input document.
            </summary>
            <returns>The type of the next node.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.HasMoreItems">
            <summary>
            Peeks the next node in the input. Returns false if the next node is the end tag.
            </summary>
            <returns>True if the next node in the input document is not the end-tag node.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.EndTag(System.String)">
            <summary>
            Asserts that the next node is the end tag with the specified name.
            </summary>
            <param name="name">Specifies the expected name of the tag.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.EndTag">
            <summary>
            Asserts that the next node in the document is the end tag and
            returns its name.
            </summary>
            <returns>The tag name.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.SkipElement(System.String)">
            <summary>
            Skips the next XML element in input, including start and end tags and.
            the element content. 
            <param name="name">Specifies the name of the start tag.</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeInt">
            <summary>
            Decodes the INTEGER value that fits 32-bit integer.
            </summary>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeLong">
            <summary>
            Decodes the INTEGER value that fits 64-bit integer.
            </summary>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeULong">
            <summary>
            Decodes the INTEGER value that fits 64-bit unsigned integer.
            </summary>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBigInt">
            <summary>
            Decodes the INTEGER value that is represented by the BigInteger.
            </summary>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBstring(System.Int32@)">
            <summary>
            Decodes the xmlbstring.
            </summary>
            <param name="count">Returns the length of the decoded string in bits.</param>
            <returns>The bits of the decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBitStringWithNamedBits">
            <summary>
            Decodes the value of BIT STRING with named bits.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBitStringWithNamedBits(System.Int32[])">
            <summary>
            Decodes size constrained BIT STRING with named bits.
            </summary>
            <param name="ranges">Ordered array of size constraint ranges.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBitString">
            <summary>
            Decodes the value of BIT STRING.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeNull(System.String)">
            <summary>
            Decodes the value of NULL type. When the value of NULL occurs in the
            XMLValueList the 'name' parameter specifies the NonParameterizedTypeName
            for the XMLValueOrEmpty production.
            </summary>
            <param name="name">specifies the NonParameterizedTypeName for the 
            XMLValueOrEmpty production when the value of NULL occurs in the
            XMLValueList. Is null otherwise</param>
            <returns>The value decoded.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeDouble">
            <summary>
            Decodes the REAL value. Recognizes special values, such as POSITIVE-INFINITY,
            NEGATIVE-INFINITY and NOT-A-NUMBER.
            </summary>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBoolean">
            <summary>
            Decodes the BOOLEAN value.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeHstring">
            <summary>
            Decodes the xmlhstring.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeOctetString">
            <summary>
            Decodes the value of the OCTET STRING.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.ReadXmlcstring">
            <summary>
            Reads the xmlcstring. Converts escapes and empty-tags representing control characters
            to their Unicode equivalents.
            </summary>
            <returns>The xmlcstring value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeXmlcstring">
            <summary>
            Decodes the xmlcstring. Converts escapes and empty-tags representing control characters
            to their Unicode equivalents.
            </summary>
            <returns>The xmlcstring value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeString">
            <summary>
            Decodes the value of the restricted character string (except the UniversalString) or the
            date/time type.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeNonUnicodeString">
            <summary>
            Decodes non-Unicode string, represented as byte[] (TeletexString, 
            VideotexString, GeneralString, GraphicString, ObjectDescriptor).
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes the value of OBJECT IDENTIFIER.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeOpenType(Oss.Asn1.BasePdu)">
            <summary>
            Decodes a PDU as open type
            </summary>
            <param name="pdu">PDU object</param>
            <returns>Open type object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeDeferredComponent``1">
            <summary>
            Decodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The decoded deferred component object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeOpenType">
            <summary>
            Decodes the value of open type.
            </summary>
            <returns>The decoded value as array of bytes.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeUniversalString">
            <summary>
            Decodes the value of the UniversalString.
            </summary>
            <returns>The value decoded.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeDecimal">
            <summary>
            Decodes the REAL value to the decimal representation.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeRelativeOid">
            <summary>
            Decodes the value of RELATIVE-OID.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeOSCC``1">
            <summary>
            Decode into octet string with content constraints 
            </summary>
            <typeparam name="T">PDU type </typeparam>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBSCC``1">
            <summary>
            Decode into bit string with content constraints 
            </summary>
            <typeparam name="T">PDU type </typeparam>
            <returns>An bit string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodePdu(System.IO.Stream,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from a stream.
            </summary>
            <param name="stream">The input stream containing XER encoding</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodePdu(System.IO.TextReader,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from text.
            </summary>
            <param name="textReader">The TextReader to feed the input XML</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodePdu(System.String,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from string.
            </summary>
            <param name="value">The string containing XML</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodePdu(System.Xml.XmlReader,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU by reading the XML from the XmlReader object.
            </summary>
            <param name="xmlReader">The XmlReader object that will provide the input XML.</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.InternalDecodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Decodes the PDU from XER encoding. If validation is enabled, validates
            that the decoded value satisfies constraints of the ASN.1 definitions.
            </summary>
            <param name="pdu">The output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeType(Oss.Asn1.BaseType,System.Boolean)">
            <summary>
            Decodes the value of the specified type.
            </summary>
            <param name="type">output data object</param>
            <param name="decodeContentOnly">'false' indicates that XMLTypedValue is expected 
            (the value surrounded by the start/end tags with the type name)</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeBSCCPdu``1(Oss.Asn1.BitString)">
            <summary>
            Decodes the PDU contained in the BIT STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.DecodeOSCCPdu``1(System.Byte[])">
            <summary>
            Decodes the PDU contained in the OCTET STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.XerDecoder._recursionDepth">
            <summary>
            Tracks the depth of recursive calls.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XerDecoder.Depth">
            <summary>
            This property is for the internal use only and should not be utilized by the
            application code. It reflects the current depth of recursion when decoding
            values of types with circular definitions. The property is also used to pass
            the current depth of recursion to the child coder when circular definition
            includes OCTET STRING or BIT STRING with the content constraint.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.EnterRecursive">
            <summary>
            Informs the decoder that it enters the next level of
            recursion when decoding the value of type with the circular
            definition.
            <exception cref="T:System.InvalidOperationException">
            If the recursion depth exceeds the limit, specified by the
            RecursionLimit option.
            </exception>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerDecoder.LeaveRecursive">
            <summary>
            Informs the decoder that the innermost recursive invocation
            is completed.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERConstants._hexDigits">
            <summary>
            String which contains the hex alphabet.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERConstants._controlChars">
            <summary>
            Array with escape codes for ASCII control characters.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERConstants._controlCharsMap">
            <summary>
            Maps the empty-tag, representing the control character, to the character value.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERConstants.ControlChar(System.Int32)">
            <summary>
            Converts the code of the control character to the name of the empty-tag. For HT, LF, CR and
            for non-control characters the method returns null.
            </summary>
            <param name="code">The integer code of the character.</param>
            <returns>The corresponding name of the empty-tag or null.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERConstants.ValueOfControlChar(System.String)">
            <summary>
            Converts the name of empty-tag to the code of the corresponding control
            character. If the name does not correspond to the name of control character
            the -1 is returned.
            </summary>
            <param name="name">The name of the control character.</param>
            <returns>The code if the control character or -1 if the name is not recognized.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.XERConstants._plusINF">
            <summary>
            Tag name for REAL +infinity
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERConstants._minusINF">
            <summary>
            Tag name for REAL -infinity
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERConstants._NaN">
            <summary>
            Tag name for REAL NaN
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.XERWriter">
            <summary>
            Writes XML to a stream, TextWriter or XmlWriter
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.StartTag(System.String)">
            <summary>
            Writes XML start tag to the output.
            </summary>
            <param name="tag">the start tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.EmptyTag(System.String)">
            <summary>
            Writes an empty XML tag to the output.
            </summary>
            <param name="tag">the tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.EndTag(System.String)">
            <summary>
            Writes an XML ent tag to the output.
            </summary>
            <param name="tag">the end tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.StartDocument">
            <summary>
            Writes xml declaration to the output.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.WriteValue(System.Int64)">
            <summary>
            Writes integer value.
            </summary>
            <param name="value">the value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.WriteValue(System.String)">
            <summary>
            Writes the string value.
            </summary>
            <param name="value">the value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes characters to the output.
            </summary>
            <param name="value">the characters to write.</param>
            <param name="index">the index of first character to write.</param>
            <param name="count">the total number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.WriteEntityRef(System.String)">
            <summary>
            Writes entity reference in the form '&amp;name;'
            </summary>
            <param name="name">the entity name.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.IgnorableWhitespace(System.String)">
            <summary>
            Wriites the specified amount of the ignorable whitespace.
            </summary>
            <param name="whitespace">Specifies the whitespace characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.WriteRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a raw markup.
            </summary>
            <param name="buffer">An array of bytes containing the raw markup.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.WriteRaw(System.Byte[])">
            <summary>
            Writes a raw markup.
            </summary>
            <param name="raw">An array of bytes containing the raw markup.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriter.Close">
            <summary>
            Closes the XERWriter and releases resources associated with it.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.XERXMLWriter">
            <summary>
            The adapter class to write XER encoding to the arbitrary XmlWriter
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERXMLWriter._xmlWriter">
            <summary>
            The XmlWriter object where the encoding is sent.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.Open(System.Xml.XmlWriter)">
            <summary>
            Initializes the XERXMLWriter and makes it ready for output.
            </summary>
            <param name="xmlWriter">The target for the XML output.</param>
            <returns>Initialized XERXMLWriter that is ready to receive the output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.StartTag(System.String)">
            <summary>
            Writes XML start tag to the output.
            </summary>
            <param name="tag">the start tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.EmptyTag(System.String)">
            <summary>
            Writes an empty XML tag to the output.
            </summary>
            <param name="tag">the tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.EndTag(System.String)">
            <summary>
            Writes an XML ent tag to the output.
            </summary>
            <param name="tag">the end tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.StartDocument">
            <summary>
            Writes xml declaration to the output.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.WriteValue(System.Int64)">
            <summary>
            Writes integer value.
            </summary>
            <param name="value">the value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.WriteValue(System.String)">
            <summary>
            Writes the string value.
            </summary>
            <param name="value">the value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes characters to the output.
            </summary>
            <param name="value">the characters to write.</param>
            <param name="index">the index of first character to write.</param>
            <param name="count">the total number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.WriteEntityRef(System.String)">
            <summary>
            Writes entity reference in the form '&amp;name;'
            </summary>
            <param name="name">the entity name.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.IgnorableWhitespace(System.String)">
            <summary>
            Wriites the specified amount of the ignorable whitespace.
            </summary>
            <param name="whitespace">Specifies the whitespace characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.WriteRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a raw markup.
            </summary>
            <param name="buffer">An array of bytes containing the raw markup.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.WriteRaw(System.Byte[])">
            <summary>
            Writes the raw markup.
            </summary>
            <param name="raw">the string containing the raw markup.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERXMLWriter.Close">
            <summary>
            Closes the XERWriter and releases resources associated with it.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.XERWriterBase">
            <summary>
            Provides the common base for classes that write XML to the
            TextWriter or to the Stream.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.Write(System.Char)">
            <summary>
            Writes single character to the output.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.Write(System.String)">
            <summary>
            Writes the string to the output.
            </summary>
            <param name="s">The string to write</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.StartTag(System.String)">
            <summary>
            Writes XML start tag to the output.
            </summary>
            <param name="tag">the start tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.EmptyTag(System.String)">
            <summary>
            Writes an empty XML tag to the output.
            </summary>
            <param name="tag">the tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.EndTag(System.String)">
            <summary>
            Writes an XML ent tag to the output.
            </summary>
            <param name="tag">the end tag to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.WriteValue(System.String)">
            <summary>
            Writes the string value.
            </summary>
            <param name="value">the value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.WriteEntityRef(System.String)">
            <summary>
            Writes entity reference in the form '&amp;name;'
            </summary>
            <param name="name">the entity name.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERWriterBase.IgnorableWhitespace(System.String)">
            <summary>
            Wriites the specified amount of the ignorable whitespace.
            </summary>
            <param name="whitespace">Specifies the whitespace characters to write.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.XERTextWriter">
            <summary>
            Implements writing the XML to the arbitrary TextWriter
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERTextWriter._writer">
            <summary>
            The TextWriter object where the XML output is sent.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.Open(System.IO.TextWriter)">
            <summary>
            Initializes the XERTextWriter and makes it ready for output.
            </summary>
            <param name="textWriter">The target for XML output.</param>
            <returns>Initialized XERTextWriter that is ready to receive the output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.Write(System.Char)">
            <summary>
            Writes single character to the output.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.Write(System.String)">
            <summary>
            Writes the string to the output.
            </summary>
            <param name="s">The string to write</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.StartDocument">
            <summary>
            Writes xml declaration to the output.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes integer value.
            </summary>
            <param name="value">the value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes characters to the output.
            </summary>
            <param name="value">the characters to write.</param>
            <param name="index">the index of first character to write.</param>
            <param name="count">the total number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.WriteRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a raw markup.
            </summary>
            <param name="buffer">An array of bytes containing the raw markup.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.WriteRaw(System.Byte[])">
            <summary>
            Writes the raw markup.
            </summary>
            <param name="raw">the string containing the raw markup.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERTextWriter.Close">
            <summary>
            Closes the XERWriter and releases resources associated with it.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.XERStreamWriter">
            <summary>
            Implements writing the XML to the arbitrary output Stream
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamWriter._stream">
            <summary>
            The output stream where the XML is written.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamWriter._surrogate">
            <summary>
            Indicates that processing of surrogate pair is pending
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamWriter._high_surrogate">
            <summary>
            The value of high surrogate character.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamWriter._buffer">
            <summary>
            Internal output buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamWriter._bufferLen">
            <summary>
            The length of the internal buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XERStreamWriter._bufferPos">
            <summary>
            The position in the internal bufer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.Open(System.IO.Stream)">
            <summary>
            Initializes the XERStreamWriter and makes it ready for output.
            </summary>
            <param name="stream">The target for XML output.</param>
            <returns>Initialized XERStreamWriter that is ready to receive the output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.EnsureAvailable(System.Int32)">
            <summary>
            Ensures that the buffer has extra capacity to accomodate data.
            </summary>
            <param name="extra">The extra capacity in bytes.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.WriteUTF8(System.Int32)">
            <summary>
            Writes the UNICODE codepoint to the output using the UTF8 encoding.
            </summary>
            <param name="codepoint">The value of the codepoint.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.Write(System.Char)">
            <summary>
            Writes single character to the output.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.WriteASCII(System.Char)">
            <summary>
            Writes single [0..0x7F] character to the output.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.Write(System.String)">
            <summary>
            Writes the string to the output.
            </summary>
            <param name="s">The string to write</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.StartDocument">
            <summary>
            Writes xml declaration to the output.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.WriteValue(System.Int64)">
            <summary>
            Writes integer value.
            </summary>
            <param name="value">the value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes characters to the output.
            </summary>
            <param name="value">the characters to write.</param>
            <param name="index">the index of first character to write.</param>
            <param name="count">the total number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.WriteRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the raw markup.
            </summary>
            <param name="buffer">An array of bytes containing the raw markup.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.WriteRaw(System.Byte[])">
            <summary>
            Writes the raw markup.
            </summary>
            <param name="raw">The byte array containing the raw markup.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.FlushBuffer">
            <summary>
            Flushes the internal buffer to the output.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.Finish">
            <summary>
            Check consistency of the encoding characters.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XERStreamWriter.Close">
            <summary>
            Closes the XERWriter and releases resources associated with it.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.XerEncoder">
            <summary>
            Provides functionality for encoding PDUs and primitive types using basic XER encoding rules.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._writer">
            <summary>
            The XERWriter object to write XER-encoded data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._xerXmlWriter">
            <summary>
            The cached instance of the XERXMLWriter adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._xerTextWriter">
            <summary>
            The cached instance of the XERTextWriter adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._xerStreamWriter">
            <summary>
            The cached instance of the XERStreamWriter adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._prettyFormat">
            <summary>
            Insert ignorable whitespace to pretty-format output XML.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._writingToXmlWriter">
            <summary>
            Identifies that we are encoding to the XmlWriter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._startTag">
            <summary>
            Used to merge adjacent StartTag/EndTag into an empty tag.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._indentLevel">
            <summary>
            Tracks the indentation level.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._indentString">
            <summary>
            The complete indentation string corresponding to the current indentation level.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._indentList">
            <summary>
            A list where the indentation strings for all occured indentation levels are cached.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._firstLine">
            <summary>
            Used to avoid empty line at the beginning of the XML.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._primitiveContent">
            <summary>
            Suppresses the newline when printing the end tag.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._codingContained">
            <summary>
            Indicates that the encoder was invoked to encode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XerEncoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated before the encoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.XerEncoder.Options">
            <summary>
            The encoder options which can be used to modify the behavior of the XER encoder. These
            options have no effect when encoding to the XmlWriter (the corresponding options from the
            XmlWriterSettings are used instead).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.#ctor(Oss.Asn1.XerEncoderOptions)">
            <summary>
            Constructs a new instance using the provided option object. The 'options'
            have no effect when encoding to the XmlWriter (the corresponding options from the
            XmlWriterSettings are used instead).
            </summary>
            <param name="options">The object which specifies the options to be used during encoding.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.FlushTag(System.String)">
            <summary>
            Flushes queued start tag to the output and queues the next tag.
            </summary>
            <param name="next">next XML start tag to queue (can be null)</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.StartTag(System.String)">
            <summary>
            Inserts opening XML tag (start tag) into the encoding. The start tag is not immediately
            written to the output but is queued until the next call to the StartTag(),
            EmptyTag(), EndTag() or write of the CHARACTER data. If the next call is the
            EndTag() with matching name, the StartTag/EndTag pair is replaced by the single XML
            empty tag.
            </summary>
            <param name="tag">the XML start tag to insert.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EndTag(System.String)">
            <summary>
            Inserts closing XML tag (end tag) into the encoding. If the XML element has empty
            content, replaces StartTag/EndTag pair by the single empty XML tag.
            </summary>
            <param name="tag">the XML end tag to insert</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeType(Oss.Asn1.BaseType,System.Boolean)">
            <summary>
            Helper method used to encode a value.
            </summary>
            <param name="type">Value to be encoded.</param>
            <param name="contentOnly">>Whether or not to append tag to the raw data</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.TextWriter)">
            <summary>
            Encodes a PDU and writes the encoded data using the provided TextWriter object.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="textWriter">The TextWriter object used to write the encoded data.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes a PDU and writes the encoded data in the provided stream. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="stream">The stream in which the encoded data is written.</param>
            <returns>The size of the encoded data in bytes. If the stream does not support seek operations -1 is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU and returns the encoded data as a String object. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <returns>The encoded data as a String object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Xml.XmlWriter)">
            <summary>
            Encodes a PDU and sends the encoded data to the provided XmlWriter object.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="xmlWriter">>The XmltWriter object used to send the encoded data.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.InternalEncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Internal helper method used to encode a PDU.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeEnumerated(System.String,System.Boolean)">
            <summary>
            Encodes the value of ENUMERATED as empty tag. The value is the
            ASN.1 name of the enumerator.
            </summary>
            <param name="value">the value of ENUMERATED to encode</param>
            <param name="isInValueList">indicates that the value occurs inside the XMLValueList</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeInteger(System.Int64)">
            <summary>
            Encodes an INTEGER value (int or long).
            </summary>
            <param name="value">the INTEGER value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeInteger(System.UInt64)">
            <summary>
            Encodes an INTEGER value (ulong).
            </summary>
            <param name="value">the INTEGER value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeBigInteger(System.String)">
            <summary>
            Encodes an INTEGER value represented by the BigInteger.
            </summary>
            <param name="value">the INTEGER value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeBString(System.Byte[],System.Int32)">
            <summary>
            Encodes the binary data as xmlbstring.
            </summary>
            <param name="buffer">the value to encode.</param>
            <param name="length">the length of data in bits.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeBitString(Oss.Asn1.BitString)">
            <summary>
            Encodes the value of BIT STRING as xmlbstring.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeNull(System.String)">
            <summary>
            Encodes the value of NULL type. When the value of NULL occurs in the
            XMLValueList the 'name' parameter specifies the NonParameterizedTypeName
            for the XMLValueOrEmpty production.
            <param name="name">specifies the NonParameterizedTypeName for the 
            XMLValueOrEmpty production when the value of NULL occurs in the
            XMLValueList. Is null otherwise</param>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeDouble(System.Double)">
            <summary>
            Encodes the value of binary REAL.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeDecimal(System.Decimal)">
            <summary>
            Encodes the value of decimal REAL.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeBoolean(System.Boolean,System.Boolean)">
            <summary>
            Encodes the BOOLEAN value.
            </summary>
            <param name="value">the value to encode.</param>
            <param name="isInValueList">indicates that the value occurs inside the XMLValueList</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeOctetString(System.Byte[])">
            <summary>
            Encodes the value of the OCTET STRING as xmlhstring.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Encodes the value of OBJECT IDENTIFIER.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Encodes the value of RELATIVE-OID.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes the value of UTCTime.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes the value of GeneralizedTime.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeOSCC(Oss.Asn1.BasePdu,System.Boolean)">
            <summary>
            Encodes the value contained in the  OctetStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded</param>
            <param name="xmlTypedValueAllowed">Specifies that the XMLTypedValue encoding is allowed</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeBSCC(Oss.Asn1.BasePdu,System.Boolean)">
            <summary>
            Encodes the value contained in the BitStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded.</param>
            <param name="xmlTypedValueAllowed">Specifies that the XMLTypedValue encoding is allowed</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes the value of open type.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Encodes a deferred component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="dc">The deferred component value to be encoded.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeUniversalString(System.Int32[])">
            <summary>
            Encodes the value of UniversalString. Control characters are replaced by 
            appropriate empty elements as specified by the Table 3 of
            clause 12.5.5 of X.680. The '&amp;', '&lt;' and '&gt;' characters are
            replaced by the '&amp;amp;', '&amp;lt;' and '&amp;gt;' entities accordingly.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeString(System.String)">
            <summary>
            Encodes the string value. Control characters are replaced by 
            appropriate empty elements as specified by the Table 3 of
            clause 12.5.5 of X.680. The '&amp;', '&lt;' and '&gt;' characters are
            replaced by the '&amp;', '&lt;' and '&gt;' entites accordingly.
            </summary>
            <param name="value">the string value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeNonUnicodeString(System.Byte[])">
            <summary>
            Encodes non-Unicode string, represented as byte[] (TeletexString, 
            VideotexString, GeneralString, GraphicString, ObjectDescriptor).
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.EncodeStringFragment(System.String,System.Int32,System.Int32)">
            <summary>
            Helper method used to encode a fragment of a string.
            </summary>
            <param name="value">String from which to get the chars to be encoded.</param>
            <param name="startPos">The position of the first char to be encoded.</param>
            <param name="endPos">The position before which the encoding should stop.</param>
            <returns>The index after the endPos.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.Newline">
            <summary>
            Prints characters forming a new line in encoding.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.Indent">
            <summary>
            Increments the indentation level.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.XerEncoder.Undent">
            <summary>
            Decrements the indentation level.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder._charBuffer">
            <summary>
            Char buffer used for encoding strings.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.XerEncoder.ZeroOne">
            <summary>
            Char buffer used to encode BIT STRING bits.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CxerEncoder">
            <summary>
            Provides functionality for encoding PDUs and primitive types using basic CXER encoding rules.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding">
            <summary>
            Auxiliary class used for organization of temporary storage for already encoded
            message parts.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.ElementEncoding">
            <summary>
            Stores encoding of one SET OF element.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.ElementEncoding.Length">
            <summary>
            Length of the encoding of a SET OF element.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.ElementEncoding.Offset">
            <summary>
            Offset of the beginning of the encoding of a SET OF element
            in the encoding buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.ElementEncoding.Set(System.Int32,System.Int32)">
            <summary>
            Initializes this ElementEncoding object.
            </summary>
            <param name="length">Length of the encoding of a SET OF element.</param>
            <param name="offset">Offset of the beginning of the encoding of a SET OF element
            in the encoding buffer.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.ElementEncoding.Compare(System.Byte[],Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.ElementEncoding@)">
            <summary>
            Compares this ElementEncoding with another ElementEncoding according
            to the octet strings order specified in X.690-200811 11.6.
            </summary>
            <param name="buffer">The byte array where all encodings of
            SET OF elements are stored.</param>
            <param name="other">A reference to an ElementEncoding object.</param>
            <returns>-1 if the first byte that does not match has a lower value in this than in other;
            0 if the contents of both ElementEncoding are equal;
            1 if the first byte that does not match has a greater value in this than in other.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.OrderIndices">
            <summary>
            The array of ElementEncodings indices to allow
            access to encodings of SET OF elements in their CXER order.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.ElementEncodings">
            <summary>
            The array of ElementEncodings to store
            encodings of SET OF elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.Count">
            <summary>
            The current number of stored encodings of SET OF elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.PreviousPosition">
            <summary>
            The CxerArrayEncoder.Index value saved at the
            previous call of CxerArrayEncoder.AddElementEncoding().
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.EncodedTag">
            <summary>
            Byte array where encoded tag is stored.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Constructor that creates a SetOfEncoding object for the given
            number of SET OF elments.
            </summary>
            <param name="capacity">The number of SET OF element which will be stored
            in the constructed SetOfEncoding object.</param>
            <param name="position">Starting position in the external memory buffer
            where encoding of elements is stored.</param>
            <param name="encodedTag">Byte array where encoded tag is stored.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.SetOfEncoding.SortEncodings(System.Byte[])">
            <summary>
            Sort the encodings of SET OF elements.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.CxerEncoder.CXERXMLWriter">
            <summary>
            The adapter class to write Canonical XER encoding to the arbitrary XmlWriter
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.CXERXMLWriter.EmptyTag(System.String)">
            <summary>
            Writes an empty XML tag without whitespaces in it.
            </summary>
            <param name="tag">the tag to write.</param>
        </member>
        <member name="P:Oss.Asn1.Internal.CxerEncoder.Options">
            <summary>
            CXER-specific encoder options
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.#ctor(Oss.Asn1.CxerEncoderOptions)">
            <summary>
            Initializes Encoder with options
            </summary>
            <param name="options">Initial options</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeType(Oss.Asn1.BaseType,System.Boolean)">
            <summary>
            Encodes value of a BaseType type.
            The method is used in the encoder generated code.
            </summary>
            <param name="value">Value to be encoded.</param>
            <param name="contentOnly">>Whether or not to append tag to the value encoding.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.AllocBuffer(System.Int32)">
            <summary>
            Allocates memory for the encoding buffer
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.AllocBuffer(System.Int32,System.String)">
            <summary>
            Allocates memory for the encoding buffer
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU and returns the encoded data as a String object. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <returns>The encoded data as a String object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.TextWriter)">
            <summary>
            Encodes a PDU and writes the encoded data using the provided TextWriter object.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="textWriter">The TextWriter object used to write the encoded data.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes a PDU and writes the encoded data in the provided stream. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="stream">The stream in which the encoded data is written.</param>
            <returns>The size of the encoded data in bytes. If the stream does not support seek operations -1 is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Xml.XmlWriter)">
            <summary>
            Encodes a PDU and sends the encoded data to the provided XmlWriter object.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="xmlWriter">>The XmltWriter object used to send the encoded data.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.InternalEncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Internal helper method used to encode a PDU.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.WriteElementEnd">
            <summary>
            Writes &lt; denoting the end of an element.        
            </summary>        
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.AddUntaggedEncoding(Oss.Asn1.Internal.CxerEncoder.SetOfEncoding)">
            <summary>
            Cuts the encoding of a SET OF element from the current encoding and
            adds it to the given SetOfEncoding object.
            </summary>
            <param name="sofe">A reference of a SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.AddTaggedEncoding(Oss.Asn1.Internal.CxerEncoder.SetOfEncoding)">
            <summary>
            Cuts the encoding of a SET OF element from the current encoding and
            adds it to the given SetOfEncoding object.
            </summary>
            <param name="sofe">A reference of a SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.CopyEncoding(Oss.Asn1.Internal.CxerEncoder,Oss.Asn1.Internal.CxerEncoder.SetOfEncoding)">
            <summary>
            Copies the encoding of all SET OF elements from a source
            SetOfEncoding object to the target encoding in the
            given CxerEncoder.
            </summary>
            <param name="dst">The destination CxerEncoder object.</param>
            <param name="sofe">The source SetOfEncoding object.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.CopyEncoding(Oss.Asn1.Internal.CxerEncoder,Oss.Asn1.Internal.CxerEncoder.SetOfEncoding,System.String)">
            <summary>
            Copies the encoding of all SET OF elements from a source
            SetOfEncoding object to the target encoding in the
            given CxerEncoder.
            </summary>
            <param name="dst">The destination CxerEncoder object.</param>
            <param name="sofe">The source SetOfEncoding object.</param>
            <param name="tag">The embracing tag.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EndTag(System.String)">
            <summary>
            Inserts closing XML tag (end tag) into the encoding. If the XML element has empty
            content, replaces StartTag/EndTag pair by the single empty XML tag.
            </summary>
            <param name="tag">the XML end tag to insert</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeOSCC(Oss.Asn1.BasePdu,System.Boolean)">
            <summary>
            Encodes the value contained in the OctetStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded</param>
            <param name="xmlTypedValueAllowed">Specifies that the XMLTypedValue encoding is allowed</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeBSCC(Oss.Asn1.BasePdu,System.Boolean)">
            <summary>
            Encodes the value contained in the BitStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded.</param>
            <param name="xmlTypedValueAllowed">Specifies that the XMLTypedValue encoding is allowed</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.WriteEncodedXMLTypedValue(Oss.Asn1.BitString)">
            <summary>
            Write encoded OctetString value contained in the OctetStringWithContentsConstraint
            as XMLTypedValue.
            </summary>
            <param name="encoded">The value to be encoded</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.WriteEncodedXMLTypedValue(System.Byte[])">
            <summary>
            Write encoded BitString value contained in the BitStringWithContentsConstraint
            as XMLTypedValue.
            </summary>
            <param name="encoded">The value to be encoded</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes the value of open type.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeDouble(System.Double)">
            <summary>
            Encodes binary REAL according to X.693-200811 clause 9.2.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeDecimal(System.Decimal)">
            <summary>
            Encodes decimal REAL according to X.693 (11/2008) clause 9.2.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes GeneralizedTime according to X.693 (11/2008) clause 9.10.
            </summary>
            <param name="value">GeneralizedTime to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes UTCTime according to X.693 (11/2008)  clause 9.11.
            </summary>
            <param name="value">UTCTime to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeBitStringCanonical(Oss.Asn1.BitStringWithNamedBits)">
            <summary>
            Encodes BitStringWithNamedBits according to X.693 (11/2008) clause 9.3.
            </summary>
            <param name="value">BitStringWithNamedBits to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeISO8601String(System.String)">
            <summary>
            Encodes ISO 8601 string, representing a value of the TIME type according to X.693 (11/2008) clause 9.13.
            </summary>
            <param name="value">The value in the ISO 8601 format.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded.</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeDate(System.String)">
            <summary>
            Encodes DATE value according to X.693 (11/2008) clause 9.13.
            </summary>
            <param name="value">Value to encode.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeTimeOfDay(System.String)">
            <summary>
            Encodes TIME-OF-DAY value according to X.693 (11/2008) clause 9.13.
            </summary>
            <param name="value">Value to encode.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeDateTime(System.String)">
            <summary>
            Encodes DATE-TIME value according to X.693 (11/2008) clause 9.13.
            </summary>
            <param name="value">Value to encode.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.Internal.CxerEncoder.EncodeDuration(System.String)">
            <summary>
            Encodes DURATION value according to X.693 (11/2008) clause 9.13.
            </summary>
            <param name="value">Value to encode.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="T:Oss.Asn1.Internal.NodeType">
            <summary>
            The type of the current node.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.NodeType.None">
            <summary>
            Used to indicate the initial state.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.NodeType.Attribute">
            <summary>
            The decoder is working with the attribute. The following properties are available:
            LocalName, Prefix, NamespaceURI, NamespaceID, Value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.NodeType.Element">
            <summary>
            The decoder is positioned on a StartTag or EmptyTag. The following properties are available:
            LocalName, Prefix, NamespaceURI, NamespaceID, IsEmptyElement.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.NodeType.EndElement">
            <summary>
            The decoder is positioned on an EndTag.  The following properties are available:
            LocalName, Prefix, NamespaceURI, NamespaceID.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.NodeType.Text">
            <summary>
            The decoder is positioned on a character content. The following property is available:
            Value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.NodeType.ListItem">
            <summary>
            The decoder is working with LIST item. The following property is available:
            Value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.NodeType.UnionItem">
            <summary>
            The decoder is working with the alternative of a CHOICE with the USE-UNION. 
            The following property is available: Value.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.EXERReader">
            <summary>
            Common base for adapter classes.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerTextReader">
            <summary>
            The adapter class to read EXER encoding from the arbitrary TextReader
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerTextReader._reader">
            <summary>
            The TextReader object where the XML input is read from.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextReader.Open(System.IO.TextReader)">
            <summary>
            Initializes the ExerTextReader and makes it ready for input.
            </summary>
            <param name="textReader">The source of the XML input.</param>
            <returns>Initialized ExerTextReader that is ready to process the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextReader.Close">
            <summary>
            Closes the ExerTextReader and releases resources associated with it.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerStreamReader">
            <summary>
            The adapter class to read EXER encoding from the arbitrary Stream
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerStreamReader._stream">
            <summary>
            The input stream where the XML input is read from.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamReader.Open(System.IO.Stream)">
            <summary>
            Initializes the ExerStreamReader and makes it ready for input.
            </summary>
            <param name="stream">The source for XML input.</param>
            <returns>Initialized ExerStreamReader that is ready to process the input.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamReader.Close">
            <summary>
            Closes the ExerStreamReader and releases resources associated with it.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerDecoder">
            <summary>
            Provides functionality for decoding of PDU and primitive types using EXER.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues">
            <summary>
            Accumulates the text encoded between XML elements to fill the value of the
            corresponding field of a SEQUENCE/SET with the EMBED-VALUES encoding
            instruction.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues._values">
            <summary>
            The list of collected strings.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues._defaultForEmpty">
            <summary>
            Defines the sole value for EMBED-VALUES when the content of enclosing 
            element is empty and the type has the DEFAULT-FOR-EMPTYEI applied.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.Scope">
            <summary>
            Identifies the scope  where the EMBED-VALUES is in effect.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.Whitespace">
            <summary>
            Specifies the WHITESPACE mode for embedded values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.HadText">
            <summary>
            Indicates if some text has been added since last start tag.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.Nil">
            <summary>
            The property is 'true' when the type with the EMBED-VALUES EI has
            also the final USE-NIL instruction and the supporting component of
            the USE-NIL is absent.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.Count">
            <summary>
            Returns the current count of accumulated embedded values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.#ctor(System.Collections.Generic.List{System.String},System.Int32,Oss.Asn1.Internal.ExerConstants.Whitespace,System.String,System.Boolean)">
            <summary>
            Constructs the EmbeddedValues object.
            </summary>
            <param name="values">The list where the collected text is accumalated.</param>
            <param name="scope_id">Identifies the scope where the EMBED-VALUES 
            is in effect</param>
            <param name="whitespace">Specifies the whitespace mode.</param>
            <param name="defaultForEmpty">Defines the sole value for EMBED-VALUES when
            the content of enclosing element is empty and the type has the 
            DEFAULT-FOR-EMPTYEI applied.
            </param>
            <param name="nil">Is 'true' when the type with the EMBED-VALUES EI has
            also the final USE-NIL instruction and the supporting component of
            the USE-NIL is absent.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.Add(System.String)">
            <summary>
            Adds the string to the list of embedded values.
            </summary>
            <param name="value">The string to add.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EmbeddedValues.Complete">
            <summary>
            Completes the accumulation of embedded value.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerDecoder.NamespaceManager">
            <summary>
            Maps namespace prefixes to namespace descriptors.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Entry">
            <summary>
            The namespace descriptor provides information about the namespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Entry.Prefix">
            <summary>
            Specifies the prefix associated with the namespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Entry.URI">
            <summary>
            Specifies the namespace name (URI).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Entry.Id">
            <summary>
            Specifies the numeric identifier of the namespace (the
            index into the namespace table). Is set to -2 for namespaces
            that are not in the namespace table (that come from UES-QNAME
            and ANY-ATTRIBUTES).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Entry.Prev">
            <summary>
            References the previous outer namespace declaration that uses
            the same prefix.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager._xml">
            <summary>
            Special entry for "http://www.w3.org/XML/1998/namespace" built-in namespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager._map">
            <summary>
            Maps prefixes to namespace desriptors.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager._known">
            <summary>
            Maps namespace names (URIs) to numeric identifiers.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager._entries">
            <summary>
            Specifies the list of namespace declarations, visible in the
            current scope.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager._emptyScopes">
            <summary>
            Memorizes the number of consequitive scopes at the outer levels 
            where no additional namespaces have been declared.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder.NamespaceManager._empty">
            <summary>
            Memorizes the number of consequitive scopes where no additional
            namespaces have been declared.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.DefaultNamespace">
            <summary>
            Gets the namespace descriptor for the default namespace. Returns
            null if there is no default namespace in the scope.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Namespaces">
            <summary>
            Returns the enumeration of namespaces which declararions are
            visible in the current scope.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.NamespaceCount">
            <summary>
            Returns the number of namespace declarations in the current
            scope.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.#ctor(Oss.Asn1.Internal.ExerNamespace[])">
            <summary>
            Creates and initializes the NamespaceManager.
            </summary>
            <param name="known">The table of predefined namespaces.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Clear">
            <summary>
            Resets the NamespaceManager to the initial state.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.UpdateDefaultNamespace(Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Entry)">
            <summary>
            Updates the descriptor of the default namespace. When 'e' is null
            or the e.URI is an empty string the default namespace is disabled.
            </summary>
            <param name="e">The new setting for the default namespace.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.AddNamespace(System.String,System.String)">
            <summary>
            Adds new namespace declaration. If the specified prefix is already associated
            with some URI the previous association is memorized and is restored when this
            new declaration goes out of scope. If the URI of the previous association is
            identical to the specified URI the method does nothing.
            </summary>
            <param name="prefix">The prefix associated with the namespace.</param>
            <param name="uri">The namespace name (URI).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.PushScope">
            <summary>
            Marks the beginning of the new scope.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.PopScope">
            <summary>
            Removes all associations added since last
            PushScope().
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Lookup(System.String)">
            <summary>
            Looks up the namespace descriptor associated with the
            specified prefix in the current  scope.
            </summary>
            <param name="prefix">Spefies the prefix to look up.</param>
            <returns>The namespace descriptor associated with the specified prefix
            or null if the association does not exist.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._reader">
            <summary>
            The EXERReader object to read EXER-encoded data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._codingContained">
            <summary>
            Indicates that the decoder was invoked to decode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated after the decoding
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._embeddedValues">
            <summary>
            Stores the innermost accumulator of embedded values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._embeddedValuesStack">
            <summary>
            Saves outer accumulators of embedded values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._scopeID">
            <summary>
            Tracks the current nesting level.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._whitespaceMode">
            <summary>
            Tracks the whitespace handling mode.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.CollectingEmbeddedValues">
            <summary>
            Returns true if the EMBED-VALUES EI is in effect.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._namespaces">
            <summary>
            The collection of namespaces, referenced by the NAMESPACE and the CONTROL-NAMESPACE EIs
            in the ASN.1 specification.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._nsmanager">
            <summary>
            Tracks namespace declarations in the current scope.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._controlNS_id">
            <summary>
            The index of the control namespace entry in the namespace table.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._pushed_back">
            <summary>
            Indicates that the node has been pushed back and next call to
            NextNode() should return it once again.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._resync">
            <summary>
            Indicates that the position of the XmlReader has been changed
            due to the call to Skip(), ReadContentAsString(), etc. and the next call
            to the NextNode() need not to invoke Read() but should simply
            fetch the current XmlReader's node.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._attribute_pos">
            <summary>
            Stores the current position for the MoveToNextAttribute().
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._attribute_count">
            <summary>
            Stores the total number of attributes for the NextAttribute().
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._initial_capacity">
            <summary>
            The initial capacity of the internal character buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._charBuffer">
            <summary>
            The internal character buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._listValue">
            <summary>
            The text value of the LIST type.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._listPos">
            <summary>
            Current character position within the list value buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._listEnd">
            <summary>
            Identifies the position of the last non-whitespace character
            in the list value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._listType">
            <summary>
            Memorizes whether the list occurs as the attribute value or the
            element content.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._unionType">
            <summary>
            Memorizes whether the union occurs as the attribute value, list item or the
            element content.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._has_nil_set">
            <summary>
            Is set to true when the current start tag has the 'nil' attribute with the
            value 'true'.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.Options">
            <summary>
            EXER decoder options
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.NodeType">
            <summary>
            Returns the type of the current node.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.IsEmptyElement">
            <summary>
            For the Element node returns true if it is the EmptyElement node.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.LocalName">
            <summary>
            For Attribute, Element and EndElement node returns the local name of the
            attribute or element.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.Prefix">
            <summary>
            For Attribute, Element and EndElement node returns the name prefix.
            The Prefix is 'null' for unqualified names and is string.empty when
            the name belongs to the default namespace.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.NamespaceURI">
            <summary>
            For Attribute, Element and EndElement node returns the namespace name (URI).
            The NamespaceURI is 'string.Empty' for unqualified names.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.NamespaceID">
            <summary>
            For Attribute, Element and EndElement node returns the namespace id. The id
            is the index into the namespace table. The NamespaceID is -1 for unqualified names
            and is -2 if the namespace URI is not in the namespace table.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._value">
            <summary>
            Specifies the text value of the current node.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.Value">
            <summary>
            For Attribute, ListItem and Text nodes returns the value of the node. Because element content
            can be a huge string, we support lazy setting of this property to give the decoder
            a chance to utilize the ReadContentAsBinHex/Base64() where appropriate.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.#ctor(Oss.Asn1.BaseDecoderOptions,Oss.Asn1.Internal.ExerNamespace[],System.Int32)">
            <summary>
            Initializes the decoder object
            </summary>
            <param name="options">Initial options</param>
            <param name="namespaces">The collection of namespaces, referenced by the NAMESPACE and
            the CONTROL-NAMESPACE EIs in the ASN.1 specification.</param>
            <param name="controlNS_id">Specifies the index of the control namespace in the namespace
            table. Should be set to -1 if MODIFIED-ENCODINGS is not enabled and XML namespaces are not
            used.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.Clear">
            <summary>
            Resets the decoder.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.GetBuffer">
            <summary>
            Does the lazy initialization of the internal character buffer.
            </summary>
            <returns>The reference to the internal character buffer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EndCollectEmbeddedValues">
            <summary>
            Completes the collection of the embedded values in the current scope.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.AtNsDeclaration">
            <summary>
            Checks if the current node is the namespace declaration attribute.
            </summary>
            <returns>'true' if the current attribute is namespace declaration attribute.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeQname(Oss.Asn1.Internal.ExerDecoder.NamespaceManager.Entry@,System.String@)">
            <summary>
            Decodes the qname in the format [prefix:]local_name. 
            </summary>
            <param name="ns">Returns the namespace descriptor for the qualified name or null for
            the unqualified name.</param>
            <param name="name">Returns the local name component of the qname.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBstring(System.String,System.Int32@)">
            <summary>
            Decodes the xmlbstring.
            </summary>
            <param name="xmlbstring">The text value of xmlbstring.</param>
            <param name="length">Returns the length of the decoded string in bits.</param>
            <returns>The bits of the decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOSCC``1(System.Boolean,System.Boolean)">
            <summary>
            Decode into octet string with content constraints 
            </summary>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied to the type.</param>
            <param name="isBase64">Selects the XmlBase64String alternative instead of the xmlhstrin.</param>
            <typeparam name="T">PDU type </typeparam>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOpenType(Oss.Asn1.BasePdu,System.Boolean,System.Boolean)">
            <summary>
            Decode an open type from an xmlhstring, BASE64 or an XmlTypedValue
            </summary>
            <param name="pdu">Identifies the type of the value, carried by the open type.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied to the type.</param>
            <param name="isBase64">Selects the XmlBase64String alternative instead of the xmlhstring.</param>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeControlChar(System.Int32)">
            <summary>
            Attempts to map the empty element to the control character.
            </summary>
            <param name="ns_id">Specifies the namespace for empty elements, representing control characters.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeXmlcstring(System.Int32)">
            <summary>
            Decodes an xmlstring from the input.
            </summary>
            <param name="ns_id">Specifies the namespace for empty elements, representing control characters.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DoWhitespaceReplace(System.String)">
            <summary>
            Changes the original string to conform to the WHITESPACE REPLACE:
            all whitespace characters are replaced by space character.
            </summary>
            <param name="original">Specifies the original string value.</param>
            <returns>The original value if no changes have been applied, otherwise
            the modified string with the whitespace replaced according
            to the WHITESPACE REPLACE.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DoWhitespaceCollapse(System.String)">
            <summary>
            Changes the original string to conform to the WHITESPACE COLLAPSE:
            all whitespace characters are replaced by space character, leading and
            trailing whitespace is removed and multiple consecutive whitespace
            characters are replaced by the single space character.
            </summary>
            <param name="original">Specifies the original string value.</param>
            <returns>The original value if no changes have been applied, otherwise
            the modified string with the whitespace replaced according
            to the WHITESPACE COLLAPSE.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.ProcessWhitespace(System.String,Oss.Asn1.Internal.ExerConstants.Whitespace)">
            <summary>
            Changes the original string to conform to the specified whitespace
            handling mode. If the 'mode' is not equal to 'Keep', all whitespace
            characters are replaced by space character. Additionally, if the
            'mode' is 'Collapse', trailing and leading whitespace is removed and
            multiple consequitive whitespace characters are replaced by the single
            space character.
            </summary>
            <param name="original">Specifies the original string value.</param>
            <param name="mode">Specifies the whitespace handling mode.</param>
            <returns>The original value if no changes have been applied, otherwise
            the modified string with the whitespace replaced according
            to the whitespace handling mode.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.FromUTF16(System.String)">
            <summary>
            Converts UTF16 string to the array of Unicode codepoints.
            </summary>
            <param name="utf16">The UTF16 string.</param>
            <returns>The array of Unicode codepoints, representing characters of
            the original string.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.HexDigit(System.Char)">
            <summary>
            Returns hex digit represented by the character or -1 if character
            is not a valid hex digit.
            </summary>
            <param name="ch">The character to convert to hex digit.</param>
            <returns>The value of hex digit or -1 if the character is not a valid hex digit.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeHstring(System.String,System.Boolean)">
            <summary>
            Decodes the xmlhstring.
            </summary>
            <param name="xmlhstring">The text value of the xmlhstring.</param>
            <param name="modifiedEncoding">'true' indicates that the whitespace is not allowed in the xmlhstring.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._outerWriterSettings">
            <summary>
            Settings for the helper XmlWriter that is used to save outer XML.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOuterXml">
            <summary>
            Reads the content, including markup, representing the current element node and all its children.
            The method ensures that the XML element, returned in the string is self-contained by inserting
            into the first start tag the declarations of all namespaces that are currently visible. The
            insertion of only those namespaces that are actually referenced by child nodes and attributes
            is not sufficient because the content can contain values of QName XSD datatype.
            </summary>
            <returns>The subtree containing the content of the current element, including the start
            tag and all the children</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.FetchTag">
            <summary>
            Fetches properties for an Element or EndElement nodes: LocalName, Prefix,
            NamespaceURI and NamespaceID. Resets the Value property to null.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.OnStartTag">
            <summary>
            Fetches the start tag. Processes namespace declarations (if any) and
            computes the start position and the number of significant attributes
            for the MoveToNextAttribute() method. Sets the IsEmptyElement and fetches
            other tag properties (see the FetchTag()).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.OnEndTag">
            <summary>
            Fetches the end tag. Terminates the collection of embedded values (when
            appropriate). Pops namespace declarations that go out of scope. Fetches
            tag properties as specified in the FetchTag().
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.OnText">
            <summary>
            Fetches character content. Resets LocalName, Prefix,
            NamespaceURI and NamespaceID. Sets the Value property.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.OnLeaveEmptyElement">
            <summary>
            Invoked when the decoder is about to move to the next node and 
            leaves the EmptyElement node. Does the same as the OnEndTag()
            except fetching the tag properties.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.OnEmbeddedValue">
            <summary>
            Adds the contents of the current node to the EMBED-VALUES list.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.StartTag">
            <summary>
            Moves to the next node and throws an exception if the next node is not
            an Element (start tag) node. On successful completion sets the NodeType to
            Element and LocalName, Prefix, NamespaceURI, NamespaceID, IsEmptyElement to
            appropriate values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.StartTag(System.Int32,System.String)">
            <summary>
            Moves to the next node and throws an exception if the next node is not
            an Element (start tag) node or its name does not match the specified name. 
            On successful completion sets the NodeType to Element and LocalName, Prefix, 
            NamespaceURI, NamespaceID, IsEmptyElement to appropriate values.
            </summary>
            <param name="ns_id">Identifies the expected namespace.</param>
            <param name="name">Specifies the local name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.StartTag(System.String)">
            <summary>
            Moves to the next node and throws an exception if the next node is not
            an Element (start tag) node or its name does not match the specified name. 
            On successful completion sets the NodeType to Element and LocalName, Prefix, 
            NamespaceURI, NamespaceID, IsEmptyElement to appropriate values.
            </summary>
            <param name="name">Specifies the unqualified name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.StartTagEquals(System.Int32,System.String)">
            <summary>
            Checks if the current node is
            a start tag or empty element having the specified qualified name.
            </summary>
            <param name="ns_id">Identifies the expected namespace.</param>
            <param name="name">Specifies the local name of the element.</param>
            <returns>'true' if the current node is an element having the
            specified qualified name;
            'false' otherwise.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.StartTagEquals(System.String)">
            <summary>
            Checks if the current node is
            a start tag or empty element having the specified unqualified name.
            </summary>
            <param name="name">Specifies the unqualified name of the element.</param>
            <returns>'true' if the current node is an element having the
            specified unqualified name;
            'false' otherwise.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EmptyTag">
            <summary>
            Moves to the next node and throws an exception if the next node is not
            an empty Element (start tag) node with unqualified name. On successful completion 
            sets the NodeType to Element and LocalName, Prefix, NamespaceURI, NamespaceID, 
            IsEmptyElement to appropriate values.
            </summary>
            <returns>The name of the empty element tag.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EndTag(System.Int32,System.String)">
            <summary>
            Moves to the next node and throws an exception if the next node is not
            an EndElement node or its name does not match the specified name. 
            On successful completion sets the NodeType to EndElement and LocalName, Prefix, 
            NamespaceURI, NamespaceID to appropriate values.
            </summary>
            <param name="ns_id">Identifies the expected namespace.</param>
            <param name="name">Specifies the local name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EndTag(System.String)">
            <summary>
            Moves to the next node and throws an exception if the next node is not
            an EndElement node or its name does not match the specified name. 
            On successful completion sets the NodeType to EndElement and LocalName, Prefix, 
            NamespaceURI, NamespaceID to appropriate values.
            </summary>
            <param name="name">Specifies the unqualified name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.TestStartTag(System.Boolean)">
            <summary>
            Checks whether the start tag was matched in tag decoder or not.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.MoveToNextAttribute">
            <summary>
            When the decoder is at the Element node, successive calls to this method
            iterate through the list of available attributes. Namespace declaration
            attributes and attributes with names from the control namespace (including
            the 'type' and 'nil' attributes) are skipped and not reported by this 
            method. If method returns 'true', the NodeType is set to Attribute and
            LocalName, Prefix, NamespaceURI, NamespaceID and Value are set to appropriate
            values. Additionally, next calls to Group 2 methods will read data from
            attribute value rather that from element value. If the decoder is not at
            the Element node the method throws an exception.
            </summary>
            <returns>'false' to indicate the end of the list.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeNilAttribute">
            <summary>
            Check whether the current Element node has the 'nil' attribute.
            The method returns 'true' when the current element has the 'nil'
            attribute and its value is either "true" or "1". When the 'nil' 
            attribute is not present or its value is not equal to "true" or "1"
            'false' is returned.
            </summary>
            <returns>'false' if the current Element does not have the 'nil'
            attribute.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.MoveToTypeAttribute">
            <summary>
            Check whether the current Element node has the 'type' attribute.
            If the method returns 'true' the NodeType is set to Attribute and
            LocalName, Prefix, NamespaceURI, NamespaceID and Value properties
            return the name and the value of the 'type' attribute. If the decoder 
            is not at the Element node the method throws an exception.
            </summary>
            <returns>'false' if the current Element does not have the 'type'
            attribute.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NextNode">
            <summary>
            Moves the decoder to the next node. The NodeType, LocalName, 
            Prefix, NamespaceURI, NamespaceID, IsEmptyElement and Value  properties 
            are updated accordingly to the type of the new node. If the
            decoder is at the Attribute node, enumeration of attributes is aborted and
            the decoder jumps to the next content node (Element, EndElement or Text).
            </summary>
            <returns>The type of the new node.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NextNode(System.Boolean)">
            <summary>
            Moves the decoder to the next node. The NodeType, LocalName, 
            Prefix, NamespaceURI, NamespaceID, IsEmptyElement and Value  properties 
            are updated accordingly to the type of the new node. If the
            decoder is at the Attribute node, enumeration of attributes is aborted and
            the decoder jumps to the next content node (Element, EndElement or Text).
            </summary>
            <param name="reportWS">when 'true' the ignorable whitespace is returned as
            the text node, otherwise it is ignored.</param>
            <returns>The type of the new node.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.Pushback">
            <summary>
            Unreads the current node so that the next call to the NextNode()
            will return it once again. Has no effect if called on Attribute node.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.SkipElement">
            <summary>
            The method is used to skip unknown extensions. It moves the decoder
            to the next content node (Element, EndElement, Text) that follows the
            EndElement matching the current Element node.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeAnyAttribute">
            <summary>
            When the current node is Attribute, the method returns the string
            containing the attribute definition in the ANY-ATTRIBUTES format
            (X.693 clause 18). If the current node is not the Attribute the method
            throws an exception.
            </summary>
            <returns>The definition of the current attribute in the ANY-ATTRIBUTES
            format.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeAnyElement">
            <summary>
            Reads the current Element, including attributes, element content and the
            terminating EndElement, into the string that can be stored in a field with
            the ANY-ELEMENT encoding instruction applied. The decoder is positioned
            on the next content node (Element, EndElement, Text) that follows the
            terminating EndElement. If the current node is not the Element, the
            exception is thrown.
            </summary>
            <returns>The string containing the current Element.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.ParseInt(System.Boolean,System.String)">
            <summary>
            Converts the 32-bit signed integer number from its string representation.
            Throws an exception if the value is not a valid number.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLIntegerValue
            notation is allowed.</param>
            <param name="number">A number in the decimal string representation.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.ParseLong(System.Boolean,System.String)">
            <summary>
            Decodes the 64-bit signed integer number from its string representation.
            Throws an exception if the value is not a valid number.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLIntegerValue
            notation is allowed.</param>
            <param name="number">A number in the decimal string representation.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.ParseULong(System.Boolean,System.String)">
            <summary>
            Decodes the 64-bit unsigned integer number from its string representation.
            Throws an exception if the value is not a valid number.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLIntegerValue
            notation is allowed.</param>
            <param name="number">A number in the decimal string representation.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeInt(System.Boolean)">
            <summary>
            Decodes the 32-bit signed integer number. Throws an exception if the current node
            is neither Text nor Attribute or the value is not a valid number.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLIntegerValue
            notation is allowed.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeLong(System.Boolean)">
            <summary>
            Decodes the 64-bit signed integer number. Throws an exception if the current node
            is neither Text nor Attribute or the value is not a valid number.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLIntegerValue
            notation is allowed.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeULong(System.Boolean)">
            <summary>
            Decodes the 64-bit unsigned integer number. Throws an exception if the current node
            is neither Text nor Attribute or the value is not a valid number.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLIntegerValue
            notation is allowed.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBigInt(System.Boolean)">
            <summary>
            Decodes big integer number. Throws an exception if the current node
            is neither Text nor Attribute.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLIntegerValue
            notation is allowed.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeDouble(System.Boolean)">
            <summary>
            Decodes the double value. Throws an exception if the current node
            is neither Text nor Attribute or the value is not a valid double. The
            'isDecimal' parameter specifies whether the DECIMAL instruction has been
            applied to the type and hence the exponent should not occur in the 
            ModifiedXMLRealValue.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLRealValue
            notation is allowed.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeDouble(System.Boolean,System.Boolean)">
            <summary>
            Decodes the double value. Throws an exception if the current node
            is neither Text nor Attribute or the value is not a valid double. The
            'isDecimal' parameter specifies whether the DECIMAL instruction has been
            applied to the type and hence the exponent should not occur in the 
            ModifiedXMLRealValue.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLRealValue
            notation is allowed.</param>
            <param name="isDecimal">Specifies whether the exponent is allowed in the
            ModifiedXMLRealValue.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeDecimal(System.Boolean)">
            <summary>
            Decodes the decimal value. Throws an exception if the current node
            is neither Text nor Attribute or the value is not a valid decimal number.The
            'isDecimal' parameter specifies whether the DECIMAL instruction has been
            applied to the type and hence the exponent should not occur in the 
            ModifiedXMLRealValue.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLRealValue
            notation is allowed.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeDecimal(System.Boolean,System.Boolean)">
            <summary>
            Decodes the decimal value. Throws an exception if the current node
            is neither Text nor Attribute or the value is not a valid decimal number.The
            'isDecimal' parameter specifies whether the DECIMAL instruction has been
            applied to the type and hence the exponent should not occur in the 
            ModifiedXMLRealValue.
            </summary>
            <param name="modifiedEncoding">Specifies whether the ModifiedXMLRealValue
            notation is allowed.</param>
            <param name="isDecimal">Specifies whether the exponent is allowed in the
            ModifiedXMLRealValue.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBitString">
            <summary>
            Decodes the value of the BIT STRING without named bits. Throws an exception 
            if the current node is neither Text nor Attribute or the value is not a valid 
            xmlbstring.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBitStringWithNamedBits">
            <summary>
            Decodes the value of the BIT STRING with named bits. Throws an exception 
            if the current node is neither Text nor Attribute or the value is not a valid 
            xmlbstring.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBSCC``1">
            <summary>
            Decode into bit string with content constraints 
            </summary>
            <typeparam name="T">PDU type </typeparam>
            <returns>An bit string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOctetString(System.Boolean)">
            <summary>
            Decodes the value of the OCTET STRING. Throws an exception 
            if the current node is neither Text nor Attribute or the value is not a valid 
            xmlhstring.
            </summary>
            <param name="modifiedEncoding">'true' means that whitespace is not allowed
            in the input xmlhstring.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOctetStringBase64">
            <summary>
            Decodes the value of the OCTET STRING from the Base64XMLOctetStringValue. Throws 
            an exception if the current node is neither Text nor Attribute or the value is not a 
            valid Base64XMLOctetStringValue.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOSCC``1(System.Boolean)">
            <summary>
            Decode into octet string with content constraints 
            </summary>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied to the type.</param>
            <typeparam name="T">PDU type </typeparam>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOSCCBase64``1">
            <summary>
            Decode into octet string with content constraints 
            </summary>
            <typeparam name="T">PDU type </typeparam>
            <returns>An octet string with content constraints object</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeObjectIdentifier">
            <summary>
            Decodes the value of the OBJECT IDENTIFIER. Throws an exception 
            if the current node is neither Text nor Attribute or the value has 
            invalid format.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeRelativeOid">
            <summary>
            Decodes the value of the RELATIVE-OID. Throws an exception 
            if the current node is neither Text nor Attribute or the value has 
            invalid format.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.CollapseWhitespace">
            <summary>
            Sets the WHITESPACE COLLAPSE mode for the next
            string, identifier or EMBED-VALUES.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.ReplaceWhitespace">
            <summary>
            Sets the WHITESPACE REPLACE mode for the next
            string, identifier or EMBED-VALUES.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeNonUnicodeString">
            <summary>
            Decodes the value of the TeletexString, VideotexString, GraphicString,
            GeneralString or ObjectDescriptor. Throws an exception 
            if the current node is neither Text nor Attribute.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeNonUnicodeString(System.Int32)">
            <summary>
            Decodes the value of the TeletexString, VideotexString, GraphicString,
            GeneralString or ObjectDescriptor. Throws an exception 
            if the current node is neither Text nor Attribute.
            </summary>
            <param name="ns_id">The integer that identifies the namespace
            for empty elements representing control characters.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeNonUnicodeStringBase64">
            <summary>
            Decodes the value of the TeletexString, VideotexString, GraphicString,
            GeneralString or ObjectDescriptor from the Base64XMLRestrictedCharacterStringValue.
            Throws an exception if the current node is neither Text nor Attribute or the value has 
            invalid format.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeIdentifier">
            <summary>
            Decodes the identifier representing the enumerator, named number,
            named bit or BOOLEAN. Throws an exception 
            if the current node is neither Text nor Attribute or the value contains 
            invalid characters.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeString">
            <summary>
            Decodes the value of the restricted character string other than the TeletexString, 
            VideotexString, GraphicString, GeneralString, ObjectDescriptor or
            UniversalString. Throws an exception if the current node is neither Text nor Attribute 
            or the value contains invalid characters.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeString(System.Int32)">
            <summary>
            Decodes the value of the restricted character string other than the TeletexString, 
            VideotexString, GraphicString, GeneralString, ObjectDescriptor or
            UniversalString. Throws an exception if the current node is neither Text nor Attribute 
            or the value contains invalid characters.
            </summary>
            <param name="ns_id">The integer that identifies the namespace
            for empty elements representing control characters.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeStringBase64">
            <summary>
            Decodes the value of the restricted character string other than the TeletexString, 
            VideotexString, GraphicString, GeneralString, ObjectDescriptor or
            UniversalString from the Base64XMLRestrictedCharacterStringValue. Throws an exception 
            if the current node is neither Text nor Attribute or the value has 
            invalid format.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeUniversalString">
            <summary>
            Decodes the value of the UniversalString. Throws an exception if the current node is 
            neither Text nor Attribute or the value contains invalid characters.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeUniversalString(System.Int32)">
            <summary>
            Decodes the value of the UniversalString. Throws an exception if the current node is 
            neither Text nor Attribute or the value contains invalid characters.
            </summary>
            <param name="ns_id">The integer that identifies the namespace
            for empty elements representing control characters.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeUniversalStringBase64">
            <summary>
            Decodes the value of the UniversalString from the Base64XMLRestrictedCharacterStringValue. 
            Throws an exception if the current node is neither Text nor Attribute or the value has
            invalid format.
            </summary>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOpenType">
            <summary>
            Reads the open type from the input in undecoded form. If the value of the
            open type is Element rather than Text, the method inserts all necessary
            namespace declarations into the start tag to make the XML instance captured
            in the returned byte array self contained.
            </summary>
            <returns>The undecoded form of open type.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOpenTypeBase64">
            <summary>
            Reads the open type from the Base64XMLOpenTypeFieldVal in undecoded form.
            Throws an exception if the current node is neither Text nor Attribute or the value has
            invalid format. The method assumes that the XML instance encoded with BASE64 is self
            contained and unlike the DecodeOpentype() does not apply any processing to the undecoded value
            </summary>
            <returns>The undecoded form of open type.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOpenType(Oss.Asn1.BasePdu,System.Boolean)">
            <summary>
            Decodes the value of open type.
            </summary>
            <param name="pdu">Identifies the type of the value, carried by the open type.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied to the type.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOpenTypeBase64(Oss.Asn1.BasePdu)">
            <summary>
            Decodes the value of open type.
            </summary>
            <param name="pdu">Identifies the type of the value, carried by the open type.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBoolNonModified(System.String,System.String)">
            <summary>
            Decodes the value of the BOOLEAN type from a non-modified encoding.
            </summary>
            <param name="text_false">Text encoding for the false value.</param>
            <param name="text_true">Text encoding for the true value.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBoolModified(System.String,System.String)">
            <summary>
            Decodes the value of the BOOLEAN type from the modified encoding.
            </summary>
            <param name="text_false">Text encoding for the false value.</param>
            <param name="text_true">Text encoding for the true value.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeQname(System.String@,System.String@)">
            <summary>
            Decodes the qname in the format [prefix:]local_name. The method is intended for decoding
            components of a SEQUENCE with the USE-QNAME EI applied. If the current node is neither Text 
            nor Attribute or the value has invalid format an exception is thrown.
            </summary>
            <param name="uri">Returns the URI of the namespace for qualified name or null for
            unqualified name.</param>
            <param name="name">Returns the local name component of the qname.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeQname(System.Int32@,System.String@)">
            <summary>
            Decodes the qname in the format [prefix:]local_name. The method is intended for decoding
            the value of the 'type' attribute. If the current node is not the Attribute or the value 
            has invalid format an exception is thrown.
            </summary>
            <param name="ns_id">Returns the integer that identifies the namespace of the qualified name,
            -1 for the unqualified name or -2 if the namespace is not in the namespace table.</param>
            <param name="name">Returns the local name component of the qname.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.BeginList">
            <summary>
            Begins the decoding of the LIST value. The LIST is collection of items that are separated
            by the whitespace. Throws an exception if the current node is neither Text nor Attribute.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.NextItem">
            <summary>
            Moves the decoder to the next item in the LIST. If the method returns 'true' the
            Value property returns string representation of the item at the current position and
            all decoding methods of group 2 read the value from this string.
            The method throws an exception if the BeginList() has not been invoked before calling the
            NextItem().
            </summary>
            <returns>'false' when there are no more items in the LIST.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EndList">
            <summary>
            Completes the decoding of LIST value and returns the decoder to normal mode.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.BeginUnion">
            <summary>
            Begins the decoding of the UNION. In this mode the decoder attempts
            to determine the type of the alternative of the CHOICE by trials and
            errors.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EndUnion">
            <summary>
            Exits the UNION mode.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.CollectEmbeddedValues(System.Collections.Generic.List{System.String})">
            <summary>
            Initialtes the collection of strings for the EMBED-VALUES field. After the method
            is invoked at the Element node, the decoder collects all immediate Text children
            in the 'sink' list. The collection is terminated when the decoder enconuters the
            EndElement node matching the current Element node. Throws an exception of the 
            current node is not the Element.
            </summary>
            <param name="sink">Specifies the List object where the ENBED-VALUES strings are
            collected.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.CollectEmbeddedValues(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initialtes the collection of strings for the EMBED-VALUES field. After the method
            is invoked at the Element node, the decoder collects all immediate Text children
            in the 'sink' list. The collection is terminated when the decoder enconuters the
            EndElement node matching the current Element node. Throws an exception of the 
            current node is not the Element.
            </summary>
            <param name="sink">Specifies the List object where the ENBED-VALUES strings are
            collected.</param>
            <param name="defaultForEmpty">Defines the sole value for EMBED-VALUES when the
            content of enclosing element is empty and the type has the DEFAULT-FOR-EMPTY
            EI applied.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DetailsWithPos(System.String,System.Object[])">
            <summary>
            Constructs the detailed message and includes location information
            that is obtained from the XmlReader.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">Message arguments.</param>
            <returns>The text of the error message.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodePdu(System.IO.Stream,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from a stream.
            </summary>
            <param name="stream">The input stream containing EXER encoding</param>
            <param name="pdu">Output PDU</param>
            <returns>Decoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodePdu(System.IO.TextReader,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from text.
            </summary>
            <param name="textReader">The TextReader to feed the input XML</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodePdu(System.String,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU from string.
            </summary>
            <param name="value">The string containing XML</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodePdu(System.Xml.XmlReader,Oss.Asn1.BasePdu)">
            <summary>
            Decodes PDU by reading the XML from the XmlReader object.
            </summary>
            <param name="xmlReader">The XmlReader object that will provide the input XML.</param>
            <param name="pdu">Output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.InternalDecodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Decodes the PDU from XER encoding. If validation is enabled, validates
            that the decoded value satisfies constraints of the ASN.1 definitions.
            </summary>
            <param name="pdu">The output PDU</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeType(Oss.Asn1.BaseType)">
            <summary>
            Decodes the value of the specified type.
            </summary>
            <param name="type">output data object</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeBSCCPdu``1(Oss.Asn1.BitString)">
            <summary>
            Decodes the PDU contained in the BIT STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.DecodeOSCCPdu``1(System.Byte[])">
            <summary>
            Decodes the PDU contained in the OCTET STRING.
            </summary>
            <typeparam name="T">Specifies the type of PDU.</typeparam>
            <param name="encoded">The encoded data.</param>
            <returns>The decoded PDU</returns>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerDecoder._recursionDepth">
            <summary>
            Tracks the depth of recursive calls.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerDecoder.Depth">
            <summary>
            This property is for the internal use only and should not be utilized by the
            application code. It reflects the current depth of recursion when decoding
            values of types with circular definitions. The property is also used to pass
            the current depth of recursion to the child coder when circular definition
            includes OCTET STRING or BIT STRING with the content constraint.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.EnterRecursive">
            <summary>
            Informs the decoder that it enters the next level of
            recursion when decoding the value of type with the circular
            definition.
            <exception cref="T:System.InvalidOperationException">
            If the recursion depth exceeds the limit, specified by the
            RecursionLimit option.
            </exception>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.LeaveRecursive">
            <summary>
            Informs the decoder that the innermost recursive invocation
            is completed.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerDecoder.RaiseEmptyElementException">
            <summary>
            Throws the _inval_enc Asn1InvalidEncodingException exception with details.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerConstants">
            <summary>
            Commonly used constants.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.TypeAttribute">
            <summary>
            The name of 'type' identification attribute.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.NilAttribute">
            <summary>
            The name of 'nil' attribute.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.XmlnsAttribute">
            <summary>
            XML namespace declaration attribute.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Amp">
            <summary>
            The name of the &amp; (ampersand) character entity.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Lt">
            <summary>
            The name of the &lt; (left angular bracket) character entity.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Gt">
            <summary>
            The name of the &gt; (right angular bracket) character entity.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Quot">
            <summary>
            The name of the &quot; (double quote) character entity.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Apos">
            <summary>
            The name of the &apos; (single quote) character entoty.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Asn1Namespace">
            <summary>
            Specifies standard 'asn1' namespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.XmlNamespace">
            <summary>
            Specifies standard 'xml' namespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants._plusINF">
            <summary>
            TextReal for REAL +infinity
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants._minusINF">
            <summary>
            TextReal for REAL -infinity
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants._NaN">
            <summary>
            TextReal for REAL NaN
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerConstants.Whitespace">
            <summary>
            Specifies the whitespace handling mode.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Whitespace.Keep">
            <summary>
            The WHITESPACE instruction is not applied.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Whitespace.Replace">
            <summary>
            The WHITESPACE REPLACE instruction is in effect.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.Whitespace.Collapse">
            <summary>
            The WHITESPACE COLLAPSE instruction is in effect.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.BASE64Limit">
            <summary>
            The maximum length of the single line of BAS64 encoding as
            specified by the RFC 2045.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerConstants.BinHexLimit">
            <summary>
            The maximum length of the single line of the BinHex string.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerUtils">
            <summary>
            Provides utility methods commonly used by the encoder and decoder.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.IsWhitespace(System.Int32)">
            <summary>
            Tests if the specified character represents the whitespace.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if the character represents the whitespace.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.IsQuote(System.Int32)">
            <summary>
            Tests if the specified character is a quote or apostrophe.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if the character is either a quote or apostrophe.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.FormatNumber(System.Int64)">
            <summary>
            Formats the integer value using the XML Schema definition language (XSD) 
            data type conversion rules.
            </summary>
            <param name="value">The integer value to format.</param>
            <returns>The string representing the input value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.FormatDouble(System.Double)">
            <summary>
            Formats the double value using the XML Schema definition language (XSD) 
            data type conversion rules.
            </summary>
            <param name="value">The double value to format.</param>
            <returns>The string representing the input value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.FormatDecimal(System.Decimal)">
            <summary>
            Formats the decimal value using the XML Schema definition language (XSD) 
            data type conversion rules.
            </summary>
            <param name="value">The decimal value to format.</param>
            <returns>The string representing the input value.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.FormatHex(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32@)">
            <summary>
            Converts the portion of the binary data to the xmlhstring. The conversion is
            stopped as soon as there is no more space on the output buffer. The caller
            invokes the method repeatedly until all binary data is converted.
            </summary>
            <param name="data">The binary data.</param>
            <param name="first">The index of the starting octet (inclusive).</param>
            <param name="last">The index of the last octet (exclusive).</param>
            <param name="buffer">The output buffer that will receive the xmlhstring.</param>
            <param name="size">Specifies buffer size.</param>
            <param name="bufpos">Returns the number of characters written to the output buffer.</param>
            <returns>Returns the updated position in the input buffer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.FormatBits(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32@)">
            <summary>
            Converts the portion of the binary data to the xmlbstring. The conversion is
            stopped as soon as there is no more space on the output buffer. The caller
            invokes the method repeatedly until all binary data is converted.
            </summary>
            <param name="data">The binary data.</param>
            <param name="first">The index of the starting bit (inclusive).</param>
            <param name="last">The index of the last bit (exclusive).</param>
            <param name="buffer">The output buffer that will receive the xmlbstring encoding.</param>
            <param name="size">Specifies buffer size.</param>
            <param name="bufpos">Returns the number of characters written to the output buffer.</param>
            <returns>Returns the updated bit position in the input buffer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.FormatBase64(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32@)">
            <summary>
            Converts the portion of the binary data to the BASE64 string. The conversion is
            stopped as soon as there is no more space on the output buffer. The caller
            invokes the method repeatedly until all binary data is converted.
            </summary>
            <param name="data">The binary data.</param>
            <param name="first">The index of the starting octet (inclusive).</param>
            <param name="last">The index of the last octet (exclusive).</param>
            <param name="buffer">The output buffer that will receive the BASE64 string.</param>
            <param name="size">Specifies buffer size.</param>
            <param name="bufpos">Returns the number of characters written to the output buffer.</param>
            <returns>Returns the updated position in the input buffer.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.TryParseCharacterReference(System.String,System.Int32,System.Int32)">
            <summary>
            Attempts to extract the XML character reference from the string at positions beg..end.
            Returns the Unicode code point that representsthe  referenced character or -1 if the character
            reference has invalid syntax or does not refer to a valid Unicode character.
            </summary>
            <param name="value">The string, containing the character reference.</param>
            <param name="beg">The starting position of the character reference.</param>
            <param name="end">The ending position of the character reference.</param>
            <returns>The code point for the referenced character or -1 if the character
            reference is invalid.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.TryParseEntityReference(System.String,System.Int32,System.Int32)">
            <summary>
            Attempts to extract the XML entity reference from the string at positions beg..end.
            Returns the name of the referenced entity  or null if the entity
            reference has invalid syntax or specifies invalid XML name.
            </summary>
            <param name="value">The string, containing the entity reference.</param>
            <param name="beg">The starting position of the entity reference.</param>
            <param name="end">The ending position of the entity reference.</param>
            <returns>The name of the referenced character or null if the entity
            reference is invalid.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.WriteStringFragment(System.String,System.Int32,System.Int32,System.Char[],System.Xml.XmlWriter)">
            <summary>
            Helper method used to write the portion of a string to an XmlWriter.
            </summary>
            <param name="value">String from which to get the chars to write.</param>
            <param name="startPos">The position of the first char to write.</param>
            <param name="endPos">The position before which the encoding should stop.</param>
            <param name="buffer">The internal output buffer .</param>
            <param name="sink">The XmlWriter where the output is written.</param>
            <returns>The index after the endPos.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.Trim(System.String,System.Int32@,System.Int32@)">
            <summary>
            Scans the string and adjusts the starting and ending positions to exclude any
            leading and trailing whitespace.
            </summary>
            <param name="str">The string to scan.</param>
            <param name="beg">Specifies the starting position (inclusive).</param>
            <param name="end">Specifies the ending position (exclusive).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.LTrim(System.String,System.Int32@,System.Int32)">
            <summary>
            Scans the string and adjusts the starting position to exclude any
            leading whitespace.
            </summary>
            <param name="str">The string to scan.</param>
            <param name="beg">Specifies the starting position (inclusive).</param>
            <param name="end">Specifies the ending position (exclusive).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerUtils.RTrim(System.String,System.Int32,System.Int32@)">
            <summary>
            Scans the string and adjusts the ending position to exclude any
            trailing whitespace.
            </summary>
            <param name="str">The string to scan.</param>
            <param name="beg">Specifies the starting position (inclusive).</param>
            <param name="end">Specifies the ending position (exclusive).</param>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerWriter">
            <summary>
            Common base for adapter classes.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerWriter.Namespaces">
            <summary>
            Keeps associations between prefix and namespace name
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter.Namespaces._nsm">
            <summary>
            The XmlNamespaceManager that is used to keep track of
            namespace declarations and mappings between URIs and
            prefixes.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Namespaces.AddNamespace(System.String,System.String)">
            <summary>
            Adds namespace declaration to the map.
            </summary>
            <param name="prefix">The prefix to reference the namespace.</param>
            <param name="uri">The namespace name (URI).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Namespaces.LookupPrefix(System.String)">
            <summary>
            Lookups the prefix for the URI.
            </summary>
            <param name="uri">The namespace name (URI) to lookup.</param>
            <returns>The associated prefix or null if the namespace, identified by URI
            has not been declared.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Namespaces.PushScope">
            <summary>
            Identifiws the boundary of the current scope.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Namespaces.PopScope">
            <summary>
            Remove associations that are bound to the current scope.
            </summary>
            <returns>False if there is no scope to pop.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Namespaces.Init">
            <summary>
            Resets the map to the initial state.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Namespaces.Terminate">
            <summary>
            Resets the map to the initial state.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._nestingLevel">
            <summary>
            Keeps track of the nesting level of elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._namespaces">
            <summary>
            The map that associates the namespace name (URI) to prefix.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._hasDefaultNamespace">
            <summary>
            Indicates if the default namspace has been declared.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerWriter.IsIgnorableWSPermitted">
            <summary>
            Returns true if writer is in the state when the insertion of the
            ignorable whitespace is permitted.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._ignorableWSPermitted">
            <summary>
            Indicates if ignorable whitespace is allowed.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._characterBuffer">
            <summary>
            The internal buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._indentList">
            <summary>
            A list where the indentation strings for all occured indentation levels are cached.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._noWS">
            <summary>
            Used to temporary disable the insertion of the ignorable whitespace.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._closeStartTag">
            <summary>
            Indicates that the innermosr start tag needs the closing
            '&gt;'.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerWriter.Hint">
            <summary>
            The hint to the XML formatter about formatting the value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter.Hint.None">
            <summary>
            Do not add ignorable whitespace to values.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter.Hint.UseIgnorableWS">
            <summary>
            Add ignorable whitespace to values
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter.Hint.MayUseIgnorableWS">
            <summary>
            Ignorable whitespace is permitted, the writer
            decides whether to insert the whitespace or not. 
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter._hint">
            <summary>
            Stores the hint, provided via the WSHint() method.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerWriter.minBuf">
            <summary>
            The minimal length of internal buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.#ctor(System.Char[])">
            <summary>
            Constructs the ExerWriter.
            </summary>
            <param name="buffer">Provides the internal buffer.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Clear">
            <summary>
            Resets the ExerWriter to the initial state.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.TryGoContent(System.Boolean)">
            <summary>
            Attempts to change the state to Content. If the current state is
            the Element, closes the start tag and changes the state to Content.
            If the current state is Attribute or Content does nothing. Otherwise
            throws an exception.
            </summary>
            <param name="empty">Indicates that the content being added is empty.</param>
            <returns>True if the current state is Content or 
            false if the current state is the Attribute.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Open(Oss.Asn1.ExerEncoderOptions)">
            <summary>
            Initializes the XmlWriter with the specified output
            formatting options.
            </summary>
            <param name="settings">Output formatting options.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WSHint(Oss.Asn1.Internal.ExerWriter.Hint)">
            <summary>
            Provides the hint to the XML formatter about formatting the values
            </summary>
            <param name="hint">One of Hint enumerators.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteProlog">
            <summary>
            Writes the XML declaration unless the OmitXmlDeclaration is 'true' in the
            Settings.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteProlog(System.Boolean)">
            <summary>
            Writes the XML declaration including the 'standalone' attribute unless the 
            OmitXmlDeclaration is 'true' in the Settings.
            </summary>
            <param name="standalone"></param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteEmptyElement(System.String)">
            <summary>
            Writes the empty tag for the element with unqualified name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteEmptyElement(System.String,System.String)">
            <summary>
            Writes the empty tag for the element with qualified name.
            </summary>
            <param name="prefix">The namespace prefix.</param>
            <param name="name">The local name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteNamespaceDeclaration(System.String,System.String)">
            <summary>
            Writes namespace declaration attribute.
            </summary>
            <param name="prefix">The namespace prefix.</param>
            <param name="uri">The namespace name (URI).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteEndElement(System.String,System.String)">
            <summary>
            Writes the end tag for the element with qualified name.
            </summary>
            <param name="prefix">The namespace prefix.</param>
            <param name="name">The local name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteRaw(System.Byte[])">
            <summary>
            Writes the buffer containing UTF8 string with XML tokens.
            </summary>
            <param name="xmldata">The buffer to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteSimpleChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes characters from the buffer that definitely does not
            contain any special characters, such as '&amp;', '&lt;', '&gt;',
            '&quot;', '&apos;' or any whitespace other than space characters.
            </summary>
            <param name="value">The buffer, containing the characters.</param>
            <param name="index">The index of the first character to write.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteSimpleString(System.String)">
            <summary>
            Writes characters from the string that definitely does not
            contain any special characters, such as '&amp;', '&lt;', '&gt;',
            '&quot;', '&apos;' or any whitespace other than space characters.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteEntity(System.Int32)">
            <summary>
            Writes the &amp;#xHH escape sequence, representing the codepoint 'c'.
            </summary>
            <param name="c">The codepoint.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteEntity(System.String)">
            <summary>
            Writes entity reference with the specified name.
            </summary>
            <param name="s">The entity name.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Newline">
            <summary>
            Starts the new line of text with the appropriate indentation level.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Write(System.Char)">
            <summary>
            Writes the single character to the output.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a number of characters to the output.
            </summary>
            <param name="c">The character array, containing characters to write.</param>
            <param name="index">The index of the first character to write.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.Write(System.String)">
            <summary>
            Writes the string to the output.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerWriter.WriteUTF8(System.Byte[])">
            <summary>
            Writes UTF8-encoded text data to the output.
            </summary>
            <param name="data">The data to write</param>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerTextWriter">
            <summary>
            The adapter class to write EXER encoding to the arbitrary TextWriter
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerTextWriter._writer">
            <summary>
            The TextWriter object where the XML output is sent.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextWriter.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextWriter.#ctor(System.Char[])">
            <summary>
            Constructs the ExerWriter.
            </summary>
            <param name="buffer">Provides the internal buffer.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextWriter.Open(System.IO.TextWriter,Oss.Asn1.ExerEncoderOptions)">
            <summary>
            Initializes the ExerTextWriter and makes it ready for output.
            </summary>
            <param name="textWriter">The target for XML output.</param>
            <param name="settings">Output formatting options.</param>
            <returns>Initialized ExerTextWriter that is ready to receive the output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextWriter.Close">
            <summary>
            Closes the ExerTextWriter and releases resources associated with it.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextWriter.Write(System.Char)">
            <summary>
            Writes the single character to the output.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a number of characters to the output.
            </summary>
            <param name="c">The character array, containing characters to write.</param>
            <param name="index">The index of the first character to write.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerTextWriter.Write(System.String)">
            <summary>
            Writes the string to the output.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerStreamWriter">
            <summary>
            The adapter class to write EXER encoding to the arbitrary Stream
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerStreamWriter._buffer">
            <summary>
            Internal output buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerStreamWriter._bufferLen">
            <summary>
            The length of the internal buffer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerStreamWriter._bufferPos">
            <summary>
            The position in the internal bufer.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerStreamWriter._stream">
            <summary>
            The output stream where the XML is written.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.#ctor(System.Char[])">
            <summary>
            Constructs the ExerWriter.
            </summary>
            <param name="buffer">Provides the internal buffer.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.Open(System.IO.Stream,Oss.Asn1.ExerEncoderOptions)">
            <summary>
            Initializes the ExerStreamWriter and makes it ready for output.
            </summary>
            <param name="stream">The target for XML output.</param>
            <param name="settings">Output formatting options.</param>
            <returns>Initialized ExerStreamWriter that is ready to receive the output.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.Close">
            <summary>
            Closes the ExerStreamWriter and releases resources associated with it.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.EnsureAvailable(System.Int32)">
            <summary>
            Ensures that the buffer has extra capacity to accomodate data.
            </summary>
            <param name="extra">The extra capacity in bytes.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.WriteUTF8(System.Int32,System.Int32)">
            <summary>
            Writes the UNICODE codepoint, represented by surrogate pair.
            </summary>
            <param name="hiSurrogate">Specifies the high surrogate character.</param>
            <param name="lowSurrogate">Specifies the low surrogate character.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.WriteUTF8(System.Int32)">
            <summary>
            Writes the UNICODE codepoint to the output using the UTF8 encoding.
            </summary>
            <param name="codepoint">The value of the codepoint.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.Write(System.Char)">
            <summary>
            Writes single character to the output.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.Write(System.String)">
            <summary>
            Writes the string to the output.
            </summary>
            <param name="s">The string to write</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerStreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a number of characters to the output.
            </summary>
            <param name="c">The character array, containing characters to write.</param>
            <param name="index">The index of the first character to write.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerEncoder">
            <summary>
            Provides functionality for encoding of PDU and primitive types using EXER.
            </summary>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerEncoder.Namespaces">
            <summary>
            Represents the collection of namespaces, defined in the ASN.1 specification.
            Keeps track of namespace declarations and computes unique namespace prefixes
            where the prefix was not explicitly specified ([ANY-ATTRIBUTES], [USE-QNAME]).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.Namespaces._list">
            <summary>
            The array of ExerNamespace objects that represent XML namespaces, defined
            in the ASN.1 specification.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.Namespaces._declared">
            <summary>
            Tracks namespace declarations that are visible in the current scope. Entries
            in the stack are indices to the _list array.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.Namespaces._prefix">
            <summary>
            Common prefix used for the generation of namespace prefixes.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.Namespaces._suffix">
            <summary>
            Numeric suffix to make the generated namespace prefixes
            unique.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.#ctor(Oss.Asn1.Internal.ExerNamespace[])">
            <summary>
            Constructs the object.
            </summary>
            <param name="list">The array of ExerNamespace objects 
            representing XML namespaces defined in the ASN.1 schema.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.Clear">
            <summary>
            Resets the object to the initial state.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.Namespaces.Item(System.Int32)">
            <summary>
            Retrieves the ExerNamespace object at the specified index.
            </summary>
            <param name="index">The index of the ExerNamespace object to retrieve.</param>
            <returns>The ExerNamespace object at the specified index.</returns>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.Namespaces.NamespaceTable">
            <summary>
            Retrieves the list of namespaces used by the project.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.DeclareNamespace(System.Int32)">
            <summary>
            Marks that the namespace, identified by 'id', is declared and is visible
            in the current csope.
            </summary>
            <param name="id">Identifies the namespace.</param>
            <returns>'false' if the namespace is already declared.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.Mark">
            <summary>
            Marks the current position in the stack that tracks
            namespace declarations.
            </summary>
            <returns>The current position in the stack 
            that tracks namespace declarations. </returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.Release(System.Int32)">
            <summary>
            Resets the  stack that tracks namespace declarations
            to the previous position saved via the call to the Mark()
            method.
            </summary>
            <param name="mark">Saved position in the stack.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.GeneratePrefix">
            <summary>
            Generates namwespace prefixes for use with [ANY-ATTRIBUTES] and/or
            with [USE-QNAME].
            </summary>
            <returns>The generated index.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.GenerateRandomPrefix">
            <summary>
            Builds the random prefix to concatenate with numeric suffixes for
            generattion of unique namespace prefixes.
            </summary>
            <returns>The generated prefix.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Namespaces.GenerateRandomString(System.Int32@)">
            <summary>
            Generates a sequence of strings on subsequent calls, the strings
            generated are: "a"..."z","aa"..."az","ba"..."bz" etc.
            NOTE: the 'seed' parameter need to set to 0 before the first call.
            </summary>
            <param name="seed">The randomizing number.</param>
            <returns>The next random string.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues">
            <summary>
            Keeps track the text to be inserted between elements via the
            EMBED-VALUES encoding instruction.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues._values">
            <summary>
            The list of strings to insert between elements.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues._position">
            <summary>
            The ordinal number of the current entry in the list.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues._total">
            <summary>
            The total number of entries requested by the caller.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues.Position">
            <summary>
            Exposes the ordinal number that identifies the current position
            in the list. Used to provide extra details in the diagnostic
            message in case of error.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues.Count">
            <summary>
            Exposes the total number of entries that were requested by the
            caller. Used to provide extra details in the diagnostic
            message in case of error.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues.Scope">
            <summary>
            Identifies the scope  where the EMBED-VALUES is in effect.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues.Whitespace">
            <summary>
            Specifies the WHITESPACE mode for embedded values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32,Oss.Asn1.Internal.ExerConstants.Whitespace)">
            <summary>
            Constructs the EmbeddedValues object.
            </summary>
            <param name="values">The list of strings to insert between the elements.</param>
            <param name="scope_id">Identifies the scope where the EMBED-VALUES 
            is in effect</param>
            <param name="whitespace">Specifies the whitespace mode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EmbeddedValues.Next">
            <summary>
            Retrieves the next string from the list. Returns null if there are no more
            entries.
            </summary>
            <returns>The next string from the list.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerEncoder.State">
            <summary>
            Flags to define the encoder's state.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.State.WritingList">
            <summary>
            The string value of the type with the LIST EI is
            being constructed.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.State.WritingAttributeValue">
            <summary>
            The value of the attribute is being written.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._writer">
            <summary>
            The XmlWriter object to write XER-encoded data.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._exerWriter">
            <summary>
            Used to avoid explicit cast when writing to the ExerTextWriter or
            to the ExerStreamWriter and and the codec needs to invoke the extended
            API.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._exerTextWriter">
            <summary>
            Cached instance of the ExerTextWriter adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._exerStreamWriter">
            <summary>
            Cached instance of the ExerStreamWriter adapter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._writingToXmlWriter">
            <summary>
            Identifies that we are encoding to the generic XmlWriter.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._codingContained">
            <summary>
            Indicates that the encoder was invoked to encode the value contained in the
            BIT STRING or OCTET STRING
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.Validate">
            <summary>
            Indicates whether the PDU has to be validated before the encoding
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.EmbeddingValues">
            <summary>
            Returns true if the EMBED-VALUES EI is in effect.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._namespaces">
            <summary>
            The collection of namespaces, referenced by the NAMESPACE and the CONTROL-NAMESPACE EIs
            in the ASN.1 specification.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._embedValues">
            <summary>
            Stores the innermost EMBED-VALUES EI
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._embedValuesStack">
            <summary>
            Saves outer EMBED-VALUES EIs
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._scopeID">
            <summary>
            Tracks the current nesting level.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._defaultNamespaceID">
            <summary>
            The index of the namespace to be used as default namespace. -1 indicates
            that the default namespace is not set.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._whitespaceMode">
            <summary>
            Tracks the whitespace handling mode.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._state">
            <summary>
            Tracks the current state of the encoder.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._charBuffer">
            <summary>
            Char buffer used for encoding strings.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._has_nil_set">
            <summary>
            Is set to true when the current start tag has the 'nil' attribute with the
            value 'true'.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._itemsWritten">
            <summary>
            Counts the number of items, written by the encoder, since the top-level
            call to Encode().
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder._savedItemsWritten">
            <summary>
            Saves the original _itemsWritten when encoding the LIST value in the attribute.
            The original count is restored by the EndList().
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.ItemsWritten">
            <summary>
            Returns the number of items, written by the encoder since the top-level
            call to the Encode(). Each empty element tag, start tag, end tag, non-empty
            character content of the element (including each non-empty string written due to the
            EMBED-VALUES EI), ANY-ELEMENT and encoded open type is counted as one item.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Internal.ExerEncoder.Options">
            <summary>
            The encoder options which can be used to modify the behavior of the XER encoder. These
            options have no effect when encoding to the XmlWriter (the corresponding options from the
            XmlWriterSettings are used instead).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.#ctor(Oss.Asn1.ExerEncoderOptions,Oss.Asn1.Internal.ExerNamespace[])">
            <summary>
            Constructs a new instance using the provided option object. The 'options'
            have no effect when encoding to the XmlWriter (the corresponding options from the
            XmlWriterSettings are used instead).
            </summary>
            <param name="options">The object which specifies the options to be used during encoding.</param>
            <param name="namespaces">The collection of namespaces, referenced by the NAMESPACE and
            the CONTROL-NAMESPACE EIs in the ASN.1 specification.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Clear">
            <summary>
            Resets the encoder.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.NextEmbeddedValue">
            <summary>
            Inserts next embedded values between elements.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EndEmbeddedValues">
            <summary>
            Completes the insertion of embedded values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.DeclareNamespace(System.String,System.String)">
            <summary>
            Adds namespace declaration to the current start tag.
            </summary>
            <param name="prefix">Specifies the prefix.</param>
            <param name="uri">Specifies the namespace name (URI).</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeOpenType(Oss.Asn1.OpenType)">
            <summary>
            Encodes the value of open type.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.WriteControlChar(System.Int32,System.String)">
            <summary>
            Writes empty element with qualified name. Used to write control
            characters in the string when the appropriate NAMESPAACE EI
            requests the names must be qualified.
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
            <param name="name">The name of the control char.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.WriteBinHex(System.Byte[],System.Boolean)">
            <summary>
            Writes the binary data as hex string.
            </summary>
            <param name="data">The binary data to write.</param>
            <param name="wsAllowed">Specifies whether the whitespace can be added to the hex
            string for better readability.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.WriteBits(System.Byte[],System.Int32)">
            <summary>
            Encodes the binary data as xmlbstring.
            </summary>
            <param name="value">the value to encode.</param>
            <param name="length">the length of data in bits.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.WriteBase64(System.Byte[])">
            <summary>
            Writes the binary data as BASE string.
            </summary>
            <param name="data">The binary data to write.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerEncoder.CharIndexer">
            <summary>
            Returns the characters at the specified position.
            </summary>
            <param name="index">Specifies the character position.</param>
            <returns>The character at the specified position.</returns>
        </member>
        <member name="T:Oss.Asn1.Internal.ExerEncoder.ValidationResult">
            <summary>
            Specifies the result of the validation of string value.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.ValidationResult.Success">
            <summary>
            The string value is valid.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.ValidationResult.InvalidWhitespace">
            <summary>
            The value contains invalid namespace that do not conform to
            the LIST or the WHITESPACE encoding instructions.
            </summary>
        </member>
        <member name="F:Oss.Asn1.Internal.ExerEncoder.ValidationResult.InvalidControlCharacter">
            <summary>
            The value unexpectedly contains control characters.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.ValidateString(Oss.Asn1.Internal.ExerEncoder.CharIndexer,System.Int32,System.Boolean)">
            <summary>
            Validates the value of the string. 
            </summary>
            <param name="charAt">The function that retrieves characters from the string being checked.</param>
            <param name="limit">The length of the string</param>
            <param name="checkControlChars">Requests the additional check that the value does not contain
            control characters</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.OnNotEmpty">
            <summary>
            The method is used internally to indicate that some
            non-empty content has been written.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.WriteSimpleChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes characters from the buffer that definitely does not
            contain any special characters, such as '&amp;', '&lt;', '&gt;',
            '&quot;', '&apos;' or any whitespace other than space characters.
            </summary>
            <param name="value">The buffer, containing the characters.</param>
            <param name="index">The index of the first character to write.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.WriteSimpleString(System.String)">
            <summary>
            Writes characters from the string that definitely does not
            contain any special characters, such as '&amp;', '&lt;', '&gt;',
            '&quot;', '&apos;' or any whitespace other than space characters.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeType(Oss.Asn1.BaseType)">
            <summary>
            Helper method used to encode a value.
            </summary>
            <param name="type">Value to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.TextWriter)">
            <summary>
            Encodes a PDU and writes the encoded data using the provided TextWriter object.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="textWriter">The TextWriter object used to write the encoded data.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.IO.Stream)">
            <summary>
            Encodes a PDU and writes the encoded data in the provided stream. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="stream">The stream in which the encoded data is written.</param>
            <returns>The size of the encoded data in bytes. If the stream does not support seek operations -1 is returned.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes a PDU and returns the encoded data as a String object. 
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <returns>The encoded data as a String object.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeCCPdu(Oss.Asn1.BasePdu)">
            <summary>
            Encodes the pdu contained in the BIT STRING or in the OCTET STRING into a byte[].
            </summary>
            <param name="pdu">The PDU to encode.</param>
            <returns>The encoded PDU</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodePdu(Oss.Asn1.BasePdu,System.Xml.XmlWriter)">
            <summary>
            Encodes a PDU and sends the encoded data to the provided XmlWriter object.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
            <param name="xmlWriter">>The XmltWriter object used to send the encoded data.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.InternalEncodePdu(Oss.Asn1.BasePdu)">
            <summary>
            Internal helper method used to encode a PDU.
            </summary>
            <param name="pdu">The PDU to be encoded.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.StartElement(System.Int32,System.String)">
            <summary>
            Begins the construction of the StartTag for the element with the
            qualified name.
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
            <param name="local_name">The local name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.StartElement(System.String)">
            <summary>
            Begins the construction of the StartTag for the element with the
            non-qualified name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EndElement(System.Int32,System.String)">
            <summary>
            Writes the EndTag for the element with the qualified name.
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
            <param name="local_name">The local name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EndElement(System.String)">
            <summary>
            Writes the EndTag for the element with non-qualified name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EmptyElement(System.String)">
            <summary>
            Writes empty element with non-qualified name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EmptyElement(System.Int32,System.String)">
            <summary>
            Writes empty element with qualified name.
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
            <param name="local_name">The name of the element.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.AnyElement(System.String)">
            <summary>
            Writes raw markup manually from the string. Used to encode the value
            of the type with the ANY-ELEMENT EI applied.
            </summary>
            <param name="element">The string containing raw markup.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.DeclareDefaultNamespace(System.Int32)">
            <summary>
            Adds the declaration of the default namespace to the StartTag that is
            being constructed. If the default namespace has not been set previously by
            the call to the SetDefaultNamespace() or the "ns_id" does not match the
            current setting of the default namespace or the namespace, identified by the
            "ns_id", has been declared already, the method does nothing.
            </summary>
            <param name="ns_id">The integer that identifies the default namespace.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.DeclareNamespace(System.Int32)">
            <summary>
            Adds the namespace declaration attribute to the StartTag that is
            being constructed. If the "ns_id" matches the current default namespace
            the method declares both the empty prefix and the prefix specified by the
            corresponding Namespace object.
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.DeclareNamespace(System.String)">
            <summary>
            Declares the namespace, identified by the 'uri' parameter, if it is not declared
            yet and returns the prefix, associated with this namespace.
            </summary>
            <param name="uri">The namespace name (URI).</param>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.SetDefaultNamespace(System.Int32)">
            <summary>
            Specifies the namespace that will be used as the default namespace. This
            method should be invoked before the StartTag() method.
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Attribute(System.Int32,System.String,System.String)">
            <summary>
            Adds the attribute with the qualified name to the StartTag
            that is being constructed 
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
            <param name="local_name">The local name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Attribute(System.String,System.String)">
            <summary>
            Adds the attribute with non-qualified name to the StartTag
            that is being constructed 
            </summary>
            <param name="name">The anme of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.TryInsertTypeAttribute(System.Int32,System.Int32,System.String)">
            <summary>
            Attempts to insert the 'type' attribute to the StartTag. Returns 'false' when the current 
            context does not permit the insertion of the attribute (the LIST or ATTRIBUTE is encoded).
            </summary>
            <param name="control_ns_id">The integer that identifies the control namespace.</param>
            <param name="ns_id">The integer that identifies the namespace for the qualified name of
            the referenced type.</param>
            <param name="type_name">The local name of the referenced type.</param>
            <returns>True if the type attribute was successfully inserted.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.TypeAttribute(System.Int32,System.Int32,System.String)">
            <summary>
            Adds the 'type' attribute to the StartTag that is being constructed in
            the case when the referenced type has qualified name.
            </summary>
            <param name="control_ns_id">The integer that identifies the control namespace.</param>
            <param name="ns_id">The integer that identifies the namespace for the qualified name of
            the referenced type.</param>
            <param name="type_name">The local name of the referenced type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.TryInsertTypeAttribute(System.Int32,System.String)">
            <summary>
            Attempts to insert the 'type' attribute to the StartTag. Returns 'false' when the current 
            context does not permit the insertion of the attribute (the LIST or ATTRIBUTE is encoded).
            </summary>
            <param name="control_ns_id">The integer that identifies the control namespace.</param>
            <param name="type_name">The name of the referenced type.</param>
            <returns>True if the type attribute was successfully inserted.</returns>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.TypeAttribute(System.Int32,System.String)">
            <summary>
            Adds the 'type' attribute to the StartTag that is being constructed in
            the case when the referenced type has non-qualified name. 
            </summary>
            <param name="control_ns_id">The integer that identifies the control namespace.</param>
            <param name="type_name">The name of the referenced type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.NilAttribute(System.Int32,System.Boolean)">
            <summary>
            Adds the 'nil' attribute to the StartTag that is being constructed.
            </summary>
            <param name="control_ns_id">The integer that identifies the control namespace.</param>
            <param name="value">The value of the 'nil' attribute.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Attributes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds attributes to the StartTag that is being constructed. The attributes
            to add are taken from the value of the field with the ANY-ATTRIBUTES EI
            applied. It is expected that each entry in the list has the format:
            [URI ]ncname='value' or [URI ]ncname="value". Possible namespace restrictions
            are currently not checked and are not enforced.
            </summary>
            <param name="attributes">The list of attributes to add.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.BeginAttribute(System.Int32,System.String)">
            <summary>
            Begins the construction of the attribute with the qualified name.
            </summary>
            <param name="ns_id">The integer that identifies the namespace.</param>
            <param name="local_name">The local name of the attribute.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.BeginAttribute(System.String)">
            <summary>
            Begins the construction of the attribute with non-qualified name.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EndAttribute">
            <summary>
            Completes the construction of the attribute that was started
            by the BeginAttribute() method.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeNumber(System.Int64,System.Boolean)">
            <summary>
            Writes the value of INTEGER or ENUMERATED (with USE-NUMBER EI).
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeNumber(System.UInt64,System.Boolean)">
            <summary>
            Writes the value of INTEGER or ENUMERATED (with USE-NUMBER EI).
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeNumber(System.String,System.Boolean)">
            <summary>
            Writes the value of INTEGER represented by the BigInteger.
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeReal(System.Double,System.Boolean)">
            <summary>
            Writes the value of REAL when the type does not have the DECIMAL EI.
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeReal(System.Decimal,System.Boolean)">
            <summary>
            Writes the value of REAL when the type does not have the DECIMAL EI.
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeDecimal(System.Double,System.Boolean)">
            <summary>
            Writes the value of REAL when the type has the DECIMAL EI applied.
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeDecimal(System.Decimal,System.Boolean)">
            <summary>
            Writes the value of REAL when the type has the DECIMAL EI.
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeOctetString(System.Byte[],System.Boolean)">
            <summary>
            Writes the binary data as the xmlhstring.
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeOctetStringBase64(System.Byte[])">
            <summary>
            Writes the binary data using BASE64 encoding.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeBitString(Oss.Asn1.BitString)">
            <summary>
            Writes the value of the BIT STRING as the xmlbstring.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.CollapseWhitespace">
            <summary>
            Specifies that the string value, passed to the next call of the
            Encode[nonUnicode]String or EncodeIdentifier, must conform to
            restrictions imposed by the WHITESPACE COLLAPSE EI. Namely, the
            value should not contain HT(9), LF(10), CR(13) characters, trailing
            or leading space characters or multiple adjucent space characters.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.ReplaceWhitespace">
            <summary>
            Specifies that the string value, passed to the next call of the
            Encode[nonUnicode]String or EncodeIdentifier, must conform to
            restrictions imposed by the WHITESPACE REPLACE EI. Namely, the
            value should not contain HT(9), LF(10) or CR(13) characters.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeIdentifier(System.String)">
            <summary>
            Writes the textual identifier of the enumerator, named number,
            named bit or BOOLEAN.
            </summary>
            <param name="identifier">The text to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeNonUnicodeString(System.Byte[])">
            <summary>
            Writes the value of the TeletexString, VideotexString, GraphicString,
            GeneralString or ObjectDescriptor. Special characters are escaped as
            necessary.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeNonUnicodeString(System.Byte[],System.Int32)">
            <summary>
            Writes the value of the TeletexString, VideotexString, GraphicString,
            GeneralString or ObjectDescriptor. Special characters are escaped as
            necessary.
            </summary>
            <param name="value">The value to write.</param>
            <param name="ns_id">The integer that identifies the namespace
            for empty elements representing control characters.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeNonUnicodeStringBase64(System.Byte[])">
            <summary>
            Writes the value of the TeletexString, VideotexString, GraphicString,
            GeneralString or ObjectDescriptor using BASE64 encoding.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeString(System.String)">
            <summary>
            Writes the value of the restricted character string other than the TeletexString, 
            VideotexString, GraphicString, GeneralString, ObjectDescriptor or
            UniversalString. Special characters are escaped as necessary.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeString(System.String,System.Int32)">
            <summary>
            Writes the value of the restricted character string other than the TeletexString, 
            VideotexString, GraphicString, GeneralString, ObjectDescriptor or
            UniversalString. Special characters are escaped as necessary.
            </summary>
            <param name="value">The value to write.</param>
            <param name="ns_id">The integer that identifies the namespace
            for empty elements representing control characters.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeStringBase64(System.String)">
            <summary>
            Writes the value of the restricted character string other than the TeletexString, 
            VideotexString, GraphicString, GeneralString, ObjectDescriptor or
            UniversalString using BASE64 encoding.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeString(System.Int32[])">
            <summary>
            Writes the value of the UniversalString. Special characters are escaped 
            as necessary.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeString(System.Int32[],System.Int32)">
            <summary>
            Writes the value of the UniversalString. Special characters are escaped 
            as necessary.
            </summary>
            <param name="value">The value to write.</param>
            <param name="ns_id">The integer that identifies the namespace
            for empty elements representing control characters.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeStringBase64(System.Int32[])">
            <summary>
            Writes the value of the UniversalString using BASE64 encoding.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Writes the value of the OBJECT IDENTIFIER.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Writes the value of the RELATIVE-OID.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Encodes the value of UTCTime.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Encodes the value of GeneralizedTime.
            </summary>
            <param name="value">the value to encode.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeOSCC(Oss.Asn1.BasePdu,System.Boolean,System.Boolean)">
            <summary>
            Encodes the value contained in the  OctetStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded</param>
            <param name="xmlTypedValueAllowed">Specifies that the XMLTypedValue encoding is allowed</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeOSCCBase64(Oss.Asn1.BasePdu,System.Boolean)">
            <summary>
            Encodes the value contained in the  OctetStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded</param>
            <param name="xmlTypedValueAllowed">Specifies that the XMLTypedValue encoding is allowed</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeBSCC(Oss.Asn1.BasePdu,System.Boolean)">
            <summary>
            Encodes the value contained in the BitStringWithContentsConstraint.
            </summary>
            <param name="value">The value to be encoded.</param>
            <param name="xmlTypedValueAllowed">Specifies that the XMLTypedValue encoding is allowed</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeOpentype(Oss.Asn1.OpenType,System.Boolean)">
            <summary>
            Writes the value of open type.
            </summary>
            <param name="value">The value to write.</param>
            <param name="modifiedEncoding">Specifies whether the MODIFIED-ENCODINGS 
            is applied for the type.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeOpentypeBase64(Oss.Asn1.OpenType)">
            <summary>
            Writes the value of open type using BASE64 encoding.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeQName(System.String,System.String)">
            <summary>
            Writes the QName in the format prefix:ncname or ncname.
            </summary>
            <param name="prefix">Specifies the prefix, associated with the namespace of the QName. 
            Is null for the unqualified name.</param>
            <param name="local_name">Specifies the name.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EncodeWhitespace">
            <summary>
            Writes the single space character to the output. This method is invoked
            when one needs to prevent interpretation of empty encoding as DEFAULT-FOR-EMPTY
            text.
            <exception cref="T:System.InvalidOperationException">If the method is invoked when writing the LIST value.</exception>
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.BeginList">
            <summary>
            Starts the construction of the value of the type with the LIST EI applied.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.Separator">
            <summary>
            Inserts the separator between list items.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EndList">
            <summary>
            Completes the construction of the value of the type with the LIST EI applied.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.PIorComment(System.String)">
            <summary>
            Writes XML processing instruction(s) and/or comment(s).
            </summary>
            <param name="piOrComment">The string containing PIs and/or comments to write.</param>
        </member>
        <member name="M:Oss.Asn1.Internal.ExerEncoder.EmbedValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Schedules the insertion of text before child elements of the value being encoded.
            </summary>
            <param name="values">The list of strings to insert betwwen child elements.</param>
        </member>
        <member name="T:Oss.Asn1.Internal.SchemaMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oss.Asn1.Internal.SchemaMetadata.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="controlTable"></param>
        </member>
        <member name="T:Oss.Asn1.CperEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for Cper codecs.
            </summary>
        </member>
        <member name="M:Oss.Asn1.CperEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            PaddingBitValue = 0
            Validate = false
            </summary>
        </member>
        <member name="M:Oss.Asn1.CperEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            CperEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of CperEncoderOptions class or 
            the reference to a new CperEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.Asn1ConstraintException">
            <summary>
            Class for validation exceptions which signals about constraint violations.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1ConstraintException.#ctor">
            <summary>
            Initializes the new instance with default error message
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1ConstraintException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor)">
            <summary>
            Initializes the new instance with given error description.
            </summary>
            <param name="descr">Error description.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1ConstraintException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.String)">
            <summary>
            Initializes the new instance with given error description and suffix for the error
            message.
            </summary>
            <param name="descr">Error description.</param>
            <param name="suffix">Error suffix.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1ConstraintException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.Exception)">
            <summary>
            Initializes the new instance with given error description, and inner exception.
            </summary>
            <param name="descr">Error description.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the new instance from serialized data.
            </summary>
            <param name="info">Serialization data info</param>
            <param name="context">Serialization stream context</param>
        </member>
        <member name="T:Oss.Asn1.Asn1InvalidEncodingException">
            <summary>
            Class for decoders exceptions thrown in cases when invalid undecodable data was passed to the decoder.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidEncodingException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor)">
            <summary>
            Initializes the new instance with given error description.
            </summary>
            <param name="descr">Error description.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidEncodingException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.String)">
            <summary>
            Initializes the new instance with given error description and suffix for the error
            message.
            </summary>
            <param name="descr">Error description.</param>
            <param name="suffix">Error suffix.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidEncodingException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.Exception)">
            <summary>
            Initializes the new instance with given error description and inner exception.
            </summary>
            <param name="descr">Error description.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidEncodingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the new instance from serialized data.
            </summary>
            <param name="info">Serialization data info</param>
            <param name="context">Serialization stream context</param>
        </member>
        <member name="T:Oss.Asn1.Asn1OutputFullException">
            <summary>
            Exceptions thrown when end of given output source reached. For example,
            in case of encoding to a pre-allocated buffer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1OutputFullException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor)">
            <summary>
            Initializes the new instance with given error description.
            </summary>
            <param name="descr">Error description.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1OutputFullException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.String)">
            <summary>
            Initializes the new instance with given error description and suffix for the error
            message.
            </summary>
            <param name="descr">Error description.</param>
            <param name="suffix">Error suffix.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1OutputFullException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.Exception)">
            <summary>
            Initializes the new instance with given error description and inner exception.
            </summary>
            <param name="descr">Error description.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1OutputFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the new instance from serialized data.
            </summary>
            <param name="info">Serialization data info</param>
            <param name="context">Serialization stream context</param>
        </member>
        <member name="T:Oss.Asn1.Asn1PrinterException">
            <summary>
            Class for exceptions thrown from Printer functions.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1PrinterException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor)">
            <summary>
            Initializes the new instance with given error description.
            </summary>
            <param name="descr">Error description.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1PrinterException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.String)">
            <summary>
            Initializes the new instance with given error description and suffix for the error
            message.
            </summary>
            <param name="descr">Error description.</param>
            <param name="suffix">Error suffix.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1PrinterException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.Exception)">
            <summary>
            Initializes the new instance with given error description and inner exception.
            </summary>
            <param name="descr">Error description.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1PrinterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the new instance from serialized data.
            </summary>
            <param name="info">Serialization data info</param>
            <param name="context">Serialization stream context</param>
        </member>
        <member name="T:Oss.Asn1.Asn1InvalidDataException">
            <summary>
            Class for exceptions that signals that corrupted data was given to the runtime
            functions.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidDataException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor)">
            <summary>
            Initializes the new instance with given error description.
            </summary>
            <param name="descr">Error description.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidDataException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.String)">
            <summary>
            Initializes the new instance with given error description and suffix for the error
            message.
            </summary>
            <param name="descr">Error description.</param>
            <param name="suffix">Error suffix.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidDataException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.Exception)">
            <summary>
            Initializes the new instance with given error description and inner exception.
            </summary>
            <param name="descr">Error description.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1InvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the new instance from serialized data.
            </summary>
            <param name="info">Serialization data info</param>
            <param name="context">Serialization stream context</param>
        </member>
        <member name="T:Oss.Asn1.Asn1PduIdentificationException">
            <summary>
            Class for decoders exceptions thrown in cases when invalid undecodable data was passed to the decoder.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1PduIdentificationException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor)">
            <summary>
            Initializes the new instance with given error description.
            </summary>
            <param name="descr">Error description.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1PduIdentificationException.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.String)">
            <summary>
            Initializes the new instance with given error description and suffix for the error
            message.
            </summary>
            <param name="descr">Error description.</param>
            <param name="suffix">Error suffix.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1PduIdentificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the new instance from serialized data.
            </summary>
            <param name="info">Serialization data info</param>
            <param name="context">Serialization stream context</param>
        </member>
        <member name="T:Oss.Asn1.BaseDecoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the decoding operation.
            </summary>
        </member>
        <member name="T:Oss.Asn1.BaseDecoderOptions.ConformanceLevel">
            <summary>
            Represents the levels of tolerance to encodings with deviations from the standard.
            Based on these values the decoder will decide which encodings are reported as invalid.
            </summary>
        </member>
        <member name="F:Oss.Asn1.BaseDecoderOptions.ConformanceLevel.Relaxed">
            <summary>Accept most of non-standard encodings which can be decoded correctly</summary>
        </member>
        <member name="F:Oss.Asn1.BaseDecoderOptions.ConformanceLevel.Regular">
            <summary>Accept minor non-essential deviations from the standard</summary>
        </member>
        <member name="F:Oss.Asn1.BaseDecoderOptions.ConformanceLevel.Strict">
            <summary>Report an error for every deviation from the standard</summary>
        </member>
        <member name="P:Oss.Asn1.BaseDecoderOptions.AutoDecode">
            <summary>
            If true, open types and contents constraints are decoded at the time when the PDU that contains them is decoded. 
            Default value is true.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseDecoderOptions.Validate">
            <summary>
            If true, PDUs are validated after decoding.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseDecoderOptions.IgnoreDeferredDecoding">
            <summary>
            If true, deferred components are decoded rather than left in encoded form.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseDecoderOptions.Conformance">
            <summary>
            Specifies the level of tolerance of the decoder to deviations from the standard. 
            Defalut value is ConformanceLevel.Regular
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseDecoderOptions.RecursionLimit">
            <summary>
            Limits the depth of recursiva calls when the ASN.1 schema includes types with circular definitions.
            When the RecursionLimit is set to a positive value and the limit is exceeded, the decoder aborts
            the operation and throws the InvalidOperationException.
            Default value is 16.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseDecoderOptions.RelaxedDecoding">
            <summary>
            In the relaxed mode the decoder will accept most of non-standard encodings which can be decoded correctly
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseDecoderOptions.StrictDecoding">
            <summary>
            In the strict mode the decoder will report an error for every deviation from the standard
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseDecoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            AutoDecode = true
            Conformance = ConformanceLevel.Regular
            Validate = false
            this.RecursionLimit = 16
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseDecoderOptions.Set(Oss.Asn1.BaseDecoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">Options to be set</param>
        </member>
        <member name="T:Oss.Asn1.BaseEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BaseEncoderOptions.Validate">
            <summary>
            If true, the PDU is validated before encoding.
            Default value is false.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseEncoderOptions.#ctor">
            <summary>
            The default constructor initializes options with default values.
            Validate = false
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseEncoderOptions.Set(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">Options to be set</param>
        </member>
        <member name="T:Oss.Asn1.BasePdu">
            <summary>
            A base class for all PDU classes to derive from 
            </summary>
        </member>
        <member name="T:Oss.Asn1.BaseType">
            <summary>
            Base class for ASN.1 types. 
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for this object instance.</returns>
        </member>
        <member name="M:Oss.Asn1.BaseType.Equals(System.Object)">
            <summary>
            Determines whether 'that' object is equal to 'this'.
            </summary>
            <param name="that">The object to compare with</param>
            <returns>true if 'that' equal to 'this'; otherwise, false</returns>
        </member>
        <member name="M:Oss.Asn1.BaseType.Validate">
            <summary>
            Validates PDU data.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BaseType.GetAsn1TypeName">
            <summary>
            Returns ASN.1 schema type name
            </summary>
            <returns>Type name</returns>
        </member>
        <member name="M:Oss.Asn1.BaseType.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Oss.Asn1.BaseType.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Oss.Asn1.BaseType.PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper)">
            <summary>
            Prints the object in ASN.1 Value Notation format
            </summary>
            <param name="prt"></param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeBer(Oss.Asn1.Internal.BerArrayEncoder,System.Boolean)">
            <summary>
            Encode this object into BER format
            </summary>
            <param name="enc">BER encoder object</param>
            <param name="encodeContentOnly">Whether or not to append tag and length to the raw data</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.BaseType.DecodeBer(Oss.Asn1.Internal.BerDecoder,System.Boolean)">
            <summary>
            Decode this object from BER format
            </summary>
            <param name="dec">BER decoder object</param>
            <param name="decodeContentOnly">Whether or not the encoding includes tag and length</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeDer(Oss.Asn1.Internal.DerArrayEncoder,System.Boolean)">
            <summary>
            Encode this object into DER format
            </summary>
            <param name="enc">DER encoder object</param>
            <param name="encodeContentOnly">Whether or not to append tag and length to the raw data</param>
            <returns>Encoded length in bytes</returns>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeOer(Oss.Asn1.Internal.OerArrayEncoder)">
            <summary>
            Encode this object into OER format
            </summary>
            <param name="enc">OER encoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.DecodeOer(Oss.Asn1.Internal.OerStreamDecoder)">
            <summary>
            Decode this object from OER format
            </summary>
            <param name="dec">OER decoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeCoer(Oss.Asn1.Internal.CoerArrayEncoder)">
            <summary>
            Encode this object into COER (Canonical OER) format
            </summary>
            <param name="enc">COER encoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodePer(Oss.Asn1.Internal.PerEncoder)">
            <summary>
            Encode this object into PER format
            </summary>
            <param name="enc">PER encoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.DecodePer(Oss.Asn1.Internal.PerDecoder)">
            <summary>
            Decode this object from PER format
            </summary>
            <param name="dec">PER decoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeCper(Oss.Asn1.Internal.CperEncoder)">
            <summary>
            Encode this object into CPER (Canonical PER) format
            </summary>
            <param name="enc">CPER encoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeXer(Oss.Asn1.Internal.XerEncoder,System.Boolean)">
            <summary>
            Encode this object into XER format
            </summary>
            <param name="enc">XER encoder object</param>
            <param name="encodeContentOnly">Whether or not to append tag to the raw data</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.DecodeXer(Oss.Asn1.Internal.XerDecoder,System.Boolean)">
            <summary>
            Decode this object from XER format
            </summary>
            <param name="dec">XER decoder object</param>
            <param name="decodeContentOnly">Whether or not the encoding include tag or just raw data</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeCxer(Oss.Asn1.Internal.CxerEncoder,System.Boolean)">
            <summary>
            Encode this object into CXER (Canonical XER) format
            </summary>
            <param name="enc">CXER encoder object</param>
            <param name="encodeContentOnly">Whether or not to append tag to the raw data</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeJson(Oss.Asn1.Internal.JsonEncoder)">
            <summary>
            Encode this object into JSON format
            </summary>
            <param name="enc">JSON encoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.DecodeJson(Oss.Asn1.Internal.JsonDecoder)">
            <summary>
            Decode this object from JSON format
            </summary>
            <param name="dec">JSON decoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.EncodeExer(Oss.Asn1.Internal.ExerEncoder)">
            <summary>
            Encode this object into EXER format
            </summary>
            <param name="enc">EXER encoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.DecodeExer(Oss.Asn1.Internal.ExerDecoder)">
            <summary>
            Decode this object from EXER format
            </summary>
            <param name="dec">EXER decoder object</param>
        </member>
        <member name="M:Oss.Asn1.BaseType.ToString(Oss.Asn1.ValueNotationFormatter.PrintAsn1ValueNotation)">
            <summary>
            Returns a string containing output of the value printing method call.
            </summary>
            <param name="printValue">value printing method</param>
            <returns>ASN.1 value notation.</returns>
        </member>
        <member name="T:Oss.Asn1.BerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for BER codecs.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BerEncoderOptions.UseIndefiniteLengthEncoding">
            <summary>
            This will force the encoder to use the indefinite length form 
            instead of the definite length form, only for constructed or tagged types. 
            Defalut value is false.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            UseIndefiniteLengthEncoding = false
            Validate = false
            </summary>
        </member>
        <member name="M:Oss.Asn1.BerEncoderOptions.Set(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">Options to be set</param>
        </member>
        <member name="M:Oss.Asn1.BerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            BerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of BerEncoderOptions class or 
            the reference to a new BerEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.DerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for Der codecs.
            </summary>
        </member>
        <member name="P:Oss.Asn1.DerEncoderOptions.UseIndefiniteLengthEncoding">
            <summary>
            This property overrides the base.UseIndefiniteLengthEncoding
            propery. Because in DER the definite length form is used,
            the setter is absent to disallow a changing of the default
            base.UseIndefiniteLengthEncoding false value.
            </summary>
        </member>
        <member name="M:Oss.Asn1.DerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            Validate = false
            </summary>
        </member>
        <member name="M:Oss.Asn1.DerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            DerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of DerEncoderOptions class or 
            the reference to a new DerEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.JsonEncoderOptions">
            <summary>
            The container class for the options which affect the behavior of the encoding operation for the JSON codec.
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.IndentSize">
            <summary>
            Specifies the width of one indentation level. The default value is '2'.
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.LineSeparator">
            <summary>
            Specifies the newline sequence. The default value is 'System.Environment.NewLine'.
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.TextEncoding">
            <summary>
            Specifies the character encoding when the JSON tokens are written to the Stream.
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.EncodeAbsentComponents">
            <summary>
            Selects alternative encoding for optional fields of a SEQUENCE or SET that are not
            present in the value. When this option is set, absent field is included into the 
            encoding and the JSON token 'null' is used to specify its value. This option is
            ignored for optional fields that have NULL or open type ASN.1 types. By default,
            absent optional fields are omitted from the encoding.
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.EncodeImpliedValues">
            <summary>
            When the component has the default value and the value of the component is not explicitly
            specified in the input PDU, encode the default (implied) value. By default, values of such
            components are not included into the output encoding.
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.EncodeContainedValuesAsText">
            <summary>
            Encode values of BIT STRING or OCTET STRING with contents constraint
            as text (JSON value representing the contained value) rather than as 
             hex string. Applies only to the case when the contents constraint does not 
            specify the ENCODED BY clause.
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.WrapPDUs">
            <summary>
            The JSON wrapper encoder option has been removed from the JER and is not supported any longer. 
            </summary>
        </member>
        <member name="P:Oss.Asn1.JsonEncoderOptions.WrapContainedValues">
            <summary>
            The JSON wrapper encoder option has been removed from the JER and is not supported any longer.
            </summary>
        </member>
        <member name="M:Oss.Asn1.JsonEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.JsonEncoderOptions.Set(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">The source object containing the options to copy.</param>
        </member>
        <member name="M:Oss.Asn1.JsonEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            JsonEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of JsonEncoderOptions class or 
            the reference to a new JsonEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.OerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for OER codecs.
            </summary>
        </member>
        <member name="M:Oss.Asn1.OerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            Validate = false
            </summary>
        </member>
        <member name="M:Oss.Asn1.OerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            OerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of OerEncoderOptions class or 
            the reference to a new OerEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.CoerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for Coer codecs.
            </summary>
        </member>
        <member name="M:Oss.Asn1.CoerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            Validate = false
            </summary>
        </member>
        <member name="M:Oss.Asn1.CoerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            CoerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of CoerEncoderOptions class or 
            the reference to a new CoerEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.Asn1Type">
            <summary>
            Interface to access the type information of ASN.1 open types within   
            information objects (e.g. during automatic decoding of open types).
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1Type.CreateInstance">
            <summary>
            Creates an PDU object of a type represented by this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oss.Asn1.Asn1Type.GetInstanceType">
            <summary>
            Gets a System.Type object for the PDU type represented by this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oss.Asn1.Asn1Type`1">
            <summary>
            Represents the value of the type field of ASN.1 information object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Oss.Asn1.Asn1Type`1.CreateInstance">
            <summary>
            Creates an PDU object of a type represented by this instance
            </summary>
            <returns>PDU object of a specific type</returns>
        </member>
        <member name="M:Oss.Asn1.Asn1Type`1.GetInstanceType">
            <summary>
            Gets a System.Type object for the PDU type represented by this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oss.Asn1.BitStringWithContentsConstraint`1">
            <summary>
            Represent ASN.1 BIT STRING with CONTAINING/ENCODED BY contents constrains
            </summary>
            <typeparam name="T">ASN.1 type of the contained data</typeparam>
        </member>
        <member name="M:Oss.Asn1.BitStringWithContentsConstraint`1.#ctor(`0)">
            <summary>
            Initializes bit string from an ASN.1 data object
            </summary>
            <param name="decoded">ASN.1 data object</param>
        </member>
        <member name="M:Oss.Asn1.BitStringWithContentsConstraint`1.#ctor(Oss.Asn1.BitString)">
            <summary>
            Initializes bit string from an encoded data 
            </summary>
            <param name="encoded">Encoded bit string</param>
        </member>
        <member name="P:Oss.Asn1.BitStringWithContentsConstraint`1.Encoded">
            <summary>
            Encoded representation of bit string with content constraint
            </summary>
        </member>
        <member name="P:Oss.Asn1.BitStringWithContentsConstraint`1.Decoded">
            <summary>
            Decoded representation of bit string with content constraint
            </summary>
        </member>
        <member name="M:Oss.Asn1.BitStringWithContentsConstraint`1.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="right">The object to compare with</param>
            <returns>true if 'right' equal to 'this'; otherwise, false</returns>
        </member>
        <member name="M:Oss.Asn1.BitStringWithContentsConstraint`1.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for this object instance.</returns>
        </member>
        <member name="M:Oss.Asn1.BitStringWithContentsConstraint`1.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New BitStringWithContentsConstraint object with the same value.</returns>
        </member>
        <member name="T:Oss.Asn1.DeferredComponent`1">
            <summary>
            Represent ASN.1 deferred components, which can be in either encoded or decoded form
            </summary>
        </member>
        <member name="M:Oss.Asn1.DeferredComponent`1.#ctor(`0)">
            <summary>
            Initializes deferred component from a T object
            </summary>
            <param name="decoded"></param>
        </member>
        <member name="M:Oss.Asn1.DeferredComponent`1.#ctor(System.Byte[])">
            <summary>
            Initializes deferred component from an encoded array of bytes
            </summary>
            <param name="encoded"></param>
        </member>
        <member name="P:Oss.Asn1.DeferredComponent`1.Encoded">
            <summary>
            Encoded deferred component
            </summary>
        </member>
        <member name="P:Oss.Asn1.DeferredComponent`1.Decoded">
            <summary>
            Deferred component as a T object
            </summary>
        </member>
        <member name="M:Oss.Asn1.DeferredComponent`1.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="right">The object to compare with</param>
            <returns>true if 'right' equal to 'this'; otherwise, false</returns>
        </member>
        <member name="M:Oss.Asn1.DeferredComponent`1.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for this object instance.</returns>
        </member>
        <member name="M:Oss.Asn1.DeferredComponent`1.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New DeferredComponent object with the same value.</returns>
        </member>
        <member name="T:Oss.Asn1.ObjectIdentifier">
            <summary>
            Representation class for OBJECT IDENTIFIER ASN.1 type.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ObjectIdentifier.Arcs">
            <summary>
            Returns a read-only enumeration of the arcs.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the value of an arc does not fit in a long integer (64 bits)</exception>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance with already encoded data.
            No checks are done on the data. It is assumed that the required checks are performed by the decoder.
            </summary>
            <param name="data">Byte array with encoded data</param>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance from a string containing arcs.
            The string must be a list of integers separated by space (' ') or dot ('.') charachter.
            </summary>
            <param name="arcs">String containing the arcs of the ObjectIdentifier.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if: the arcs parameter is null or empty; if the arcs parameter is not in the required format; if one of the arcs is negative; if one of the arcs does not fit in a long integer (64 bits).</exception>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance with the given array of arcs.
            </summary>
            <param name="arcs">Array of arcs.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if: the arcs parameter is null or has less than 2 elements; any of the elements in the array is negative; the first two arcs are not valid in the registration tree.</exception>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.#ctor(Oss.Asn1.ObjectIdentifier,System.Int64)">
            <summary>
            Initializes a new instance as the concatenation of an existing ObjectIdentifier and an additional arc.
            </summary>
            <param name="root">An ObjectIdentifier which will be the first part of the newly constructed object.</param>
            <param name="additionalArc">The additional arc which will be appended to the root.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the additional arc is negative.</exception>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.#ctor(Oss.Asn1.ObjectIdentifier,Oss.Asn1.RelativeOid)">
            <summary>
            Initializes a new instance as the concatenation of an existing ObjectIdentifier and an additional RelativeOid.
            </summary>
            <param name="root">An ObjectIdentifier which will be the first part of the newly constructed object.</param>
            <param name="roid">The RelativeOid object which will be appended to the root.</param>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.Append(System.Int64)">
            <summary>
            Appends an additional arc to the current ObjectIdentifier instance. 
            </summary>
            <param name="additionalArc">The additional arc to be added to this object.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the additional arc is negative.</exception>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.Append(Oss.Asn1.RelativeOid)">
            <summary>
            Appends the arcs from a RelativeOid object to the current ObjectIdentifier instance.
            </summary>
            <param name="roid">The RelativeOid object which will be added to this object.</param>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.GetRelativeOid(System.Int32)">
            <summary>
            Retreives a part of the ObjectIdentifier starting from the arc with specified zero-based index up (inclusing this arc) to the last arc.
            </summary>
            <param name="index">The zero-based index of the first arc to be included in the resulting object.</param>
            <returns>A new instance of a RelativeOid object which will contain the arcs.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the index parameter is 0 or 1 or greater or equal to the number of arcs contained in the ObjectIdentifier.</exception>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.GetRelativeOid(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Retreives a part of the ObjectIdentifier by which does not contain the arcs of the root ObjectIdentifier.
            </summary>
            <param name="root">The root part which will not be a part of the new RelativeOid.</param>
            <returns>A new RelativeOid object obtained from the current object without the arcs contained in the root parameter. The returned value appended to the root will be an ObjectIdentifier with the same arcs as the current instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the root parameter is not a prefix of the current instance.</exception>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.Equals(System.Object)">
            <summary>
            Compares ObjectIdentifier objects by arcs value.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True if obj parameter is a non null instance of the ObjectIdentifier class and all arcs of the two instances are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.Equals(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Compares ObjectIdentifier objects by arcs value.
            </summary>
            <param name="oid">ObjectIdentifier to compare with.</param>
            <returns>True if oid parameter is not null and all arcs of the two instances are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.GetHashCode">
            <summary>
            Gets hash code value.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Oss.Asn1.ObjectIdentifier.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New ObjectIdentifier object with the same value.</returns>
        </member>
        <member name="T:Oss.Asn1.RelativeOid">
            <summary>
            Representation class for RELATIVE-OID ASN.1 type.
            </summary>
        </member>
        <member name="P:Oss.Asn1.RelativeOid.Arcs">
            <summary>
            Returns a read-only enumeration of the arcs.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the value of an arc does not fit in a long integer (64 bits)</exception>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance with already encoded data.
            No checks are done on the data. It is assumed that the required checks are performed by the decoder.
            </summary>
            <param name="data">Byte array with encoded data</param>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.#ctor(System.String)">
            <summary>
            Initializes a new instance from a string containing arcs.
            The string must be a list of integers separated by space (' ') or dot ('.') charachter.
            </summary>
            <param name="arcs">String containing the arcs of the ObjectIdentifier.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if: the arcs parameter is null or empty; if the arcs parameter is not in the required format; if one of the arcs is negative; if one of the arcs does not fit in a long integer (64 bits).</exception>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance with the given array of arcs.
            </summary>
            <param name="arcs">Array of arcs.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if: the arcs parameter is null or has no elements; any of the elements in the array is negative.</exception>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.#ctor(Oss.Asn1.RelativeOid,System.Int64)">
            <summary>
            Initializes a new instance as the concatenation of an existing RelativeOid and an additional arc.
            </summary>
            <param name="roid">An RelativeOid which will be the first part of the newly constructed object.</param>
            <param name="additionalArc">The additional arc which will be appended as the last arc of the newly constructed object.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the additional arc is negative.</exception>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.#ctor(Oss.Asn1.RelativeOid,Oss.Asn1.RelativeOid)">
            <summary>
            Initializes a new instance as the concatenation of an existing RelativeOid and another additional RelativeOid.
            </summary>
            <param name="first">A RelativeOid which will be the first part of the newly constructed object.</param>
            <param name="second">A RelativeOid which will be appended as the second part of the newly created object.</param>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.Append(System.Int64)">
            <summary>
            Appends an additional arc to the current RelativeOid instance. 
            </summary>
            <param name="additionalArc">The additional arc to be added to this object.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if the additional arc is negative.</exception>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.Append(Oss.Asn1.RelativeOid)">
            <summary>
            Appends the arcs from a RelativeOid object to the current RelativeOid instance.
            </summary>
            <param name="roid">The RelativeOid object which will be added to this object.</param>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.Equals(System.Object)">
            <summary>
            Compares RelativeOid objects by arcs value.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True if obj parameter is a non null instance of the RelativeOid class and all arcs of the two instances are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.Equals(Oss.Asn1.RelativeOid)">
            <summary>
            Compares RelativeOid objects by arcs value.
            </summary>
            <param name="roid">RelativeOid to compare with.</param>
            <returns>True if roid parameter is not null and all arcs of the two instances are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.GetHashCode">
            <summary>
            Gets hash code value.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Oss.Asn1.RelativeOid.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New RelativeOid object with the same value.</returns>
        </member>
        <member name="T:Oss.Asn1.IUnique`1">
            <summary>
            The interface that information object classes with UNIQUE members should implement.
            </summary>
        </member>
        <member name="M:Oss.Asn1.IUnique`1.GetUnique">
            <summary>
            Gets unique value.
            </summary>
            <returns>Unique value.</returns>
        </member>
        <member name="T:Oss.Asn1.FastObjectSet`2">
            <summary>
            The sorted information object set generic class (used in presence of UNIQUE).
            </summary>
            <typeparam name="U">Unique key values.</typeparam>
            <typeparam name="O">Information object.</typeparam>
        </member>
        <member name="F:Oss.Asn1.FastObjectSet`2._internal">
            <summary>
            Dictionary for storing information objects with their keys.
            </summary>
        </member>
        <member name="P:Oss.Asn1.FastObjectSet`2.Item(`0)">
            <summary>
            Accesses the information object (given the unique key).
            </summary>
            <param name="key">The unique key value.</param>
            <returns>Decoded integer number.</returns>
        </member>
        <member name="M:Oss.Asn1.FastObjectSet`2.Add(`1)">
            <summary>
            Adds an information object to object set. Throws an exception
            if any information object with the given unique key already exists.
            </summary>
            <param name="value">Information object.</param>
            <returns>Decoded integer number.</returns>
        </member>
        <member name="M:Oss.Asn1.FastObjectSet`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator of the information objects in the object set.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Oss.Asn1.FastObjectSet`2.FastObjectSetEnumerator">
            <summary>
            The private enumerator class that enumerates all the information objects in
            the information object set.
            </summary>
        </member>
        <member name="F:Oss.Asn1.FastObjectSet`2.FastObjectSetEnumerator._internal">
            <summary>
            Internal enumerator.
            </summary>
        </member>
        <member name="P:Oss.Asn1.FastObjectSet`2.FastObjectSetEnumerator.Current">
            <summary>
            Gets current information object.
            </summary>
        </member>
        <member name="M:Oss.Asn1.FastObjectSet`2.FastObjectSetEnumerator.MoveNext">
            <summary>
            Moves to the next enumerated item.
            </summary>
            <returns>True, if next item exist.</returns>
        </member>
        <member name="M:Oss.Asn1.FastObjectSet`2.FastObjectSetEnumerator.Reset">
            <summary>
            Resets enumeration process.
            </summary>
        </member>
        <member name="M:Oss.Asn1.FastObjectSet`2.FastObjectSetEnumerator.#ctor(Oss.Asn1.FastObjectSet{`0,`1})">
            <summary>
            Initializes current instance with given FastObjectSet.
            </summary>
            <param name="coll">Object set to enumerate through.</param>
        </member>
        <member name="T:Oss.Asn1.OctetStringWithContentsConstraint`1">
            <summary>
            Represent ASN.1 OCTET STRING with CONTAINING/ENCODED BY contents constrains
            </summary>
            <typeparam name="T">ASN.1 type of the contained data</typeparam>
        </member>
        <member name="M:Oss.Asn1.OctetStringWithContentsConstraint`1.#ctor(`0)">
            <summary>
            Initializes octet string from an ASN.1 data object
            </summary>
            <param name="decoded">ASN.1 data object</param>
        </member>
        <member name="M:Oss.Asn1.OctetStringWithContentsConstraint`1.#ctor(System.Byte[])">
            <summary>
            Initializes octet string from an encoded data 
            </summary>
            <param name="encoded">Encoded octet string</param>
        </member>
        <member name="P:Oss.Asn1.OctetStringWithContentsConstraint`1.Encoded">
            <summary>
            Encoded representation of octet string with content constraint
            </summary>
        </member>
        <member name="P:Oss.Asn1.OctetStringWithContentsConstraint`1.Decoded">
            <summary>
            Decoded representation of octet string with content constraint
            </summary>
        </member>
        <member name="M:Oss.Asn1.OctetStringWithContentsConstraint`1.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="right">The object to compare with</param>
            <returns>true if 'right' equal to 'this'; otherwise, false</returns>
        </member>
        <member name="M:Oss.Asn1.OctetStringWithContentsConstraint`1.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for this object instance.</returns>
        </member>
        <member name="M:Oss.Asn1.OctetStringWithContentsConstraint`1.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New OctetStringWithContentsConstraint object with the same value.</returns>
        </member>
        <member name="T:Oss.Asn1.OpenType">
            <summary>
            Represent ASN.1 open type objects, which can be in either encoded or decoded form
            </summary>
        </member>
        <member name="M:Oss.Asn1.OpenType.#ctor(Oss.Asn1.BasePdu)">
            <summary>
            Initializes open type from a PDU object
            </summary>
            <param name="decoded"></param>
        </member>
        <member name="M:Oss.Asn1.OpenType.#ctor(System.Byte[])">
            <summary>
            Initializes open type from an encoded array of bytes
            </summary>
            <param name="encoded"></param>
        </member>
        <member name="P:Oss.Asn1.OpenType.Encoded">
            <summary>
            Encoded open type
            </summary>
        </member>
        <member name="P:Oss.Asn1.OpenType.Decoded">
            <summary>
            Open type as a PDU object
            </summary>
        </member>
        <member name="M:Oss.Asn1.OpenType.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="right">The object to compare with</param>
            <returns>true if 'right' equal to 'this'; otherwise, false</returns>
        </member>
        <member name="M:Oss.Asn1.OpenType.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for this object instance.</returns>
        </member>
        <member name="M:Oss.Asn1.OpenType.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New OpenType object with the same value.</returns>
        </member>
        <member name="T:Oss.Asn1.Asn1Exception">
            <summary>
            Base class for ASN.1 exceptions.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Asn1Exception.ErrorSource">
            <summary>
            Source where the error happened (encoder, decoder, printer, validator).
            </summary>
        </member>
        <member name="F:Oss.Asn1.Asn1Exception._descr">
            <summary>
            ExceptionDescriptor of the error message.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,Oss.Asn1.Asn1Exception.ErrorSources)">
            <summary>
            Initializes the new instance with given error description and error source.
            </summary>
            <param name="descr">Error description.</param>
            <param name="source">Source where error happened.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.String,Oss.Asn1.Asn1Exception.ErrorSources)">
            <summary>
            Initializes the new instance with given error description, suffix for the error
            message and error source.
            </summary>
            <param name="descr">Error description.</param>
            <param name="suffix">Error suffix.</param>
            <param name="source">Source where error happened.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.#ctor(Oss.Asn1.Internal.ExceptionDescriptor,System.Exception,Oss.Asn1.Asn1Exception.ErrorSources)">
            <summary>
            Initializes the new instance with given error description, error source and inner
            exception.
            </summary>
            <param name="descr">Error description.</param>
            <param name="innerException">Inner exception.</param>
            <param name="source">Source where error happened.</param>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the new instance from serialized data.
            </summary>
            <param name="info">Serialization data info</param>
            <param name="context">Serialization stream context</param>
        </member>
        <member name="P:Oss.Asn1.Asn1Exception.Message">
            <summary>
            Gets error message composed of one-character error source representation,
            four-digit error code and error text. If ExeptionDescriptor is null
            returns "Undescribed Exception" message.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Asn1Exception.ErrorCode">
            <summary>
            Gets four-digit code of the error.
            </summary>
        </member>
        <member name="P:Oss.Asn1.Asn1Exception.Context">
            <summary>
            Consolidates context for current exception into one string.
            </summary>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.AppendContext(System.Exception,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends an item to the exception context
            </summary>
            <param name="ex"></param>
            <param name="csfield">C# field name</param>
            <param name="cstype">C# type name</param>
            <param name="asn1field">ASN.1 field name</param>
            <param name="asn1type">ASN.1 class name</param>
            <param name="isOpenType">specifies if the field is an open type</param>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.GetContext(System.Exception)">
            <summary>
            Consolidates context for provided exception into one string.
            </summary>
            <param name="ex">exception from which the context is extracted</param>
            <returns>context consolidated as a string</returns>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.GetContextAsn1Path(System.Collections.Generic.List{Oss.Asn1.Asn1Exception.ContextItem})">
            <summary>
            Consolidates the data from the context parameter into an ASN1 field path.
            </summary>
            <param name="context">specifies the list of context items to be processed</param>
            <returns>the ASN1 path as a string</returns>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.GetContextCsPath(System.Collections.Generic.List{Oss.Asn1.Asn1Exception.ContextItem})">
            <summary>
            Consolidates the data from the context parameter into an C# field path.
            </summary>
            <param name="context">specifies the list of context items to be processed</param>
            <returns>the C# path as a string</returns>
        </member>
        <member name="M:Oss.Asn1.Asn1Exception.CharErrorSource(Oss.Asn1.Asn1Exception.ErrorSources)">
            <summary>
            Used to get single character representation of the error source,
            that used in error message. 
            </summary>
            <param name="errorSource">Sorce of the error.</param>
            <returns>Single character representation of the error source.
            'E' returned for the encoder error source.
            'D' returned for the decoder error source.
            'P' returned for the printer error source.
            'V' returned for the validator error source.
            </returns>
        </member>
        <member name="T:Oss.Asn1.PerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for PER codecs.
            </summary>
        </member>
        <member name="P:Oss.Asn1.PerEncoderOptions.PaddingBitValue">
            <summary>
            Gets or sets the value used for padding.
            Use any value different than zero to define the padding bit as 1.
            Set the property to zero in order to define the padding bit as 0.
            Default value is 0.
            </summary>
        </member>
        <member name="M:Oss.Asn1.PerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            PaddingBitValue = 0
            Validate = false
            </summary>
        </member>
        <member name="M:Oss.Asn1.PerEncoderOptions.Set(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">Options to be set</param>
        </member>
        <member name="M:Oss.Asn1.PerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            PerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of PerEncoderOptions class or 
            the reference to a new PerEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.SampleTextWriter">
            <summary>
            Helper class used in the generated sample code.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a SampleTextWriter object with a target TextWriter.
            </summary>
            <param name="tw">The TextWriter object in which PDUs are printed.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteBeginSequence">
            <summary>
            Writes the beginning of a SEQUENCE type.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteEndSequence">
            <summary>
            Writes the end of a SEQUENCE type.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteFieldName(System.String)">
            <summary>
            Writes the name of a SEQEUNCE field.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteBeginSeqOf">
            <summary>
            Writes the beginning of a SEQUENCE OF type.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteEndSeqOf">
            <summary>
            Writes the end of a SEQUENCE OF type.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteSeqOfFieldName(System.String)">
            <summary>
            Writes the name of a SEQUENCE OF item.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteSeparator">
            <summary>
            Writes the separator between SEQUENCE OF items.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteChoiceAlternativeName(System.String)">
            <summary>
            Writes the name of CHOICE's alternative.
            </summary>
            <param name="name">The name of the alternative.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteBeginContaining">
            <summary>
            Writes the beginning of a type with contents constraints.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteEndContaining">
            <summary>
            Writes the end of a type with contents constraints.
            </summary>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteBigInteger(System.String)">
            <summary>
            Writes an INTEGER value represented as BigInteger.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteInteger(System.Int64)">
            <summary>
            Writes an INTEGER value represented as long.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteInteger(System.UInt64)">
            <summary>
            Writes an INTEGER value represented as ulong.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteInteger(System.Int32)">
            <summary>
            Writes an INTEGER value represented as int.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteBool(System.Boolean)">
            <summary>
            Writes a BOOLEAN value.
            </summary>
            <param name="value">The value to be written</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteDouble(System.Double)">
            <summary>
            Writes a REAL value represented as double.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteDecimal(System.Decimal)">
            <summary>
            Writes a REAL value represented as decimal.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteBitString(Oss.Asn1.BitString)">
            <summary>
            Writes a BIT STRING value. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteBitString(Oss.Asn1.BitString,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Writes a BIT STRING with named bits value. 
            </summary>
            <param name="value">The value to be written.</param>
            <param name="bitNames">A dictionary containing the name of each named bit.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteOctetString(System.Byte[])">
            <summary>
            Writes an OCTET STRING value. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteString(System.String)">
            <summary>
            Writes a value represented as a String object. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteNKMCString(System.Byte[])">
            <summary>
            Writes a value represented as byte array.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.Write4ByteChar(System.Int32[])">
            <summary>
            Writes a value represented as int array. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteObjectIdentifier(Oss.Asn1.ObjectIdentifier)">
            <summary>
            Writes an OBJECT IDENTIFIER value. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteRelativeOid(Oss.Asn1.RelativeOid)">
            <summary>
            Writes an RELATIVE-OID value. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteUTCTime(Oss.Asn1.UTCTime)">
            <summary>
            Writes an UTCTime value.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteGeneralizedTime(Oss.Asn1.GeneralizedTime)">
            <summary>
            Writes a GeneralizedTime value. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteOpenType(Oss.Asn1.OpenType)">
            <summary>
            Writes an open type value. 
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteDeferredComponent``1(Oss.Asn1.DeferredComponent{``0})">
            <summary>
            Writes a deferred component.
            </summary>
            <typeparam name="T">Type of the deferred component.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Oss.Asn1.SampleTextWriter.WriteLine">
            <summary>
            Writes a new line. 
            </summary>
        </member>
        <member name="T:Oss.Asn1.BitString">
            <summary>
            Class provides functionality for ASN.1 BIT STRING type.
            BitString can be converted to <c>System.Collections.BitArray</c>
            via ToBitArray() method.
            BitString supports iteration through the boolean values 
            using foreach construction.
            </summary>
        </member>
        <member name="F:Oss.Asn1.BitString._buffer">
            <summary>
            A byte array that represents the current BitString object.
            </summary>
        </member>
        <member name="F:Oss.Asn1.BitString._bitLen">
            <summary>
            Number of bit values in BitString.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BitString.Count">
            <summary>
            Gets the number of bits contained in the BitString.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BitString.Buffer">
            <summary>
            Gets or sets a byte array that represents the current BitString object.
            Bits in the byte array are arranged from left to right, where 
            bit 0 is mapped to byte[0].bit8, bit 1 mapped to byte[0].bit7, etc
            </summary>
        </member>
        <member name="P:Oss.Asn1.BitString.Length">
            <summary>
            Gets or sets the number of elements in the BitArray.
            If <c>Length</c> is set to a value that is less than <c>Count</c>,
            the BitArray is truncated and the elements after the
            <c>Length - 1</c> value are deleted.
            If <c>Length</c> is set to a value that is greater than
            <c>Count</c>, the new elements are set to false.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BitString.Resize(System.Int32)">
            <summary>
            Resizes BitString to new <c>bitLength</c>.
            If new <c>Length</c> less than current length,
            the BitArray is truncated and the elements after the
            <c>Length - 1</c> value are deleted.
            If new <c>Length</c> is set to a value greater than
            current length, the new elements are set to false.
            </summary>
            <param name="bitLength">New number of bits in BitString.</param>
            <returns>Resized BitString.</returns>
        </member>
        <member name="P:Oss.Asn1.BitString.Item(System.Int32)">
            <summary>
            Gets or sets the value of the bit
            at a specific position in the BitString.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <returns>The value of the bit at position index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"> Throws if index is out of range. </exception>
        </member>
        <member name="M:Oss.Asn1.BitString.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the BitString class that can hold
            the specified number of bit values, which are initially set to false.
            </summary>
            <param name="length">The number of bit values in the new BitString.</param>
            <exception cref="T:System.ArgumentException"> Throws if length is less than zero. </exception>
        </member>
        <member name="M:Oss.Asn1.BitString.#ctor(Oss.Asn1.BitString)">
            <summary>
            Initializes a new instance of the BitString class that contains
            bit values copied from the specified BitString.
            </summary>
            <param name="value">A BitString containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.#ctor(System.Collections.BitArray)">
            <summary>
            Initializes a new instance of the BitString class that contains
            bit values copied from the specified BitArray.
            </summary>
            <param name="bitArray">A BitArray containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.#ctor(System.Boolean[])">
            <summary>
            Initializes a new instance of the BitString class that contains
            bit values copied from the specified boolean array.
            </summary>
            <param name="boolArray">A boolean array containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BitString class that contains
            bit values copied from the specified array of bytes.
            </summary>
            <param name="byteArray">An array of bytes containing the values to copy.
            Bits in the byte array are arranged from left to right, where 
            bit 0 is mapped to byte[0].bit8, bit 1 mapped to byte[0].bit7, etc</param>
            <param name="nbits">The number of bits to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the BitString class that contains
            bit values copied from the specified array of bytes.
            </summary>
            <param name="byteArray">An array of bytes containing the values to copy.
            Bits in the byte array are arranged from left to right, where 
            bit 0 is mapped to byte[0].bit8, bit 1 mapped to byte[0].bit7, etc</param>
        </member>
        <member name="M:Oss.Asn1.BitString.Get(System.Int32)">
            <summary>
            Gets the value of the bit at a specific position in the BitString.
            </summary>
            <param name="index">The zero-based index of the value to get.</param>
            <returns>The value of the bit at position index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"> Throws if index is out of range. </exception>
        </member>
        <member name="M:Oss.Asn1.BitString.Set(System.Int32,System.Boolean)">
            <summary>
            Sets the bit at a specific position in the BitString to the specified value.
            </summary>
            <param name="index">The zero-based index of the bit to set.</param>
            <param name="value">The Boolean value to assign to the bit.</param>
            <exception cref="T:System.IndexOutOfRangeException"> Throws if index is out of range. </exception>
        </member>
        <member name="M:Oss.Asn1.BitString.Set(System.Byte[])">
            <summary>
            Sets bit values of the BitString to values copied 
            from byteArray.
            </summary>
            <param name="byteArray">An array of bytes containing the values to copy.
            Bits in the byte array are arranged from left to right, where 
            bit 0 is mapped to byte[0].bit8, bit 1 mapped to byte[0].bit7, etc</param>
        </member>
        <member name="M:Oss.Asn1.BitString.Set(System.Byte[],System.Int32)">
            <summary>
            Sets bit values of the BitString to specified number
            of values copied from byteArray.
            </summary>
            <param name="byteArray">An array of bytes containing the values to copy.
            Bits in the byte array are arranged from left to right, where 
            bit 0 is mapped to byte[0].bit8, bit 1 mapped to byte[0].bit7, etc</param>
            <param name="nbits">Number of values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.Set(System.Collections.BitArray)">
            <summary>
            Sets bit values of the BitString to values copied 
            from BitArray.
            </summary>
            <param name="bitArray">BitArray containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.Set(Oss.Asn1.BitString)">
            <summary>
            Sets bit values of the BitString to values copied 
            from BitString.
            </summary>
            <param name="value">BitString containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.SetAll(System.Boolean)">
            <summary>
            Sets all bits in the BitString to the specified value.
            </summary>
            <param name="value">The boolean value to assign to all bits.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.ToBitArray">
            <summary>
            Returns a BitArray that represents the current BitString object.
            </summary>
            <returns>A BitArray that represents the current object.</returns>
        </member>
        <member name="M:Oss.Asn1.BitString.And(Oss.Asn1.BitString)">
            <summary>
            Performs the bitwise AND operation on the elements in the current BitString
            against the corresponding elements in the specified BitString.
            </summary>
            <param name="value">The BitString with which to perform the bitwise AND operation.</param>
            <returns>
            The current instance containing the result of the bitwise AND operation
            on the elements in the current BitString against the
            corresponding elements in the specified BitString.
            </returns>
            <exception cref="T:System.ArgumentException"> Throws if the lengths do not match. </exception>
        </member>
        <member name="M:Oss.Asn1.BitString.Or(Oss.Asn1.BitString)">
            <summary>
            Performs the bitwise OR operation on the elements in the current BitString
            against the corresponding elements in the specified BitString.
            </summary>
            <param name="value">The BitString with which to perform the bitwise OR operation.</param>
            <returns>
            The current instance containing the result of the bitwise OR operation
            on the elements in the current BitString against the
            corresponding elements in the specified BitString.
            </returns>
            <exception cref="T:System.ArgumentException"> Throws if the lengths do not match. </exception>
        </member>
        <member name="M:Oss.Asn1.BitString.Xor(Oss.Asn1.BitString)">
            <summary>
            Performs the bitwise XOR operation on the elements in the current BitString
            against the corresponding elements in the specified BitString.
            </summary>
            <param name="value">The BitString with which to perform the bitwise XOR operation.</param>
            <returns>
            The current instance containing the result of the bitwise XOR operation
            on the elements in the current BitString against the
            corresponding elements in the specified BitString.
            </returns>
            <exception cref="T:System.ArgumentException"> Throws if the lengths do not match. </exception>
        </member>
        <member name="M:Oss.Asn1.BitString.Not">
            <summary>
            Inverts all the bit values in the current BitString.
            </summary>
            <returns>The current instance with inverted bit values.</returns>
        </member>
        <member name="M:Oss.Asn1.BitString.Equals(System.Object)">
            <summary>
            BitString are equal if they have the same length and identical bit values.
            </summary>
            <param name="obj">The BitString to compare.</param>
            <returns>True if the specified BitString is equal to the current BitString; otherwise, false.</returns>
        </member>
        <member name="M:Oss.Asn1.BitString.GetHashCode">
            <summary>
            Gets hash code.
            </summary>
            <returns>Hash code value.</returns>
        </member>
        <member name="M:Oss.Asn1.BitString.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New BitString object with the same value.</returns>
        </member>
        <member name="M:Oss.Asn1.BitString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the BitString.
            </summary>
            <returns>An IEnumerator for the entire BitString.</returns>
        </member>
        <member name="T:Oss.Asn1.BitString.boolEnum">
            <summary>
            Class provides functionality for GetEnumerator() method.
            </summary>
        </member>
        <member name="F:Oss.Asn1.BitString.boolEnum.position">
            <summary>
            Current bit position in the BitString.
            </summary>
        </member>
        <member name="F:Oss.Asn1.BitString.boolEnum.bitStr">
            <summary>
            BitString to iterate through.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BitString.boolEnum.#ctor(Oss.Asn1.BitString)">
            <summary>
            Initialize new boolEnum instance with given BitString.
            </summary>
            <param name="bitString">BitString that will be used for iteration.</param>
        </member>
        <member name="M:Oss.Asn1.BitString.boolEnum.MoveNext">
            <summary>
            Move <c>position</c> to the next bit value.
            </summary>
            <returns>True, if end of BitString was not reached yet. Otherwise, false.</returns>
        </member>
        <member name="M:Oss.Asn1.BitString.boolEnum.Reset">
            <summary>
            Resets <c>position</c> value;
            </summary>
        </member>
        <member name="P:Oss.Asn1.BitString.boolEnum.System#Collections#IEnumerator#Current">
            <summary>
            Get current element of the collection.
            </summary>
        </member>
        <member name="P:Oss.Asn1.BitString.boolEnum.Current">
            <summary>
            Retrieves bit value at the current position.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws if <c>position</c> value is out of range.</exception>
        </member>
        <member name="T:Oss.Asn1.BitStringWithNamedBits">
            <summary>
            Class provides functionality for ASN.1 BIT STRING with named bits list.
            It differs from BitString. Zero trailing bits could be removed or added,
            so BitStringWithNamedBits has own Equals() method.
            Also BitStringWithNamedBits more flexible to satisfy
            size constraints.
            </summary>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the BitStringWithNamedBits class that can hold
            the specified number of bit values, which are initially set to false.
            </summary>
            <param name="length">The number of bit values in the new BitStringWithNamedBits.</param>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.#ctor(Oss.Asn1.BitString)">
            <summary>
            Initializes a new instance of the BitStringWithNamedBits class that contains
            bit values copied from the specified BitString.
            </summary>
            <param name="value">A BitString containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.#ctor(System.Boolean[])">
            <summary>
            Initializes a new instance of the BitStringWithNamedBits class that contains
            bit values copied from the specified boolean array.
            </summary>
            <param name="boolArray">A boolean array containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the BitStringWithNamedBits class that contains
            bit values copied from the specified array of bytes.
            </summary>
            <param name="byteArray">An array of bytes containing the values to copy.
            Bits in the byte array are arranged from left to right, where 
            bit 0 is mapped to byte[0].bit8, bit 1 mapped to byte[0].bit7, etc</param>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.#ctor(System.Collections.BitArray)">
            <summary>
            Initializes a new instance of the BitStringWithNamedBits class that contains
            bit values copied from the specified BitArray.
            </summary>
            <param name="bitArray">A BitArray containing the values to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BitStringWithNamedBits class that contains
            bit values copied from the specified array of bytes.
            </summary>
            <param name="byteArray">An array of bytes containing the values to copy.
            Bits in the byte array are arranged from left to right, where 
            bit 0 is mapped to byte[0].bit8, bit 1 mapped to byte[0].bit7, etc</param>
            <param name="nbits">The number of bits to copy.</param>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.LastOneBitPos">
            <summary>
            Return position of the last bit value set to 1.
            </summary>
            <returns>
            Position of the last bit value set to 1.
            If all bit values in BitStringWithNamedBits set to 0 or
            BitStringWithNamedBits has zero length, then return -1.
            </returns>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.Equals(System.Object)">
            <summary>
            BitStringWithNamedBits are equal if they have identical bit values,
            except for possible difference in the number of zero trailing bits.
            </summary>
            <param name="obj">The BitStringWithNamedBits to compare.</param>
            <returns>true if the specified BitStringWithNamedBits is equal to the current
            BitStringWithNamedBits; otherwise, false.</returns>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.GetHashCode">
            <summary>
            Gets hash code.
            </summary>
            <returns>Hash code value.</returns>
        </member>
        <member name="M:Oss.Asn1.BitStringWithNamedBits.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New BitStringWithNamedBits object with the same value.</returns>
        </member>
        <member name="T:Oss.Asn1.AbstractAsn1DateTime">
            <summary>
            This abstract parent class for GeneralizedTime and UTCTime
            that provides common constructors.
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime._stringValue">
            <summary>
            String representation.
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime._dateTime">
            <summary>
            DateTime representation of date and time (without offset).
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime._timeSpan">
            <summary>
            TimeSpan representation of the time offset.
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime._isUTC">
            <summary>
            True if UTC time used, otherwise - false.
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime._isStringValueActual">
            <summary>
            True if string representation contains actual time value
            for this object. 
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime._isDateTimeFieldsActual">
            <summary>
            True if <c>_dateTime</c>, <c>_timeSpan</c> and <c>_isUTC</c>
            values contain actual time value for this object.
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime.Plus24hTimeSpan">
            <summary>
            The +24 hours value of the TimeSpan type.
            </summary>
        </member>
        <member name="F:Oss.Asn1.AbstractAsn1DateTime.Minus24hTimeSpan">
            <summary>
            The -24 hours value of the TimeSpan type.
            </summary>
        </member>
        <member name="P:Oss.Asn1.AbstractAsn1DateTime.DateTime">
            <summary>
            Gets or sets DateTime value.
            </summary>
        </member>
        <member name="P:Oss.Asn1.AbstractAsn1DateTime.TimeSpan">
            <summary>
            Gets or sets TimeSpan value.
            </summary>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.#ctor(System.String)">
            <summary>
            Initializes new instance with given string representation.
            </summary>
            <param name="value">String representation of the time.</param>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.#ctor(System.DateTime,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes new instance with DateTime and TimeSpan structures and
            bool flag that identifies UTC time usage.
            </summary>
            <param name="dateTime">DateTime part of time value.</param>
            <param name="timeSpan">TimeSpan part of time value.</param>
            <param name="isUTC">True if UTC time used.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes new instance with DateTime and TimeSpan structures.
            </summary>
            <param name="dateTime">DateTime part of time value.</param>
            <param name="timeSpan">TimeSpan part of time value.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.ToUniversalTime">
            <summary>
            Converts current time value to DateTimeOffset structure.
            </summary>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.ToTicks">
            <summary>
            Converts current time value to ticks (100 nanoseconds).
            </summary>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New GeneralizedTime object with the same value.</returns>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.Equals(System.Object)">
            <summary>
            Compares two AbstractAsn1DateTime objects.
            </summary>
            <param name="right">Object to compare with.</param>
            <returns>True if objects are equal.</returns>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.LiterallyEquals(System.Object)">
            <summary>
            Performs literal comparison of two AbstractAsn1DateTime objects.
            </summary>
            <param name="right">Object to compare with.</param>
            <returns>True if objects are literally equal.</returns>
        </member>
        <member name="M:Oss.Asn1.AbstractAsn1DateTime.GetHashCode">
            <summary>
            Gets hash code value.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Oss.Asn1.GeneralizedTime">
            <summary>
            This class represents GeneralizedTime according to standard: ISO/IEC 8824-1
            ITU-T recommendation X.680 clauses 46.
            String representation must be in the following forms:
            
                YYYYMMDDHHMMSS[.FFF]+hhmm
                YYYYMMDDHHMMSS[.FFF]-hhmm
                YYYYMMDDHHMMSS[.FFF]
                YYYYMMDDHHMMSS[.FFF]Z (isUTC set to true)
            
            Additionally, the following forms for the 'time of day' are recognized:
            HHMMSS[.FFF] part
                HH[.FFF]  - fractions of hour
                HHMM[.FFF] - fractions of minute
                HHMMSS[.FFF] - fractions of second
            
            If user request DateTimeOffset property that assumed that maximum
            fractional part precision is 1 tick = 100 nanosecond = 0.0000001 second
            If fractional part of string representation contains more digits then 
            allowed by specified precision then these digits will be ignored.
            </summary>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.#ctor(System.String)">
            <summary>
            Constructor creates GeneralizedTime object with StringValue
            property equals to passed str value.
            Constructor does not validate that
            string has valid ASN.1 GeneralizedTime format.
            </summary>
            <param name="value">GeneralizedTime string value.</param>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.#ctor(System.DateTimeOffset,System.Boolean)">
            <summary>
            Constructor creates GeneralizedTime object with 
            DateTimeOffset and isUTC properties set to specified values
            StringValue is constructed using these values.
            </summary>
            <param name="dateTimeOffset">DateTimeOffset value specified.</param>
            <param name="isUTC">bool flag indicates that GeneralizedTime represents Universal Coordinated Time.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if isUTC is true and time offset isn't 0</exception>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.#ctor(System.DateTime,System.TimeSpan,System.Boolean)">
            <summary>
            Constructor creates GeneralizedTime object with DateTime, TimeSpan and <c>_isUTC</c>
            properties equals to passed values.
            </summary>
            <param name="dateTime">UTCTime DateTime value.</param>
            <param name="timeSpan">UTCTime TimeSpan value.</param>
            <param name="isUTC">True if Universal Coordinated Time used.</param>
        </member>
        <member name="P:Oss.Asn1.GeneralizedTime.StringValue">
            <summary>
            This property stores string representation of GeneralizedTime.
            If the DateTimeOffset value was previously set then 
            converted string value returned.
            </summary>
        </member>
        <member name="P:Oss.Asn1.GeneralizedTime.DateTime">
            <summary>
            This property stores DateTime part of GeneralizedTime.
            If the the StringValue was previously set then the getter methods
            converts the string and return DateTime value and updates 
            <c>_isUTC</c> and <c>_timeSpan</c> properties.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if StringValue has invalid format </exception>
        </member>
        <member name="P:Oss.Asn1.GeneralizedTime.TimeSpan">
            <summary>
            This property stores TimeSpan part of GeneralizedTime.
            If the the StringValue was previously set then the getter methods
            converts the string and return DateTime value and updates 
            <c>_isUTC</c> and <c>_timeSpan</c> properties.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if StringValue has invalid format</exception>
        </member>
        <member name="P:Oss.Asn1.GeneralizedTime.IsUTC">
            <summary>
            This property stores boolean flag indicates 
            if GeneralizedTime represents Universal Coordinated Time.
            
            This property is used only in pair with DateTimeOffset.
            </summary>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>New GeneralizedTime object with the same value.</returns>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.LiterallyEquals(System.Object)">
            <summary>
            Performs literal comparison of two GeneralizedTime objects.
            </summary>
            <param name="right">Object to compare with.</param>
            <returns>True if objects are literally equal.</returns>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.Compare(Oss.Asn1.GeneralizedTime)">
            <summary>
            Compares two GeneralizedTime objects.
            </summary>
            <param name="that">GeneralizedTime to compare with.</param>
            <returns>Negative value, if current object represents moment in time which is
            earlier than time stored in compared object. Zero if times are the same,
            and positive value if time in current object is later.</returns>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.Validate(System.Boolean)">
            <summary>
            Validates value of current object.
            </summary>
            <param name="isCanonical">When true, additional checks to ensure that value
            stored in canonical form performed.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.ToCanonicalString">
            <summary>
            Converts current value to canonical representation.
            </summary>
            <returns>Value in canonical form.</returns>
        </member>
        <member name="M:Oss.Asn1.GeneralizedTime.IsLocalTime">
            <summary>
            Informs whether the time is the local time or not.
            </summary>
            <returns>True if the time is local.</returns>
        </member>
        <member name="T:Oss.Asn1.UTCTime">
            <summary>
            This class represents UTCTime according to standard: ISO/IEC 8824-1
            ITU-T recommendation X.680 clauses 47.
            String representation must be in the following forms:
                YYMMDDhhmm[ss]Z
                YYMMDDhhmm[ss]+hhmm
                YYMMDDhhmm[ss]-hhmm
            </summary>
        </member>
        <member name="M:Oss.Asn1.UTCTime.#ctor(System.String)">
            <summary>
            Creates UTCTime object from a string value.
            Does not validate that string has valid ASN.1 UTCtime format.
            </summary>
            <param name="str">UTCTime string value</param>
        </member>
        <member name="M:Oss.Asn1.UTCTime.#ctor(System.DateTimeOffset)">
            <summary>
            Creates UTCTime object from DateTimeOffset value.
            </summary>
            <param name="dateTimeOffset">UTCTime DateTimeOffset value.</param>
        </member>
        <member name="M:Oss.Asn1.UTCTime.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Creates UTCTime object with DateTime and TimeSpan
            properties equals to passed values.
            </summary>
            <param name="dateTime">UTCTime DateTime value.</param>
            <param name="timeSpan">UTCTime TimeSpan value.</param>
        </member>
        <member name="P:Oss.Asn1.UTCTime.StringValue">
            <summary>
            This property stores string representation of UTCTime.
            If the DateTimeOffset value was previously set then 
            converted string value returned.
            </summary>
        </member>
        <member name="P:Oss.Asn1.UTCTime.DateTime">
            <summary>
            This property stores DateTime part of UTCTime.
            If the the StringValue was previously set then the getter methods
            converts the string and return DateTime value and updates 
            <c>_isUTC</c> and <c>_timeSpan</c> properties.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if StringValue has invalid format </exception>
        </member>
        <member name="P:Oss.Asn1.UTCTime.TimeSpan">
            <summary>
            This property stores TimeSpan part of UTCTime.
            If the the StringValue was previously set then the getter methods
            converts the string and return DateTime value and updates 
            <c>_isUTC</c> and <c>_timeSpan</c> properties.
            </summary>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if StringValue has invalid format </exception>
        </member>
        <member name="P:Oss.Asn1.UTCTime.IsUTC">
            <summary>
            This property stores boolean flag indicates 
            if UTCTime represents Universal Coordinated Time.
            
            This property is used only in pair with TimeSpan.
            </summary>
        </member>
        <member name="M:Oss.Asn1.UTCTime.Copy">
            <summary>
            Creates the deep copy of this object.
            </summary>
            <returns>Copy of UTCTime object instantiated using StringValue property.</returns>
        </member>
        <member name="M:Oss.Asn1.UTCTime.LiterallyEquals(System.Object)">
            <summary>
            Performs literal comparison of two UTCTime objects.
            </summary>
            <param name="right">Object to compare with.</param>
            <returns>True if objects are literally equal.</returns>
        </member>
        <member name="M:Oss.Asn1.UTCTime.Compare(Oss.Asn1.UTCTime)">
            <summary>
            Compares two GeneralizedTime objects.
            </summary>
            <param name="that">UTCTime to compare with.</param>
            <returns>Negative value, if current object represents moment in time which is
            earlier than time stored in compared object. Zero if times are the same,
            and positive value if time in current object is later.</returns>
        </member>
        <member name="M:Oss.Asn1.UTCTime.Validate(System.Boolean)">
            <summary>
            Validates value of current object.
            </summary>
            <param name="isCanonical">When true, additional checks to ensure that value
            stored in canonical form performed.</param>
            <exception cref="T:Oss.Asn1.Asn1InvalidDataException">Thrown if data cannot be encoded</exception>
        </member>
        <member name="M:Oss.Asn1.UTCTime.ToCanonicalString">
            <summary>
            Converts current value to canonical representation.
            </summary>
            <returns>Value in canonical form.</returns>
        </member>
        <member name="T:Oss.Asn1.ValueNotationFormatter">
            <summary>
            Formats ASN.1 data objects in ASN.1 Value Notation format
            </summary>
        </member>
        <member name="M:Oss.Asn1.ValueNotationFormatter.Print(Oss.Asn1.BaseType,System.IO.TextWriter)">
            <summary>
            Prints the ASN.1 value notation of the PDU to the specified TextWriter object.
            The ValueNotationFormatter.Options will be used as formatting options.
            </summary>
            <param name="obj">the object to be printed in ASN.1 value notation</param>
            <param name="output">the target output</param>
        </member>
        <member name="M:Oss.Asn1.ValueNotationFormatter.Print(Oss.Asn1.BaseType,System.IO.TextWriter,Oss.Asn1.ValueNotationFormatter.OptionsSet)">
            <summary>
            Prints the ASN.1 value notation of the PDU to the specified TextWriter object.
            The specified options parameter will be used as formatting options.
            </summary>
            <param name="obj">the object to be printed in ASN.1 value notation</param>
            <param name="output">the target output</param>
            <param name="options">the formatting options</param>
        </member>
        <member name="M:Oss.Asn1.ValueNotationFormatter.Print(System.Byte[],System.Int32,System.IO.TextWriter)">
            <summary>
            Prints encoded data to the specified TextWriter, formatted using the ValueNotationFormatter.Options.
            </summary>
            <param name="data">array containing encoded data</param>
            <param name="length">number of bytes form array to be printed</param>
            <param name="output">the target output</param>
        </member>
        <member name="M:Oss.Asn1.ValueNotationFormatter.Print(System.Byte[],System.Int32,System.IO.TextWriter,Oss.Asn1.ValueNotationFormatter.OptionsSet)">
            <summary>
            Prints encoded data to the specified TextWriter, formatted using the specified options.
            </summary>
            <param name="data">array containing encoded data</param>
            <param name="length">number of bytes form array to be printed</param>
            <param name="output">the target output</param>
            <param name="options">options to be used for formatting</param>
        </member>
        <member name="M:Oss.Asn1.ValueNotationFormatter.Print(Oss.Asn1.ValueNotationFormatter.PrintAsn1ValueNotation,System.IO.TextWriter,Oss.Asn1.ValueNotationFormatter.OptionsSet)">
            <summary>
            Prints encoded data to the specified TextWriter, formatted using the specified options.
            Calls given value printing method.
            </summary>
            <param name="printValue">value printing method</param>
            <param name="output">the target output</param>
            <param name="options">options to be used for formatting</param>
        </member>
        <member name="T:Oss.Asn1.ValueNotationFormatter.PrintAsn1ValueNotation">
            <summary>
            Delegate for printing the value notation.
            </summary>
            <param name="prt">the instance of printer/formatter facility</param>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.Options">
            <summary>
            Gets the default options to be used when printing without a custom options object specified.
            </summary>
        </member>
        <member name="T:Oss.Asn1.ValueNotationFormatter.OutputStyle">
            <summary>
            defines the possible styles to print the PDU
            </summary>
        </member>
        <member name="F:Oss.Asn1.ValueNotationFormatter.OutputStyle.ContentsOnly">
            <summary>
            outputs value content only
            </summary>
        </member>
        <member name="F:Oss.Asn1.ValueNotationFormatter.OutputStyle.ValueAssignment">
            <summary>
            prefix values with "value MyType ::= "
            </summary>
        </member>
        <member name="F:Oss.Asn1.ValueNotationFormatter.OutputStyle.OpenType">
            <summary>
            prefix value with the "MyType : "
            </summary>
        </member>
        <member name="T:Oss.Asn1.ValueNotationFormatter.OptionsSet">
            <summary>
            Defines the options when the PDUs are formatted in ASN.1 value notation.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.IndentSize">
            <summary>
            number of spaces added on each indentation level
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.IndentChar">
            <summary>
            specifies the indentation char to be used
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.NewLine">
            <summary>
            string to be used as line separator
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.StringChop">
            <summary>
            length of a string value before chopping the tail off as "..."
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.BytesInGroup">
            <summary>
            Number of bytes that will be printed within one group
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.GroupsInLine">
            <summary>
            Maximum number of byte groups that could be printed on the same line
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.OutputStyle">
            <summary>
            specifies the style in which the output is formatted
            </summary>
        </member>
        <member name="P:Oss.Asn1.ValueNotationFormatter.OptionsSet.PrintImpliedValues">
            <summary>
            When the component has the default value and the value of the component is not explicitly
            specified in the input PDU, print the default (implied) value. By default, values of such
            components are not printed to the output.
            </summary>
        </member>
        <member name="M:Oss.Asn1.ValueNotationFormatter.OptionsSet.#ctor">
            <summary>
            default constructor initializes fields with default values
            </summary>
        </member>
        <member name="M:Oss.Asn1.ValueNotationFormatter.OptionsSet.#ctor(Oss.Asn1.ValueNotationFormatter.OptionsSet)">
            <summary>
            copy constructor 
            </summary>
        </member>
        <member name="T:Oss.Asn1.XerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for XER codec.
            </summary>
        </member>
        <member name="P:Oss.Asn1.XerEncoderOptions.IncludeXmlDeclaration">
            <summary>
            Enables or disable the generation of the XML declaration at the start
            of the XML document. By default the generation of the XML declarartion is
            disabled.
            </summary>
        </member>
        <member name="P:Oss.Asn1.XerEncoderOptions.Compact">
            <summary>
            Instructs the encoder to generate compact XML document. When this option is set to
            'true' the encoder does not attempt to format the output XML by inserting newlines
            and indentation. By default the 'Compact' option is turned off.
            </summary>
        </member>
        <member name="P:Oss.Asn1.XerEncoderOptions.IndentSize">
            <summary>
            Specifies the width of one indentation level. This option has no effect unless the
            'Compact' option is set to 'false'. The default value is '2'.
            </summary>
        </member>
        <member name="P:Oss.Asn1.XerEncoderOptions.LineSeparator">
            <summary>
            Specifies the newline sequence. This option has no effect unless the
            'Compact' option is set to 'false'. The default value is 'System.Environment.NewLine'.
            </summary>
        </member>
        <member name="M:Oss.Asn1.XerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.XerEncoderOptions.Set(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">The source object containing the options to copy.</param>
        </member>
        <member name="M:Oss.Asn1.XerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            XerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of XerEncoderOptions class or 
            the reference to a new XerEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.CxerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for Cxer codec.
            </summary>
        </member>
        <member name="M:Oss.Asn1.CxerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.CxerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            CxerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of CxerEncoderOptions class or 
            the reference to a new CxerEncoderOptions object initialized from 'other'.</returns>
        </member>
        <member name="T:Oss.Asn1.ExerEncoderOptions">
            <summary>
            This is a simple container class for the options which affect the behavior of the encoding operation for EXER codec.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.IncludeXmlDeclaration">
            <summary>
            Enables or disable the generation of the XML declaration at the start
            of the XML document. By default the generation of the XML declarartion is
            disabled.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.Compact">
            <summary>
            Instructs the encoder to generate compact XML document. When this option is set to
            'true' the encoder does not attempt to format the output XML by inserting newlines
            and indentation. By default the 'Compact' option is turned off.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.IndentSize">
            <summary>
            Specifies the width of one indentation level. This option has no effect unless the
            'Compact' option is set to 'false'. The default value is '2'.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.LineSeparator">
            <summary>
            Specifies the newline sequence. This option has no effect unless the
            'Compact' option is set to 'false'. The default value is 'System.Environment.NewLine'.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.NewLineOnAttributes">
            <summary>
            Similar to the NewLineOnAttributes property of the XmlWriterSettings. When this
            option is turned on each attribute is printed on the new line with one extra
            level of indentation. By default the NewLineOnAttributes is false.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.EnableXmlhstringForOpentypes">
            <summary>
            Treat undecoded open types as binary data. This option can be convenient when
            the binary message is reencoded but the original message has not been completely
            decoded. When this option is turned on, the undecoded open type is encoded as the
            hexadecimal or BASE64 string (depending on the encoding instructions, applied to
            the type). When this option is turned off (default) the encoder assumes that the
            undecoded value is the UTF8 string containing XML tokens.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.XmlDTDRootElementName">
            <summary>
            Specifies the Root Element Name in !DOCTYPE.
            If is not null then it is encoded in !DOCTYPE.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.XmlDTDExternalSystemID">
            <summary>
            Specifies the ExternalID SystemLiteral in !DOCTYPE.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.XmlDTDExternalPublicID">
            <summary>
            Specifies the ExternalID PubidLiteral in !DOCTYPE.
            If is not null then the DTD ExternalID is PUBLIC,
            otherwise it is SYSTEM.
            </summary>
        </member>
        <member name="P:Oss.Asn1.ExerEncoderOptions.XmlStylesheetAddress">
            <summary>
            Specifies the address of the referenced style sheet.
            If is not null then
            it is put into the 'href=' attribute of the encoded '?xml-stylesheet'
            processing instruction.
            </summary>
        </member>
        <member name="M:Oss.Asn1.ExerEncoderOptions.#ctor">
            <summary>
            The default constructor initializes the options with default values.
            </summary>
        </member>
        <member name="M:Oss.Asn1.ExerEncoderOptions.Set(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Set options to match the other object. 
            </summary>
            <param name="other">The source object containing the options to copy.</param>
        </member>
        <member name="M:Oss.Asn1.ExerEncoderOptions.Convert(Oss.Asn1.BaseEncoderOptions)">
            <summary>
            Converts any BaseEncoderOptions object reference to a
            ExerEncoderOptions object reference.
            </summary>
            <param name="other">A BaseEncoderOptions object reference.</param>
            <returns>The 'other' parameter value if it is of ExerEncoderOptions class or 
            the reference to a new ExerEncoderOptions object initialized from 'other'.</returns>
        </member>
    </members>
</doc>
